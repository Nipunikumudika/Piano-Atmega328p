
piano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00001456  000014ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001456  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000150c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ca0  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000983  00000000  00000000  00003284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d1a  00000000  00000000  00003c07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00004924  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fb  00000000  00000000  00004ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001629  00000000  00000000  00004fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  00006608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      68:	6d 06       	cpc	r6, r29
      6a:	7c 06       	cpc	r7, r28
      6c:	8b 06       	cpc	r8, r27
      6e:	9a 06       	cpc	r9, r26
      70:	a9 06       	cpc	r10, r25
      72:	b8 06       	cpc	r11, r24
      74:	c7 06       	cpc	r12, r23
      76:	d6 06       	cpc	r13, r22
      78:	02 07       	cpc	r16, r18
      7a:	11 07       	cpc	r17, r17
      7c:	20 07       	cpc	r18, r16
      7e:	2f 07       	cpc	r18, r31
      80:	3e 07       	cpc	r19, r30
      82:	4d 07       	cpc	r20, r29
      84:	5c 07       	cpc	r21, r28
      86:	6b 07       	cpc	r22, r27
      88:	97 07       	cpc	r25, r23
      8a:	a6 07       	cpc	r26, r22
      8c:	b5 07       	cpc	r27, r21
      8e:	c4 07       	cpc	r28, r20
      90:	d3 07       	cpc	r29, r19
      92:	e2 07       	cpc	r30, r18
      94:	f1 07       	cpc	r31, r17
      96:	00 08       	sbc	r0, r0

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e6 e5       	ldi	r30, 0x56	; 86
      ac:	f4 e1       	ldi	r31, 0x14	; 20
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a2 31       	cpi	r26, 0x12	; 18
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>
      ba:	0e 94 fe 04 	call	0x9fc	; 0x9fc <main>
      be:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <_exit>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <lcd_send_command>:
	
}

void lcd_send_command (uint8_t command)
{
	DATA_BUS=(command&0b11110000);
      c6:	98 2f       	mov	r25, r24
      c8:	90 7f       	andi	r25, 0xF0	; 240
      ca:	9b b9       	out	0x0b, r25	; 11
	CTL_BUS &=~(1<<LCD_RS);
      cc:	43 98       	cbi	0x08, 3	; 8
	CTL_BUS |=(1<<LCD_EN);
      ce:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d0:	ef e9       	ldi	r30, 0x9F	; 159
      d2:	ff e0       	ldi	r31, 0x0F	; 15
      d4:	31 97       	sbiw	r30, 0x01	; 1
      d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_send_command+0xe>
      d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_send_command+0x14>
      da:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
      dc:	45 98       	cbi	0x08, 5	; 8
      de:	ef e9       	ldi	r30, 0x9F	; 159
      e0:	ff e0       	ldi	r31, 0x0F	; 15
      e2:	31 97       	sbiw	r30, 0x01	; 1
      e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_send_command+0x1c>
      e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_send_command+0x22>
      e8:	00 00       	nop
	_delay_ms(1);
	DATA_BUS=((command&0b00001111)<<4);
      ea:	f0 e1       	ldi	r31, 0x10	; 16
      ec:	8f 9f       	mul	r24, r31
      ee:	c0 01       	movw	r24, r0
      f0:	11 24       	eor	r1, r1
      f2:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS |=(1<<LCD_EN);
      f4:	45 9a       	sbi	0x08, 5	; 8
      f6:	8f e9       	ldi	r24, 0x9F	; 159
      f8:	9f e0       	ldi	r25, 0x0F	; 15
      fa:	01 97       	sbiw	r24, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_send_command+0x34>
      fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_send_command+0x3a>
     100:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
     102:	45 98       	cbi	0x08, 5	; 8
     104:	ef e9       	ldi	r30, 0x9F	; 159
     106:	ff e0       	ldi	r31, 0x0F	; 15
     108:	31 97       	sbiw	r30, 0x01	; 1
     10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_send_command+0x42>
     10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_send_command+0x48>
     10e:	00 00       	nop
     110:	08 95       	ret

00000112 <lcd_init>:


void lcd_init(void)
{
	
	DATA_DDR = (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5)| (1<<LCD_D4);
     112:	80 ef       	ldi	r24, 0xF0	; 240
     114:	8a b9       	out	0x0a, r24	; 10
	CTL_DDR |= (1<<LCD_EN)|(1<<LCD_RW)|(1<<LCD_RS);
     116:	87 b1       	in	r24, 0x07	; 7
     118:	88 63       	ori	r24, 0x38	; 56
     11a:	87 b9       	out	0x07, r24	; 7

	
	DATA_BUS = (0<<LCD_D7)|(0<<LCD_D6)|(1<<LCD_D5)|(0<<LCD_D4);
     11c:	80 e2       	ldi	r24, 0x20	; 32
     11e:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS|= (1<<LCD_EN)|(0<<LCD_RW)|(0<<LCD_RS);
     120:	45 9a       	sbi	0x08, 5	; 8
     122:	8f e9       	ldi	r24, 0x9F	; 159
     124:	9f e0       	ldi	r25, 0x0F	; 15
     126:	01 97       	sbiw	r24, 0x01	; 1
     128:	f1 f7       	brne	.-4      	; 0x126 <lcd_init+0x14>
     12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_init+0x1a>
     12c:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
     12e:	45 98       	cbi	0x08, 5	; 8
     130:	8f e9       	ldi	r24, 0x9F	; 159
     132:	9f e0       	ldi	r25, 0x0F	; 15
     134:	01 97       	sbiw	r24, 0x01	; 1
     136:	f1 f7       	brne	.-4      	; 0x134 <lcd_init+0x22>
     138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_init+0x28>
     13a:	00 00       	nop
	_delay_ms(1);
	
	lcd_send_command(LCD_CMD_4BIT_2ROW_5X7);
     13c:	88 e2       	ldi	r24, 0x28	; 40
     13e:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
     142:	8f e9       	ldi	r24, 0x9F	; 159
     144:	9f e0       	ldi	r25, 0x0F	; 15
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <lcd_init+0x34>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_init+0x3a>
     14c:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(LCD_CMD_DISPLAY_NO_CURSOR);
     14e:	8c e0       	ldi	r24, 0x0C	; 12
     150:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
     154:	8f e9       	ldi	r24, 0x9F	; 159
     156:	9f e0       	ldi	r25, 0x0F	; 15
     158:	01 97       	sbiw	r24, 0x01	; 1
     15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_init+0x46>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <lcd_init+0x4c>
     15e:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(0x80);
     160:	80 e8       	ldi	r24, 0x80	; 128
     162:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
     166:	08 95       	ret

00000168 <lcd_write_character>:
	}
}
void lcd_write_character(uint8_t character)
{
	
	DATA_BUS=(character & 0b11110000);
     168:	98 2f       	mov	r25, r24
     16a:	90 7f       	andi	r25, 0xF0	; 240
     16c:	9b b9       	out	0x0b, r25	; 11
	CTL_BUS|=(1<<LCD_RS);
     16e:	43 9a       	sbi	0x08, 3	; 8
	CTL_BUS |=(1<<LCD_EN);
     170:	45 9a       	sbi	0x08, 5	; 8
     172:	ef e3       	ldi	r30, 0x3F	; 63
     174:	ff e1       	ldi	r31, 0x1F	; 31
     176:	31 97       	sbiw	r30, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <lcd_write_character+0xe>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_write_character+0x14>
     17c:	00 00       	nop
	_delay_ms(2);
	CTL_BUS &=~(1<<LCD_EN);
     17e:	45 98       	cbi	0x08, 5	; 8
     180:	ef e3       	ldi	r30, 0x3F	; 63
     182:	ff e1       	ldi	r31, 0x1F	; 31
     184:	31 97       	sbiw	r30, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_write_character+0x1c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_write_character+0x22>
     18a:	00 00       	nop
	_delay_ms(2);
	DATA_BUS=((character & 0b00001111)<<4);
     18c:	f0 e1       	ldi	r31, 0x10	; 16
     18e:	8f 9f       	mul	r24, r31
     190:	c0 01       	movw	r24, r0
     192:	11 24       	eor	r1, r1
     194:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS |=(1<<LCD_EN);
     196:	45 9a       	sbi	0x08, 5	; 8
     198:	8f e3       	ldi	r24, 0x3F	; 63
     19a:	9f e1       	ldi	r25, 0x1F	; 31
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_write_character+0x34>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_write_character+0x3a>
     1a2:	00 00       	nop
	_delay_ms(2);
	CTL_BUS &=~(1<<LCD_EN);
     1a4:	45 98       	cbi	0x08, 5	; 8
     1a6:	ef e3       	ldi	r30, 0x3F	; 63
     1a8:	ff e1       	ldi	r31, 0x1F	; 31
     1aa:	31 97       	sbiw	r30, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_write_character+0x42>
     1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_write_character+0x48>
     1b0:	00 00       	nop
     1b2:	08 95       	ret

000001b4 <lcd_write_word>:
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
	_delay_ms(1);
}
void lcd_write_word(uint8_t word[20])
{
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	ec 01       	movw	r28, r24
	int i=0;
	while(word[i]!='\0')
     1ba:	88 81       	ld	r24, Y
     1bc:	88 23       	and	r24, r24
     1be:	31 f0       	breq	.+12     	; 0x1cc <lcd_write_word+0x18>
     1c0:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_write_character(word[i]);
     1c2:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_write_character>
	_delay_ms(1);
}
void lcd_write_word(uint8_t word[20])
{
	int i=0;
	while(word[i]!='\0')
     1c6:	89 91       	ld	r24, Y+
     1c8:	81 11       	cpse	r24, r1
     1ca:	fb cf       	rjmp	.-10     	; 0x1c2 <lcd_write_word+0xe>
	{
		lcd_write_character(word[i]);
		i++;
	}
}
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	08 95       	ret

000001d2 <lcd_clear>:
	_delay_ms(2);
	
}
void lcd_clear(void)
{
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
     1d8:	08 95       	ret

000001da <lcd_goto_xy>:
	
}
void lcd_goto_xy (uint8_t line,uint8_t pos)				//line = 0 or 1
{
	lcd_send_command((0x80|(line<<6))+pos);
     1da:	20 e4       	ldi	r18, 0x40	; 64
     1dc:	82 9f       	mul	r24, r18
     1de:	c0 01       	movw	r24, r0
     1e0:	11 24       	eor	r1, r1
     1e2:	80 68       	ori	r24, 0x80	; 128
     1e4:	86 0f       	add	r24, r22
     1e6:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ea:	87 ec       	ldi	r24, 0xC7	; 199
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_goto_xy+0x14>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_goto_xy+0x1a>
     1f4:	00 00       	nop
     1f6:	08 95       	ret

000001f8 <readInput1>:
/*74HC165 read function*/
volatile uint8_t readInput1(void){
	uint8_t reader = 0;

	/* Set PINC2 (PC2) as input */
	DDRC &= ~(1 << PC2);
     1f8:	3a 98       	cbi	0x07, 2	; 7

	/* Raise LD pin */
	PORTC |= (1 << PC1);
     1fa:	41 9a       	sbi	0x08, 1	; 8
     1fc:	28 e0       	ldi	r18, 0x08	; 8
     1fe:	30 e0       	ldi	r19, 0x00	; 0
void stop_sound(void);


/*74HC165 read function*/
volatile uint8_t readInput1(void){
	uint8_t reader = 0;
     200:	80 e0       	ldi	r24, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     202:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PINC & (1 << PC2)) ? 1 : 0);
     204:	96 b1       	in	r25, 0x06	; 6
     206:	92 fb       	bst	r25, 2
     208:	99 27       	eor	r25, r25
     20a:	90 f9       	bld	r25, 0
     20c:	88 0f       	add	r24, r24
     20e:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
     210:	40 98       	cbi	0x08, 0	; 8
     212:	94 2f       	mov	r25, r20
     214:	9a 95       	dec	r25
     216:	f1 f7       	brne	.-4      	; 0x214 <readInput1+0x1c>
		_delay_us(1);
		PORTC |= (1 << PC0);
     218:	40 9a       	sbi	0x08, 0	; 8
     21a:	21 50       	subi	r18, 0x01	; 1
     21c:	31 09       	sbc	r19, r1
	DDRC &= ~(1 << PC2);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
     21e:	91 f7       	brne	.-28     	; 0x204 <readInput1+0xc>
		_delay_us(1);
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
     220:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
     222:	08 95       	ret

00000224 <readInput2>:

volatile uint8_t readInput2(void){
	uint8_t reader = 0;

	/* Set PIND3 (PD3) as input */
	DDRD &= ~(1 << PD3);
     224:	53 98       	cbi	0x0a, 3	; 10

	/* Raise LD pin */
	PORTC |= (1 << PC1);
     226:	41 9a       	sbi	0x08, 1	; 8
     228:	28 e0       	ldi	r18, 0x08	; 8
     22a:	30 e0       	ldi	r19, 0x00	; 0

	return reader;
}

volatile uint8_t readInput2(void){
	uint8_t reader = 0;
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PIND & (1 << PD3)) ? 1 : 0);
     230:	99 b1       	in	r25, 0x09	; 9
     232:	93 fb       	bst	r25, 3
     234:	99 27       	eor	r25, r25
     236:	90 f9       	bld	r25, 0
     238:	88 0f       	add	r24, r24
     23a:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
     23c:	40 98       	cbi	0x08, 0	; 8
     23e:	94 2f       	mov	r25, r20
     240:	9a 95       	dec	r25
     242:	f1 f7       	brne	.-4      	; 0x240 <readInput2+0x1c>
		_delay_us(1);
		PORTC |= (1 << PC0);
     244:	40 9a       	sbi	0x08, 0	; 8
     246:	21 50       	subi	r18, 0x01	; 1
     248:	31 09       	sbc	r19, r1
	DDRD &= ~(1 << PD3);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
     24a:	91 f7       	brne	.-28     	; 0x230 <readInput2+0xc>
		_delay_us(1);
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
     24c:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
     24e:	08 95       	ret

00000250 <readInput3>:

volatile uint8_t readInput3(void){
	uint8_t reader = 0;

	/* Set PIND2 (PD2) as input */
	DDRD &= ~(1 << PD2);
     250:	52 98       	cbi	0x0a, 2	; 10

	/* Raise LD pin */
	PORTC |= (1 << PC1);
     252:	41 9a       	sbi	0x08, 1	; 8
     254:	28 e0       	ldi	r18, 0x08	; 8
     256:	30 e0       	ldi	r19, 0x00	; 0

	return reader;
}

volatile uint8_t readInput3(void){
	uint8_t reader = 0;
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PIND & (1 << PD2)) ? 1 : 0);
     25c:	99 b1       	in	r25, 0x09	; 9
     25e:	92 fb       	bst	r25, 2
     260:	99 27       	eor	r25, r25
     262:	90 f9       	bld	r25, 0
     264:	88 0f       	add	r24, r24
     266:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
     268:	40 98       	cbi	0x08, 0	; 8
     26a:	94 2f       	mov	r25, r20
     26c:	9a 95       	dec	r25
     26e:	f1 f7       	brne	.-4      	; 0x26c <readInput3+0x1c>
		_delay_us(1); // You can use delay functions for a more accurate timing
		PORTC |= (1 << PC0);
     270:	40 9a       	sbi	0x08, 0	; 8
     272:	21 50       	subi	r18, 0x01	; 1
     274:	31 09       	sbc	r19, r1
	DDRD &= ~(1 << PD2);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
     276:	91 f7       	brne	.-28     	; 0x25c <readInput3+0xc>
		_delay_us(1); // You can use delay functions for a more accurate timing
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
     278:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
     27a:	08 95       	ret

0000027c <Play_Sound_new>:

#define SAMPLE_RATE     30000  // Adjust as needed


void Play_Sound_new(float frequency)
{
     27c:	2f 92       	push	r2
     27e:	3f 92       	push	r3
     280:	4f 92       	push	r4
     282:	5f 92       	push	r5
     284:	6f 92       	push	r6
     286:	7f 92       	push	r7
     288:	8f 92       	push	r8
     28a:	9f 92       	push	r9
     28c:	af 92       	push	r10
     28e:	bf 92       	push	r11
     290:	cf 92       	push	r12
     292:	df 92       	push	r13
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	aa 97       	sbiw	r28, 0x2a	; 42
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
     2b0:	2b 01       	movw	r4, r22
     2b2:	3c 01       	movw	r6, r24
	long int i,cycles;
	float wavelength = 1.25;

	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);
     2b4:	23 9a       	sbi	0x04, 3	; 4

	for (i = 0; i < 10; i++)
	{

		for(int j=0;j<20;j++){
			_delay_ms(frequency / 10.5);
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	48 e2       	ldi	r20, 0x28	; 40
     2bc:	51 e4       	ldi	r21, 0x41	; 65
     2be:	0e 94 9b 08 	call	0x1136	; 0x1136 <__divsf3>
     2c2:	6b 8f       	std	Y+27, r22	; 0x1b
     2c4:	7c 8f       	std	Y+28, r23	; 0x1c
     2c6:	8d 8f       	std	Y+29, r24	; 0x1d
     2c8:	9e 8f       	std	Y+30, r25	; 0x1e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2ca:	20 e0       	ldi	r18, 0x00	; 0
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	4a e7       	ldi	r20, 0x7A	; 122
     2d0:	55 e4       	ldi	r21, 0x45	; 69
     2d2:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     2d6:	69 83       	std	Y+1, r22	; 0x01
     2d8:	7a 83       	std	Y+2, r23	; 0x02
     2da:	8b 83       	std	Y+3, r24	; 0x03
     2dc:	9c 83       	std	Y+4, r25	; 0x04
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2de:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
     2e2:	6b 01       	movw	r12, r22
     2e4:	7c 01       	movw	r14, r24
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	40 e8       	ldi	r20, 0x80	; 128
     2ec:	5f e3       	ldi	r21, 0x3F	; 63
     2ee:	69 81       	ldd	r22, Y+1	; 0x01
     2f0:	7a 81       	ldd	r23, Y+2	; 0x02
     2f2:	8b 81       	ldd	r24, Y+3	; 0x03
     2f4:	9c 81       	ldd	r25, Y+4	; 0x04
     2f6:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     2fa:	88 23       	and	r24, r24
     2fc:	1c f4       	brge	.+6      	; 0x304 <Play_Sound_new+0x88>
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	02 c0       	rjmp	.+4      	; 0x308 <Play_Sound_new+0x8c>
     304:	9c 2d       	mov	r25, r12
     306:	8d 2d       	mov	r24, r13
     308:	9f a3       	std	Y+39, r25	; 0x27
     30a:	88 a7       	std	Y+40, r24	; 0x28
     30c:	1e a2       	std	Y+38, r1	; 0x26
     30e:	1d a2       	std	Y+37, r1	; 0x25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     310:	00 e9       	ldi	r16, 0x90	; 144
     312:	11 e0       	ldi	r17, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     314:	22 24       	eor	r2, r2
     316:	23 94       	inc	r2
     318:	31 2c       	mov	r3, r1
     31a:	2d 86       	std	Y+13, r2	; 0x0d
     31c:	3e 86       	std	Y+14, r3	; 0x0e
     31e:	6a c2       	rjmp	.+1236   	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	40 e8       	ldi	r20, 0x80	; 128
     326:	5f e3       	ldi	r21, 0x3F	; 63
     328:	69 81       	ldd	r22, Y+1	; 0x01
     32a:	7a 81       	ldd	r23, Y+2	; 0x02
     32c:	8b 81       	ldd	r24, Y+3	; 0x03
     32e:	9c 81       	ldd	r25, Y+4	; 0x04
     330:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     334:	88 23       	and	r24, r24
     336:	14 f1       	brlt	.+68     	; 0x37c <Play_Sound_new+0x100>
		__ticks = 1;
	else if (__tmp > 65535)
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	3f ef       	ldi	r19, 0xFF	; 255
     33c:	4f e7       	ldi	r20, 0x7F	; 127
     33e:	57 e4       	ldi	r21, 0x47	; 71
     340:	69 81       	ldd	r22, Y+1	; 0x01
     342:	7a 81       	ldd	r23, Y+2	; 0x02
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	9c 81       	ldd	r25, Y+4	; 0x04
     348:	0e 94 b1 09 	call	0x1362	; 0x1362 <__gesf2>
     34c:	18 16       	cp	r1, r24
     34e:	b4 f4       	brge	.+44     	; 0x37c <Play_Sound_new+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	40 e2       	ldi	r20, 0x20	; 32
     356:	51 e4       	ldi	r21, 0x41	; 65
     358:	6b 8d       	ldd	r22, Y+27	; 0x1b
     35a:	7c 8d       	ldd	r23, Y+28	; 0x1c
     35c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     35e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     360:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     364:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
		while(__ticks)
     368:	61 15       	cp	r22, r1
     36a:	71 05       	cpc	r23, r1
     36c:	51 f0       	breq	.+20     	; 0x382 <Play_Sound_new+0x106>
     36e:	c8 01       	movw	r24, r16
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	f1 f7       	brne	.-4      	; 0x370 <Play_Sound_new+0xf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     374:	61 50       	subi	r22, 0x01	; 1
     376:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     378:	d1 f7       	brne	.-12     	; 0x36e <Play_Sound_new+0xf2>
     37a:	03 c0       	rjmp	.+6      	; 0x382 <Play_Sound_new+0x106>
     37c:	c1 01       	movw	r24, r2
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <Play_Sound_new+0x102>
			BUZZER_PORT |= (1 << BUZZER_PIN);
     382:	2b 9a       	sbi	0x05, 3	; 5
			_delay_ms(22 * frequency / 10.5); // Ensuring the same duty cycle for both on and off times
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	40 eb       	ldi	r20, 0xB0	; 176
     38a:	51 e4       	ldi	r21, 0x41	; 65
     38c:	c3 01       	movw	r24, r6
     38e:	b2 01       	movw	r22, r4
     390:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	48 e2       	ldi	r20, 0x28	; 40
     39a:	51 e4       	ldi	r21, 0x41	; 65
     39c:	0e 94 9b 08 	call	0x1136	; 0x1136 <__divsf3>
     3a0:	6b 01       	movw	r12, r22
     3a2:	7c 01       	movw	r14, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	4a e7       	ldi	r20, 0x7A	; 122
     3aa:	55 e4       	ldi	r21, 0x45	; 69
     3ac:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     3b0:	4b 01       	movw	r8, r22
     3b2:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	40 e8       	ldi	r20, 0x80	; 128
     3ba:	5f e3       	ldi	r21, 0x3F	; 63
     3bc:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     3c0:	88 23       	and	r24, r24
     3c2:	1c f1       	brlt	.+70     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		__ticks = 1;
	else if (__tmp > 65535)
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	3f ef       	ldi	r19, 0xFF	; 255
     3c8:	4f e7       	ldi	r20, 0x7F	; 127
     3ca:	57 e4       	ldi	r21, 0x47	; 71
     3cc:	c5 01       	movw	r24, r10
     3ce:	b4 01       	movw	r22, r8
     3d0:	0e 94 b1 09 	call	0x1362	; 0x1362 <__gesf2>
     3d4:	18 16       	cp	r1, r24
     3d6:	a4 f4       	brge	.+40     	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	40 e2       	ldi	r20, 0x20	; 32
     3de:	51 e4       	ldi	r21, 0x41	; 65
     3e0:	c7 01       	movw	r24, r14
     3e2:	b6 01       	movw	r22, r12
     3e4:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     3e8:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
		while(__ticks)
     3ec:	61 15       	cp	r22, r1
     3ee:	71 05       	cpc	r23, r1
     3f0:	89 f0       	breq	.+34     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3f2:	c8 01       	movw	r24, r16
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <Play_Sound_new+0x178>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3f8:	61 50       	subi	r22, 0x01	; 1
     3fa:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3fc:	d1 f7       	brne	.-12     	; 0x3f2 <Play_Sound_new+0x176>
     3fe:	0a c0       	rjmp	.+20     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     400:	c5 01       	movw	r24, r10
     402:	b4 01       	movw	r22, r8
     404:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
     408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     40a:	6d 85       	ldd	r22, Y+13	; 0x0d
     40c:	7e 85       	ldd	r23, Y+14	; 0x0e
     40e:	cb 01       	movw	r24, r22
     410:	01 97       	sbiw	r24, 0x01	; 1
     412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     414:	2b 98       	cbi	0x05, 3	; 5
     416:	8d 81       	ldd	r24, Y+5	; 0x05
     418:	9e 81       	ldd	r25, Y+6	; 0x06
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	9e 83       	std	Y+6, r25	; 0x06
     41e:	8d 83       	std	Y+5, r24	; 0x05


	for (i = 0; i < 10; i++)
	{

		for(int j=0;j<20;j++){
     420:	89 2b       	or	r24, r25
     422:	09 f0       	breq	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     424:	7d cf       	rjmp	.-262    	; 0x320 <Play_Sound_new+0xa4>
			BUZZER_PORT |= (1 << BUZZER_PIN);
			_delay_ms(22 * frequency / 10.5); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		for(int j=0;j<10;j++){
			_delay_ms(frequency / 10.55);
     426:	2d ec       	ldi	r18, 0xCD	; 205
     428:	3c ec       	ldi	r19, 0xCC	; 204
     42a:	48 e2       	ldi	r20, 0x28	; 40
     42c:	51 e4       	ldi	r21, 0x41	; 65
     42e:	c3 01       	movw	r24, r6
     430:	b2 01       	movw	r22, r4
     432:	0e 94 9b 08 	call	0x1136	; 0x1136 <__divsf3>
     436:	6f 8b       	std	Y+23, r22	; 0x17
     438:	78 8f       	std	Y+24, r23	; 0x18
     43a:	89 8f       	std	Y+25, r24	; 0x19
     43c:	9a 8f       	std	Y+26, r25	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	4a e7       	ldi	r20, 0x7A	; 122
     444:	55 e4       	ldi	r21, 0x45	; 69
     446:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     44a:	6b 01       	movw	r12, r22
     44c:	7c 01       	movw	r14, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     44e:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
     452:	4b 01       	movw	r8, r22
     454:	5c 01       	movw	r10, r24
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	40 e8       	ldi	r20, 0x80	; 128
     45c:	5f e3       	ldi	r21, 0x3F	; 63
     45e:	c7 01       	movw	r24, r14
     460:	b6 01       	movw	r22, r12
     462:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     466:	88 23       	and	r24, r24
     468:	1c f4       	brge	.+6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	02 c0       	rjmp	.+4      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     470:	98 2d       	mov	r25, r8
     472:	89 2d       	mov	r24, r9
     474:	29 2e       	mov	r2, r25
     476:	38 2e       	mov	r3, r24
     478:	8a e0       	ldi	r24, 0x0A	; 10
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	9a 87       	std	Y+10, r25	; 0x0a
     47e:	89 87       	std	Y+9, r24	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	40 e8       	ldi	r20, 0x80	; 128
     486:	5f e3       	ldi	r21, 0x3F	; 63
     488:	c7 01       	movw	r24, r14
     48a:	b6 01       	movw	r22, r12
     48c:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     490:	88 23       	and	r24, r24
     492:	04 f1       	brlt	.+64     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
		__ticks = 1;
	else if (__tmp > 65535)
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	3f ef       	ldi	r19, 0xFF	; 255
     498:	4f e7       	ldi	r20, 0x7F	; 127
     49a:	57 e4       	ldi	r21, 0x47	; 71
     49c:	c7 01       	movw	r24, r14
     49e:	b6 01       	movw	r22, r12
     4a0:	0e 94 b1 09 	call	0x1362	; 0x1362 <__gesf2>
     4a4:	18 16       	cp	r1, r24
     4a6:	b4 f4       	brge	.+44     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	40 e2       	ldi	r20, 0x20	; 32
     4ae:	51 e4       	ldi	r21, 0x41	; 65
     4b0:	6f 89       	ldd	r22, Y+23	; 0x17
     4b2:	78 8d       	ldd	r23, Y+24	; 0x18
     4b4:	89 8d       	ldd	r24, Y+25	; 0x19
     4b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     4b8:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     4bc:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
		while(__ticks)
     4c0:	61 15       	cp	r22, r1
     4c2:	71 05       	cpc	r23, r1
     4c4:	51 f0       	breq	.+20     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4c6:	c8 01       	movw	r24, r16
     4c8:	01 97       	sbiw	r24, 0x01	; 1
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4cc:	61 50       	subi	r22, 0x01	; 1
     4ce:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d0:	d1 f7       	brne	.-12     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d4:	c1 01       	movw	r24, r2
     4d6:	01 97       	sbiw	r24, 0x01	; 1
     4d8:	f1 f7       	brne	.-4      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
			BUZZER_PORT |= (1 << BUZZER_PIN);
     4da:	2b 9a       	sbi	0x05, 3	; 5
			_delay_ms(22.1 * frequency / 10.55); // Ensuring the same duty cycle for both on and off times
     4dc:	2d ec       	ldi	r18, 0xCD	; 205
     4de:	3c ec       	ldi	r19, 0xCC	; 204
     4e0:	40 eb       	ldi	r20, 0xB0	; 176
     4e2:	51 e4       	ldi	r21, 0x41	; 65
     4e4:	c3 01       	movw	r24, r6
     4e6:	b2 01       	movw	r22, r4
     4e8:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     4ec:	2d ec       	ldi	r18, 0xCD	; 205
     4ee:	3c ec       	ldi	r19, 0xCC	; 204
     4f0:	48 e2       	ldi	r20, 0x28	; 40
     4f2:	51 e4       	ldi	r21, 0x41	; 65
     4f4:	0e 94 9b 08 	call	0x1136	; 0x1136 <__divsf3>
     4f8:	6d 83       	std	Y+5, r22	; 0x05
     4fa:	7e 83       	std	Y+6, r23	; 0x06
     4fc:	8f 83       	std	Y+7, r24	; 0x07
     4fe:	98 87       	std	Y+8, r25	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	4a e7       	ldi	r20, 0x7A	; 122
     506:	55 e4       	ldi	r21, 0x45	; 69
     508:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     50c:	4b 01       	movw	r8, r22
     50e:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	40 e8       	ldi	r20, 0x80	; 128
     516:	5f e3       	ldi	r21, 0x3F	; 63
     518:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     51c:	88 23       	and	r24, r24
     51e:	2c f1       	brlt	.+74     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
		__ticks = 1;
	else if (__tmp > 65535)
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	3f ef       	ldi	r19, 0xFF	; 255
     524:	4f e7       	ldi	r20, 0x7F	; 127
     526:	57 e4       	ldi	r21, 0x47	; 71
     528:	c5 01       	movw	r24, r10
     52a:	b4 01       	movw	r22, r8
     52c:	0e 94 b1 09 	call	0x1362	; 0x1362 <__gesf2>
     530:	18 16       	cp	r1, r24
     532:	b4 f4       	brge	.+44     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e2       	ldi	r20, 0x20	; 32
     53a:	51 e4       	ldi	r21, 0x41	; 65
     53c:	6d 81       	ldd	r22, Y+5	; 0x05
     53e:	7e 81       	ldd	r23, Y+6	; 0x06
     540:	8f 81       	ldd	r24, Y+7	; 0x07
     542:	98 85       	ldd	r25, Y+8	; 0x08
     544:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     548:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
		while(__ticks)
     54c:	61 15       	cp	r22, r1
     54e:	71 05       	cpc	r23, r1
     550:	89 f0       	breq	.+34     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     552:	c8 01       	movw	r24, r16
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     558:	61 50       	subi	r22, 0x01	; 1
     55a:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     55c:	d1 f7       	brne	.-12     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     55e:	0a c0       	rjmp	.+20     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     560:	c5 01       	movw	r24, r10
     562:	b4 01       	movw	r22, r8
     564:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
     568:	02 c0       	rjmp	.+4      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     56a:	6d 85       	ldd	r22, Y+13	; 0x0d
     56c:	7e 85       	ldd	r23, Y+14	; 0x0e
     56e:	cb 01       	movw	r24, r22
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	f1 f7       	brne	.-4      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     574:	2b 98       	cbi	0x05, 3	; 5
     576:	89 85       	ldd	r24, Y+9	; 0x09
     578:	9a 85       	ldd	r25, Y+10	; 0x0a
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	9a 87       	std	Y+10, r25	; 0x0a
     57e:	89 87       	std	Y+9, r24	; 0x09
			_delay_ms(frequency / 10.5);
			BUZZER_PORT |= (1 << BUZZER_PIN);
			_delay_ms(22 * frequency / 10.5); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		for(int j=0;j<10;j++){
     580:	89 2b       	or	r24, r25
     582:	09 f0       	breq	.+2      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     584:	7d cf       	rjmp	.-262    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
			_delay_ms(22.1 * frequency / 10.55); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		
		for(int j=0;j<5;j++){
			_delay_ms(frequency / 10.6);
     586:	2a e9       	ldi	r18, 0x9A	; 154
     588:	39 e9       	ldi	r19, 0x99	; 153
     58a:	49 e2       	ldi	r20, 0x29	; 41
     58c:	51 e4       	ldi	r21, 0x41	; 65
     58e:	c3 01       	movw	r24, r6
     590:	b2 01       	movw	r22, r4
     592:	0e 94 9b 08 	call	0x1136	; 0x1136 <__divsf3>
     596:	69 a3       	std	Y+33, r22	; 0x21
     598:	7a a3       	std	Y+34, r23	; 0x22
     59a:	8b a3       	std	Y+35, r24	; 0x23
     59c:	9c a3       	std	Y+36, r25	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	4a e7       	ldi	r20, 0x7A	; 122
     5a4:	55 e4       	ldi	r21, 0x45	; 69
     5a6:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     5aa:	6b 8b       	std	Y+19, r22	; 0x13
     5ac:	7c 8b       	std	Y+20, r23	; 0x14
     5ae:	8d 8b       	std	Y+21, r24	; 0x15
     5b0:	9e 8b       	std	Y+22, r25	; 0x16
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5b2:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
     5b6:	69 87       	std	Y+9, r22	; 0x09
     5b8:	7a 87       	std	Y+10, r23	; 0x0a
     5ba:	8b 87       	std	Y+11, r24	; 0x0b
     5bc:	9c 87       	std	Y+12, r25	; 0x0c
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	40 e8       	ldi	r20, 0x80	; 128
     5c4:	5f e3       	ldi	r21, 0x3F	; 63
     5c6:	6b 89       	ldd	r22, Y+19	; 0x13
     5c8:	7c 89       	ldd	r23, Y+20	; 0x14
     5ca:	8d 89       	ldd	r24, Y+21	; 0x15
     5cc:	9e 89       	ldd	r25, Y+22	; 0x16
     5ce:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     5d2:	88 23       	and	r24, r24
     5d4:	1c f4       	brge	.+6      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5dc:	99 85       	ldd	r25, Y+9	; 0x09
     5de:	8a 85       	ldd	r24, Y+10	; 0x0a
     5e0:	9f 8f       	std	Y+31, r25	; 0x1f
     5e2:	88 a3       	std	Y+32, r24	; 0x20
     5e4:	85 e0       	ldi	r24, 0x05	; 5
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	9a a7       	std	Y+42, r25	; 0x2a
     5ea:	89 a7       	std	Y+41, r24	; 0x29
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 e8       	ldi	r20, 0x80	; 128
     5f2:	5f e3       	ldi	r21, 0x3F	; 63
     5f4:	6b 89       	ldd	r22, Y+19	; 0x13
     5f6:	7c 89       	ldd	r23, Y+20	; 0x14
     5f8:	8d 89       	ldd	r24, Y+21	; 0x15
     5fa:	9e 89       	ldd	r25, Y+22	; 0x16
     5fc:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     600:	88 23       	and	r24, r24
     602:	14 f1       	brlt	.+68     	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
		__ticks = 1;
	else if (__tmp > 65535)
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	3f ef       	ldi	r19, 0xFF	; 255
     608:	4f e7       	ldi	r20, 0x7F	; 127
     60a:	57 e4       	ldi	r21, 0x47	; 71
     60c:	6b 89       	ldd	r22, Y+19	; 0x13
     60e:	7c 89       	ldd	r23, Y+20	; 0x14
     610:	8d 89       	ldd	r24, Y+21	; 0x15
     612:	9e 89       	ldd	r25, Y+22	; 0x16
     614:	0e 94 b1 09 	call	0x1362	; 0x1362 <__gesf2>
     618:	18 16       	cp	r1, r24
     61a:	b4 f4       	brge	.+44     	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	40 e2       	ldi	r20, 0x20	; 32
     622:	51 e4       	ldi	r21, 0x41	; 65
     624:	69 a1       	ldd	r22, Y+33	; 0x21
     626:	7a a1       	ldd	r23, Y+34	; 0x22
     628:	8b a1       	ldd	r24, Y+35	; 0x23
     62a:	9c a1       	ldd	r25, Y+36	; 0x24
     62c:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     630:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
		while(__ticks)
     634:	61 15       	cp	r22, r1
     636:	71 05       	cpc	r23, r1
     638:	59 f0       	breq	.+22     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     63a:	c8 01       	movw	r24, r16
     63c:	01 97       	sbiw	r24, 0x01	; 1
     63e:	f1 f7       	brne	.-4      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     640:	61 50       	subi	r22, 0x01	; 1
     642:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     644:	d1 f7       	brne	.-12     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     646:	04 c0       	rjmp	.+8      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     648:	8f 8d       	ldd	r24, Y+31	; 0x1f
     64a:	98 a1       	ldd	r25, Y+32	; 0x20
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
			BUZZER_PORT |= (1 << BUZZER_PIN);
     650:	2b 9a       	sbi	0x05, 3	; 5
			_delay_ms(22.2 * frequency / 10.6); // Ensuring the same duty cycle for both on and off times
     652:	2a e9       	ldi	r18, 0x9A	; 154
     654:	39 e9       	ldi	r19, 0x99	; 153
     656:	41 eb       	ldi	r20, 0xB1	; 177
     658:	51 e4       	ldi	r21, 0x41	; 65
     65a:	c3 01       	movw	r24, r6
     65c:	b2 01       	movw	r22, r4
     65e:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     662:	2a e9       	ldi	r18, 0x9A	; 154
     664:	39 e9       	ldi	r19, 0x99	; 153
     666:	49 e2       	ldi	r20, 0x29	; 41
     668:	51 e4       	ldi	r21, 0x41	; 65
     66a:	0e 94 9b 08 	call	0x1136	; 0x1136 <__divsf3>
     66e:	6f 87       	std	Y+15, r22	; 0x0f
     670:	78 8b       	std	Y+16, r23	; 0x10
     672:	89 8b       	std	Y+17, r24	; 0x11
     674:	9a 8b       	std	Y+18, r25	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	4a e7       	ldi	r20, 0x7A	; 122
     67c:	55 e4       	ldi	r21, 0x45	; 69
     67e:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     682:	69 87       	std	Y+9, r22	; 0x09
     684:	7a 87       	std	Y+10, r23	; 0x0a
     686:	8b 87       	std	Y+11, r24	; 0x0b
     688:	9c 87       	std	Y+12, r25	; 0x0c
	if (__tmp < 1.0)
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e8       	ldi	r20, 0x80	; 128
     690:	5f e3       	ldi	r21, 0x3F	; 63
     692:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     696:	88 23       	and	r24, r24
     698:	4c f1       	brlt	.+82     	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
		__ticks = 1;
	else if (__tmp > 65535)
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	3f ef       	ldi	r19, 0xFF	; 255
     69e:	4f e7       	ldi	r20, 0x7F	; 127
     6a0:	57 e4       	ldi	r21, 0x47	; 71
     6a2:	69 85       	ldd	r22, Y+9	; 0x09
     6a4:	7a 85       	ldd	r23, Y+10	; 0x0a
     6a6:	8b 85       	ldd	r24, Y+11	; 0x0b
     6a8:	9c 85       	ldd	r25, Y+12	; 0x0c
     6aa:	0e 94 b1 09 	call	0x1362	; 0x1362 <__gesf2>
     6ae:	18 16       	cp	r1, r24
     6b0:	b4 f4       	brge	.+44     	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	40 e2       	ldi	r20, 0x20	; 32
     6b8:	51 e4       	ldi	r21, 0x41	; 65
     6ba:	6f 85       	ldd	r22, Y+15	; 0x0f
     6bc:	78 89       	ldd	r23, Y+16	; 0x10
     6be:	89 89       	ldd	r24, Y+17	; 0x11
     6c0:	9a 89       	ldd	r25, Y+18	; 0x12
     6c2:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     6c6:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
		while(__ticks)
     6ca:	61 15       	cp	r22, r1
     6cc:	71 05       	cpc	r23, r1
     6ce:	99 f0       	breq	.+38     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
     6d0:	c8 01       	movw	r24, r16
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d6:	61 50       	subi	r22, 0x01	; 1
     6d8:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6da:	d1 f7       	brne	.-12     	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
     6dc:	0c c0       	rjmp	.+24     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6de:	69 85       	ldd	r22, Y+9	; 0x09
     6e0:	7a 85       	ldd	r23, Y+10	; 0x0a
     6e2:	8b 85       	ldd	r24, Y+11	; 0x0b
     6e4:	9c 85       	ldd	r25, Y+12	; 0x0c
     6e6:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
     6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     6ec:	6d 85       	ldd	r22, Y+13	; 0x0d
     6ee:	7e 85       	ldd	r23, Y+14	; 0x0e
     6f0:	cb 01       	movw	r24, r22
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     6f6:	2b 98       	cbi	0x05, 3	; 5
     6f8:	89 a5       	ldd	r24, Y+41	; 0x29
     6fa:	9a a5       	ldd	r25, Y+42	; 0x2a
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	9a a7       	std	Y+42, r25	; 0x2a
     700:	89 a7       	std	Y+41, r24	; 0x29
			BUZZER_PORT |= (1 << BUZZER_PIN);
			_delay_ms(22.1 * frequency / 10.55); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		
		for(int j=0;j<5;j++){
     702:	89 2b       	or	r24, r25
     704:	09 f0       	breq	.+2      	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
     706:	72 cf       	rjmp	.-284    	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     708:	8a e0       	ldi	r24, 0x0A	; 10
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	9a 87       	std	Y+10, r25	; 0x0a
     70e:	89 87       	std	Y+9, r24	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	40 e8       	ldi	r20, 0x80	; 128
     716:	5f e3       	ldi	r21, 0x3F	; 63
     718:	c7 01       	movw	r24, r14
     71a:	b6 01       	movw	r22, r12
     71c:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     720:	88 23       	and	r24, r24
     722:	04 f1       	brlt	.+64     	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
		__ticks = 1;
	else if (__tmp > 65535)
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	3f ef       	ldi	r19, 0xFF	; 255
     728:	4f e7       	ldi	r20, 0x7F	; 127
     72a:	57 e4       	ldi	r21, 0x47	; 71
     72c:	c7 01       	movw	r24, r14
     72e:	b6 01       	movw	r22, r12
     730:	0e 94 b1 09 	call	0x1362	; 0x1362 <__gesf2>
     734:	18 16       	cp	r1, r24
     736:	b4 f4       	brge	.+44     	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e2       	ldi	r20, 0x20	; 32
     73e:	51 e4       	ldi	r21, 0x41	; 65
     740:	6f 89       	ldd	r22, Y+23	; 0x17
     742:	78 8d       	ldd	r23, Y+24	; 0x18
     744:	89 8d       	ldd	r24, Y+25	; 0x19
     746:	9a 8d       	ldd	r25, Y+26	; 0x1a
     748:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     74c:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
		while(__ticks)
     750:	61 15       	cp	r22, r1
     752:	71 05       	cpc	r23, r1
     754:	51 f0       	breq	.+20     	; 0x76a <__LOCK_REGION_LENGTH__+0x36a>
     756:	c8 01       	movw	r24, r16
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	f1 f7       	brne	.-4      	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     75c:	61 50       	subi	r22, 0x01	; 1
     75e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     760:	d1 f7       	brne	.-12     	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
     762:	03 c0       	rjmp	.+6      	; 0x76a <__LOCK_REGION_LENGTH__+0x36a>
     764:	c1 01       	movw	r24, r2
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
			_delay_ms(22.2 * frequency / 10.6); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		for(int j=0;j<10;j++){
			_delay_ms(frequency / 10.55);
			BUZZER_PORT |= (1 << BUZZER_PIN);
     76a:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	40 e8       	ldi	r20, 0x80	; 128
     772:	5f e3       	ldi	r21, 0x3F	; 63
     774:	c5 01       	movw	r24, r10
     776:	b4 01       	movw	r22, r8
     778:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     77c:	88 23       	and	r24, r24
     77e:	2c f1       	brlt	.+74     	; 0x7ca <__LOCK_REGION_LENGTH__+0x3ca>
		__ticks = 1;
	else if (__tmp > 65535)
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	3f ef       	ldi	r19, 0xFF	; 255
     784:	4f e7       	ldi	r20, 0x7F	; 127
     786:	57 e4       	ldi	r21, 0x47	; 71
     788:	c5 01       	movw	r24, r10
     78a:	b4 01       	movw	r22, r8
     78c:	0e 94 b1 09 	call	0x1362	; 0x1362 <__gesf2>
     790:	18 16       	cp	r1, r24
     792:	b4 f4       	brge	.+44     	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	40 e2       	ldi	r20, 0x20	; 32
     79a:	51 e4       	ldi	r21, 0x41	; 65
     79c:	6d 81       	ldd	r22, Y+5	; 0x05
     79e:	7e 81       	ldd	r23, Y+6	; 0x06
     7a0:	8f 81       	ldd	r24, Y+7	; 0x07
     7a2:	98 85       	ldd	r25, Y+8	; 0x08
     7a4:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     7a8:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
		while(__ticks)
     7ac:	61 15       	cp	r22, r1
     7ae:	71 05       	cpc	r23, r1
     7b0:	89 f0       	breq	.+34     	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
     7b2:	c8 01       	movw	r24, r16
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <__LOCK_REGION_LENGTH__+0x3b4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7b8:	61 50       	subi	r22, 0x01	; 1
     7ba:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7bc:	d1 f7       	brne	.-12     	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
     7be:	0a c0       	rjmp	.+20     	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7c0:	c5 01       	movw	r24, r10
     7c2:	b4 01       	movw	r22, r8
     7c4:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <__LOCK_REGION_LENGTH__+0x3ce>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     7ca:	6d 85       	ldd	r22, Y+13	; 0x0d
     7cc:	7e 85       	ldd	r23, Y+14	; 0x0e
     7ce:	cb 01       	movw	r24, r22
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
			_delay_ms(22.1 * frequency / 10.55); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     7d4:	2b 98       	cbi	0x05, 3	; 5
     7d6:	89 85       	ldd	r24, Y+9	; 0x09
     7d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	9a 87       	std	Y+10, r25	; 0x0a
     7de:	89 87       	std	Y+9, r24	; 0x09
			_delay_ms(frequency / 10.6);
			BUZZER_PORT |= (1 << BUZZER_PIN);
			_delay_ms(22.2 * frequency / 10.6); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		for(int j=0;j<10;j++){
     7e0:	89 2b       	or	r24, r25
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     7e4:	95 cf       	rjmp	.-214    	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
     7e6:	8d a1       	ldd	r24, Y+37	; 0x25
     7e8:	9e a1       	ldd	r25, Y+38	; 0x26
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	9e a3       	std	Y+38, r25	; 0x26
     7ee:	8d a3       	std	Y+37, r24	; 0x25
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);


	for (i = 0; i < 10; i++)
     7f0:	0a 97       	sbiw	r24, 0x0a	; 10
     7f2:	39 f0       	breq	.+14     	; 0x802 <__LOCK_REGION_LENGTH__+0x402>

#define SAMPLE_RATE     30000  // Adjust as needed


void Play_Sound_new(float frequency)
{
     7f4:	84 e1       	ldi	r24, 0x14	; 20
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	2f a0       	ldd	r2, Y+39	; 0x27
     7fa:	38 a4       	ldd	r3, Y+40	; 0x28
     7fc:	9e 83       	std	Y+6, r25	; 0x06
     7fe:	8d 83       	std	Y+5, r24	; 0x05
     800:	8f cd       	rjmp	.-1250   	; 0x320 <Play_Sound_new+0xa4>
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}

	}

}
     802:	aa 96       	adiw	r28, 0x2a	; 42
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	de bf       	out	0x3e, r29	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	cd bf       	out	0x3d, r28	; 61
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	ff 90       	pop	r15
     818:	ef 90       	pop	r14
     81a:	df 90       	pop	r13
     81c:	cf 90       	pop	r12
     81e:	bf 90       	pop	r11
     820:	af 90       	pop	r10
     822:	9f 90       	pop	r9
     824:	8f 90       	pop	r8
     826:	7f 90       	pop	r7
     828:	6f 90       	pop	r6
     82a:	5f 90       	pop	r5
     82c:	4f 90       	pop	r4
     82e:	3f 90       	pop	r3
     830:	2f 90       	pop	r2
     832:	08 95       	ret

00000834 <Play_Sound>:

void Play_Sound(float frequency)
{
     834:	2f 92       	push	r2
     836:	3f 92       	push	r3
     838:	4f 92       	push	r4
     83a:	5f 92       	push	r5
     83c:	6f 92       	push	r6
     83e:	7f 92       	push	r7
     840:	8f 92       	push	r8
     842:	9f 92       	push	r9
     844:	af 92       	push	r10
     846:	bf 92       	push	r11
     848:	cf 92       	push	r12
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	2b 01       	movw	r4, r22
     85a:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	4a e7       	ldi	r20, 0x7A	; 122
     862:	55 e4       	ldi	r21, 0x45	; 69
     864:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     868:	6b 01       	movw	r12, r22
     86a:	7c 01       	movw	r14, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     86c:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
     870:	4b 01       	movw	r8, r22
     872:	5c 01       	movw	r10, r24
     874:	36 2e       	mov	r3, r22
     876:	29 2c       	mov	r2, r9
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 e8       	ldi	r20, 0x80	; 128
     87e:	5f e3       	ldi	r21, 0x3F	; 63
     880:	c7 01       	movw	r24, r14
     882:	b6 01       	movw	r22, r12
     884:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     888:	88 23       	and	r24, r24
     88a:	1c f4       	brge	.+6      	; 0x892 <Play_Sound+0x5e>
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	02 c0       	rjmp	.+4      	; 0x896 <Play_Sound+0x62>
     892:	98 2d       	mov	r25, r8
     894:	89 2d       	mov	r24, r9
     896:	89 2e       	mov	r8, r25
     898:	98 2e       	mov	r9, r24
     89a:	0f 2e       	mov	r0, r31
     89c:	f8 ec       	ldi	r31, 0xC8	; 200
     89e:	af 2e       	mov	r10, r31
     8a0:	b1 2c       	mov	r11, r1
     8a2:	f0 2d       	mov	r31, r0
     8a4:	c0 e9       	ldi	r28, 0x90	; 144
     8a6:	d1 e0       	ldi	r29, 0x01	; 1
		long int i,cycles;
		float wavelength = 1.25;
		
		cycles=duration/wavelength;

		BUZZER_DDR |= (1 << BUZZER_PIN);
     8a8:	23 9a       	sbi	0x04, 3	; 4
     8aa:	00 e0       	ldi	r16, 0x00	; 0
     8ac:	10 e0       	ldi	r17, 0x00	; 0
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	40 e8       	ldi	r20, 0x80	; 128
     8b4:	5f e3       	ldi	r21, 0x3F	; 63
     8b6:	c7 01       	movw	r24, r14
     8b8:	b6 01       	movw	r22, r12
     8ba:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     8be:	88 23       	and	r24, r24
     8c0:	fc f0       	brlt	.+62     	; 0x900 <__stack+0x1>
		__ticks = 1;
	else if (__tmp > 65535)
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	3f ef       	ldi	r19, 0xFF	; 255
     8c6:	4f e7       	ldi	r20, 0x7F	; 127
     8c8:	57 e4       	ldi	r21, 0x47	; 71
     8ca:	c7 01       	movw	r24, r14
     8cc:	b6 01       	movw	r22, r12
     8ce:	0e 94 b1 09 	call	0x1362	; 0x1362 <__gesf2>
     8d2:	18 16       	cp	r1, r24
     8d4:	ac f4       	brge	.+42     	; 0x900 <__stack+0x1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e2       	ldi	r20, 0x20	; 32
     8dc:	51 e4       	ldi	r21, 0x41	; 65
     8de:	c3 01       	movw	r24, r6
     8e0:	b2 01       	movw	r22, r4
     8e2:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     8e6:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
		while(__ticks)
     8ea:	61 15       	cp	r22, r1
     8ec:	71 05       	cpc	r23, r1
     8ee:	09 f4       	brne	.+2      	; 0x8f2 <Play_Sound+0xbe>
     8f0:	64 c0       	rjmp	.+200    	; 0x9ba <__stack+0xbb>
     8f2:	ce 01       	movw	r24, r28
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <Play_Sound+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8f8:	61 50       	subi	r22, 0x01	; 1
     8fa:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8fc:	d1 f7       	brne	.-12     	; 0x8f2 <Play_Sound+0xbe>
     8fe:	51 c0       	rjmp	.+162    	; 0x9a2 <__stack+0xa3>
     900:	c4 01       	movw	r24, r8
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	f1 f7       	brne	.-4      	; 0x902 <__stack+0x3>

		for (i=0;i<cycles;i++)
		{
			_delay_ms(frequency);
			BUZZER_PORT |= (1 << BUZZER_PIN);
     906:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	40 e8       	ldi	r20, 0x80	; 128
     90e:	5f e3       	ldi	r21, 0x3F	; 63
     910:	c7 01       	movw	r24, r14
     912:	b6 01       	movw	r22, r12
     914:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     918:	88 23       	and	r24, r24
     91a:	f4 f0       	brlt	.+60     	; 0x958 <__stack+0x59>
		__ticks = 1;
	else if (__tmp > 65535)
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	3f ef       	ldi	r19, 0xFF	; 255
     920:	4f e7       	ldi	r20, 0x7F	; 127
     922:	57 e4       	ldi	r21, 0x47	; 71
     924:	c7 01       	movw	r24, r14
     926:	b6 01       	movw	r22, r12
     928:	0e 94 b1 09 	call	0x1362	; 0x1362 <__gesf2>
     92c:	18 16       	cp	r1, r24
     92e:	bc f4       	brge	.+46     	; 0x95e <__stack+0x5f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e2       	ldi	r20, 0x20	; 32
     936:	51 e4       	ldi	r21, 0x41	; 65
     938:	c3 01       	movw	r24, r6
     93a:	b2 01       	movw	r22, r4
     93c:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     940:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
		while(__ticks)
     944:	61 15       	cp	r22, r1
     946:	71 05       	cpc	r23, r1
     948:	a1 f0       	breq	.+40     	; 0x972 <__stack+0x73>
     94a:	ce 01       	movw	r24, r28
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <__stack+0x4d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     950:	61 50       	subi	r22, 0x01	; 1
     952:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     954:	d1 f7       	brne	.-12     	; 0x94a <__stack+0x4b>
     956:	0d c0       	rjmp	.+26     	; 0x972 <__stack+0x73>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	08 c0       	rjmp	.+16     	; 0x96e <__stack+0x6f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     95e:	83 2d       	mov	r24, r3
     960:	92 2d       	mov	r25, r2
     962:	05 c0       	rjmp	.+10     	; 0x96e <__stack+0x6f>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	02 c0       	rjmp	.+4      	; 0x96e <__stack+0x6f>
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	f1 f7       	brne	.-4      	; 0x96e <__stack+0x6f>
			_delay_ms(frequency);
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     972:	2b 98       	cbi	0x05, 3	; 5
     974:	0f 5f       	subi	r16, 0xFF	; 255
     976:	1f 4f       	sbci	r17, 0xFF	; 255
		
		cycles=duration/wavelength;

		BUZZER_DDR |= (1 << BUZZER_PIN);

		for (i=0;i<cycles;i++)
     978:	04 30       	cpi	r16, 0x04	; 4
     97a:	11 05       	cpc	r17, r1
     97c:	09 f0       	breq	.+2      	; 0x980 <__stack+0x81>
     97e:	97 cf       	rjmp	.-210    	; 0x8ae <Play_Sound+0x7a>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	a8 1a       	sub	r10, r24
     984:	b1 08       	sbc	r11, r1

}

void Play_Sound(float frequency)
{
	for(int i=0;i<200;i++){
     986:	09 f0       	breq	.+2      	; 0x98a <__stack+0x8b>
     988:	8f cf       	rjmp	.-226    	; 0x8a8 <Play_Sound+0x74>
     98a:	23 c0       	rjmp	.+70     	; 0x9d2 <__stack+0xd3>
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 e2       	ldi	r20, 0x20	; 32
     992:	51 e4       	ldi	r21, 0x41	; 65
     994:	c3 01       	movw	r24, r6
     996:	b2 01       	movw	r22, r4
     998:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     99c:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixunssfsi>
     9a0:	d4 cf       	rjmp	.-88     	; 0x94a <__stack+0x4b>
		BUZZER_DDR |= (1 << BUZZER_PIN);

		for (i=0;i<cycles;i++)
		{
			_delay_ms(frequency);
			BUZZER_PORT |= (1 << BUZZER_PIN);
     9a2:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	40 e8       	ldi	r20, 0x80	; 128
     9aa:	5f e3       	ldi	r21, 0x3F	; 63
     9ac:	c7 01       	movw	r24, r14
     9ae:	b6 01       	movw	r22, r12
     9b0:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     9b4:	88 23       	and	r24, r24
     9b6:	54 f7       	brge	.-44     	; 0x98c <__stack+0x8d>
     9b8:	d5 cf       	rjmp	.-86     	; 0x964 <__stack+0x65>
     9ba:	2b 9a       	sbi	0x05, 3	; 5
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	40 e8       	ldi	r20, 0x80	; 128
     9c2:	5f e3       	ldi	r21, 0x3F	; 63
     9c4:	c7 01       	movw	r24, r14
     9c6:	b6 01       	movw	r22, r12
     9c8:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     9cc:	88 23       	and	r24, r24
     9ce:	8c f6       	brge	.-94     	; 0x972 <__stack+0x73>
     9d0:	cc cf       	rjmp	.-104    	; 0x96a <__stack+0x6b>
			_delay_ms(frequency);
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
	}
	
}
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	df 90       	pop	r13
     9e0:	cf 90       	pop	r12
     9e2:	bf 90       	pop	r11
     9e4:	af 90       	pop	r10
     9e6:	9f 90       	pop	r9
     9e8:	8f 90       	pop	r8
     9ea:	7f 90       	pop	r7
     9ec:	6f 90       	pop	r6
     9ee:	5f 90       	pop	r5
     9f0:	4f 90       	pop	r4
     9f2:	3f 90       	pop	r3
     9f4:	2f 90       	pop	r2
     9f6:	08 95       	ret

000009f8 <stop_sound>:


void stop_sound(void)
{
	// Stop sound
	BUZZER_PORT &= ~(1 << BUZZER_PIN);
     9f8:	2b 98       	cbi	0x05, 3	; 5
     9fa:	08 95       	ret

000009fc <main>:

	return reader;
}
int main(void)
{
lcd_init();
     9fc:	0e 94 89 00 	call	0x112	; 0x112 <lcd_init>
lcd_clear();
     a00:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_clear>
     a04:	84 ef       	ldi	r24, 0xF4	; 244
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	20 e9       	ldi	r18, 0x90	; 144
     a0a:	31 e0       	ldi	r19, 0x01	; 1
     a0c:	f9 01       	movw	r30, r18
     a0e:	31 97       	sbiw	r30, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <main+0x12>
     a12:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a14:	d9 f7       	brne	.-10     	; 0xa0c <main+0x10>
_delay_ms (50);
lcd_goto_xy(0, 0);
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
lcd_write_word("Toy Piano Music!");
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
	Play_Sound_new(F3);
     a26:	6a e6       	ldi	r22, 0x6A	; 106
     a28:	7d e4       	ldi	r23, 0x4D	; 77
     a2a:	87 e3       	ldi	r24, 0x37	; 55
     a2c:	90 e4       	ldi	r25, 0x40	; 64
     a2e:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

	Play_Sound_new(Gb3);
     a32:	69 e0       	ldi	r22, 0x09	; 9
     a34:	79 ef       	ldi	r23, 0xF9	; 249
     a36:	8c e2       	ldi	r24, 0x2C	; 44
     a38:	90 e4       	ldi	r25, 0x40	; 64
     a3a:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

	Play_Sound_new(G3);
     a3e:	66 e9       	ldi	r22, 0x96	; 150
     a40:	73 e4       	ldi	r23, 0x43	; 67
     a42:	83 e2       	ldi	r24, 0x23	; 35
     a44:	90 e4       	ldi	r25, 0x40	; 64
     a46:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

	Play_Sound_new(Ab3);
     a4a:	64 e2       	ldi	r22, 0x24	; 36
     a4c:	78 e2       	ldi	r23, 0x28	; 40
     a4e:	8a e1       	ldi	r24, 0x1A	; 26
     a50:	90 e4       	ldi	r25, 0x40	; 64
     a52:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

	Play_Sound_new(A3);
     a56:	6b ee       	ldi	r22, 0xEB	; 235
     a58:	73 e7       	ldi	r23, 0x73	; 115
     a5a:	81 e1       	ldi	r24, 0x11	; 17
     a5c:	90 e4       	ldi	r25, 0x40	; 64
     a5e:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

	Play_Sound_new(Bb3);
     a62:	6b e1       	ldi	r22, 0x1B	; 27
     a64:	7f e2       	ldi	r23, 0x2F	; 47
     a66:	89 e0       	ldi	r24, 0x09	; 9
     a68:	90 e4       	ldi	r25, 0x40	; 64
     a6a:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

	Play_Sound_new(B3);
     a6e:	63 e5       	ldi	r22, 0x53	; 83
     a70:	76 e9       	ldi	r23, 0x96	; 150
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e4       	ldi	r25, 0x40	; 64
     a76:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

	Play_Sound_new(C4);
     a7a:	6d e0       	ldi	r22, 0x0D	; 13
     a7c:	71 e7       	ldi	r23, 0x71	; 113
     a7e:	84 ef       	ldi	r24, 0xF4	; 244
     a80:	9f e3       	ldi	r25, 0x3F	; 63
     a82:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>
	Play_Sound_new(Db4);
     a86:	6b ec       	ldi	r22, 0xCB	; 203
     a88:	70 e1       	ldi	r23, 0x10	; 16
     a8a:	87 ee       	ldi	r24, 0xE7	; 231
     a8c:	9f e3       	ldi	r25, 0x3F	; 63
     a8e:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

	Play_Sound_new(D4);
     a92:	6e e3       	ldi	r22, 0x3E	; 62
     a94:	78 ee       	ldi	r23, 0xE8	; 232
     a96:	89 ed       	ldi	r24, 0xD9	; 217
     a98:	9f e3       	ldi	r25, 0x3F	; 63
     a9a:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

	Play_Sound_new(Eb4);
     a9e:	6b ea       	ldi	r22, 0xAB	; 171
     aa0:	7f ec       	ldi	r23, 0xCF	; 207
     aa2:	8d ec       	ldi	r24, 0xCD	; 205
     aa4:	9f e3       	ldi	r25, 0x3F	; 63
     aa6:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

	Play_Sound_new(E4);
     aaa:	6a e1       	ldi	r22, 0x1A	; 26
     aac:	71 e5       	ldi	r23, 0x51	; 81
     aae:	82 ec       	ldi	r24, 0xC2	; 194
     ab0:	9f e3       	ldi	r25, 0x3F	; 63
     ab2:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

	Play_Sound_new(F4);
     ab6:	6b e9       	ldi	r22, 0x9B	; 155
     ab8:	75 e5       	ldi	r23, 0x55	; 85
     aba:	87 eb       	ldi	r24, 0xB7	; 183
     abc:	9f e3       	ldi	r25, 0x3F	; 63
     abe:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

	Play_Sound_new(Gb4);
     ac2:	6d ea       	ldi	r22, 0xAD	; 173
     ac4:	7a ef       	ldi	r23, 0xFA	; 250
     ac6:	8c ea       	ldi	r24, 0xAC	; 172
     ac8:	9f e3       	ldi	r25, 0x3F	; 63
     aca:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

Play_Sound_new(G4);
     ace:	66 e9       	ldi	r22, 0x96	; 150
     ad0:	73 e4       	ldi	r23, 0x43	; 67
     ad2:	83 ea       	ldi	r24, 0xA3	; 163
     ad4:	9f e3       	ldi	r25, 0x3F	; 63
     ad6:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

Play_Sound_new(Ab4);
     ada:	61 e9       	ldi	r22, 0x91	; 145
     adc:	7f e0       	ldi	r23, 0x0F	; 15
     ade:	8a e9       	ldi	r24, 0x9A	; 154
     ae0:	9f e3       	ldi	r25, 0x3F	; 63
     ae2:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

Play_Sound_new(A4);
     ae6:	6e e8       	ldi	r22, 0x8E	; 142
     ae8:	75 e7       	ldi	r23, 0x75	; 117
     aea:	81 e9       	ldi	r24, 0x91	; 145
     aec:	9f e3       	ldi	r25, 0x3F	; 63
     aee:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

Play_Sound_new(Bb4);
     af2:	67 e6       	ldi	r22, 0x67	; 103
     af4:	74 e4       	ldi	r23, 0x44	; 68
     af6:	89 e8       	ldi	r24, 0x89	; 137
     af8:	9f e3       	ldi	r25, 0x3F	; 63
     afa:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

Play_Sound_new(B4);
     afe:	60 ee       	ldi	r22, 0xE0	; 224
     b00:	7c e9       	ldi	r23, 0x9C	; 156
     b02:	81 e8       	ldi	r24, 0x81	; 129
     b04:	9f e3       	ldi	r25, 0x3F	; 63
     b06:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

Play_Sound_new(C5);
     b0a:	67 ee       	ldi	r22, 0xE7	; 231
     b0c:	7d e1       	ldi	r23, 0x1D	; 29
     b0e:	87 e6       	ldi	r24, 0x67	; 103
     b10:	9f e3       	ldi	r25, 0x3F	; 63
     b12:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

Play_Sound_new(Db5);
     b16:	6a e5       	ldi	r22, 0x5A	; 90
     b18:	75 ef       	ldi	r23, 0xF5	; 245
     b1a:	89 e5       	ldi	r24, 0x59	; 89
     b1c:	9f e3       	ldi	r25, 0x3F	; 63
     b1e:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

Play_Sound_new(D5);
     b22:	68 e4       	ldi	r22, 0x48	; 72
     b24:	7f eb       	ldi	r23, 0xBF	; 191
     b26:	8d e4       	ldi	r24, 0x4D	; 77
     b28:	9f e3       	ldi	r25, 0x3F	; 63
     b2a:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

Play_Sound_new(Eb5);
     b2e:	65 e4       	ldi	r22, 0x45	; 69
     b30:	77 e4       	ldi	r23, 0x47	; 71
     b32:	82 e4       	ldi	r24, 0x42	; 66
     b34:	9f e3       	ldi	r25, 0x3F	; 63
     b36:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>

Play_Sound_new(E5);
     b3a:	60 e7       	ldi	r22, 0x70	; 112
     b3c:	7f e5       	ldi	r23, 0x5F	; 95
     b3e:	87 e3       	ldi	r24, 0x37	; 55
     b40:	9f e3       	ldi	r25, 0x3F	; 63
     b42:	0e 94 3e 01 	call	0x27c	; 0x27c <Play_Sound_new>
     b46:	80 e2       	ldi	r24, 0x20	; 32
     b48:	9e e4       	ldi	r25, 0x4E	; 78
     b4a:	20 e9       	ldi	r18, 0x90	; 144
     b4c:	31 e0       	ldi	r19, 0x01	; 1
     b4e:	f9 01       	movw	r30, r18
     b50:	31 97       	sbiw	r30, 0x01	; 1
     b52:	f1 f7       	brne	.-4      	; 0xb50 <main+0x154>
     b54:	01 97       	sbiw	r24, 0x01	; 1
     b56:	d9 f7       	brne	.-10     	; 0xb4e <main+0x152>


_delay_ms(2000);


Play_Sound(F3);
     b58:	6a e6       	ldi	r22, 0x6A	; 106
     b5a:	7d e4       	ldi	r23, 0x4D	; 77
     b5c:	87 e3       	ldi	r24, 0x37	; 55
     b5e:	90 e4       	ldi	r25, 0x40	; 64
     b60:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(Gb3);
     b64:	69 e0       	ldi	r22, 0x09	; 9
     b66:	79 ef       	ldi	r23, 0xF9	; 249
     b68:	8c e2       	ldi	r24, 0x2C	; 44
     b6a:	90 e4       	ldi	r25, 0x40	; 64
     b6c:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(G3);
     b70:	66 e9       	ldi	r22, 0x96	; 150
     b72:	73 e4       	ldi	r23, 0x43	; 67
     b74:	83 e2       	ldi	r24, 0x23	; 35
     b76:	90 e4       	ldi	r25, 0x40	; 64
     b78:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(Ab3);
     b7c:	64 e2       	ldi	r22, 0x24	; 36
     b7e:	78 e2       	ldi	r23, 0x28	; 40
     b80:	8a e1       	ldi	r24, 0x1A	; 26
     b82:	90 e4       	ldi	r25, 0x40	; 64
     b84:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(A3);
     b88:	6b ee       	ldi	r22, 0xEB	; 235
     b8a:	73 e7       	ldi	r23, 0x73	; 115
     b8c:	81 e1       	ldi	r24, 0x11	; 17
     b8e:	90 e4       	ldi	r25, 0x40	; 64
     b90:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(Bb3);
     b94:	6b e1       	ldi	r22, 0x1B	; 27
     b96:	7f e2       	ldi	r23, 0x2F	; 47
     b98:	89 e0       	ldi	r24, 0x09	; 9
     b9a:	90 e4       	ldi	r25, 0x40	; 64
     b9c:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(B3);
     ba0:	63 e5       	ldi	r22, 0x53	; 83
     ba2:	76 e9       	ldi	r23, 0x96	; 150
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	90 e4       	ldi	r25, 0x40	; 64
     ba8:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(C4);
     bac:	6d e0       	ldi	r22, 0x0D	; 13
     bae:	71 e7       	ldi	r23, 0x71	; 113
     bb0:	84 ef       	ldi	r24, 0xF4	; 244
     bb2:	9f e3       	ldi	r25, 0x3F	; 63
     bb4:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>
Play_Sound(Db4);
     bb8:	6b ec       	ldi	r22, 0xCB	; 203
     bba:	70 e1       	ldi	r23, 0x10	; 16
     bbc:	87 ee       	ldi	r24, 0xE7	; 231
     bbe:	9f e3       	ldi	r25, 0x3F	; 63
     bc0:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(D4);
     bc4:	6e e3       	ldi	r22, 0x3E	; 62
     bc6:	78 ee       	ldi	r23, 0xE8	; 232
     bc8:	89 ed       	ldi	r24, 0xD9	; 217
     bca:	9f e3       	ldi	r25, 0x3F	; 63
     bcc:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(Eb4);
     bd0:	6b ea       	ldi	r22, 0xAB	; 171
     bd2:	7f ec       	ldi	r23, 0xCF	; 207
     bd4:	8d ec       	ldi	r24, 0xCD	; 205
     bd6:	9f e3       	ldi	r25, 0x3F	; 63
     bd8:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(E4);
     bdc:	6a e1       	ldi	r22, 0x1A	; 26
     bde:	71 e5       	ldi	r23, 0x51	; 81
     be0:	82 ec       	ldi	r24, 0xC2	; 194
     be2:	9f e3       	ldi	r25, 0x3F	; 63
     be4:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(F4);
     be8:	6b e9       	ldi	r22, 0x9B	; 155
     bea:	75 e5       	ldi	r23, 0x55	; 85
     bec:	87 eb       	ldi	r24, 0xB7	; 183
     bee:	9f e3       	ldi	r25, 0x3F	; 63
     bf0:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(Gb4);
     bf4:	6d ea       	ldi	r22, 0xAD	; 173
     bf6:	7a ef       	ldi	r23, 0xFA	; 250
     bf8:	8c ea       	ldi	r24, 0xAC	; 172
     bfa:	9f e3       	ldi	r25, 0x3F	; 63
     bfc:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(G4);
     c00:	66 e9       	ldi	r22, 0x96	; 150
     c02:	73 e4       	ldi	r23, 0x43	; 67
     c04:	83 ea       	ldi	r24, 0xA3	; 163
     c06:	9f e3       	ldi	r25, 0x3F	; 63
     c08:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(Ab4);
     c0c:	61 e9       	ldi	r22, 0x91	; 145
     c0e:	7f e0       	ldi	r23, 0x0F	; 15
     c10:	8a e9       	ldi	r24, 0x9A	; 154
     c12:	9f e3       	ldi	r25, 0x3F	; 63
     c14:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(A4);
     c18:	6e e8       	ldi	r22, 0x8E	; 142
     c1a:	75 e7       	ldi	r23, 0x75	; 117
     c1c:	81 e9       	ldi	r24, 0x91	; 145
     c1e:	9f e3       	ldi	r25, 0x3F	; 63
     c20:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(Bb4);
     c24:	67 e6       	ldi	r22, 0x67	; 103
     c26:	74 e4       	ldi	r23, 0x44	; 68
     c28:	89 e8       	ldi	r24, 0x89	; 137
     c2a:	9f e3       	ldi	r25, 0x3F	; 63
     c2c:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(B4);
     c30:	60 ee       	ldi	r22, 0xE0	; 224
     c32:	7c e9       	ldi	r23, 0x9C	; 156
     c34:	81 e8       	ldi	r24, 0x81	; 129
     c36:	9f e3       	ldi	r25, 0x3F	; 63
     c38:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(C5);
     c3c:	67 ee       	ldi	r22, 0xE7	; 231
     c3e:	7d e1       	ldi	r23, 0x1D	; 29
     c40:	87 e6       	ldi	r24, 0x67	; 103
     c42:	9f e3       	ldi	r25, 0x3F	; 63
     c44:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(Db5);
     c48:	6a e5       	ldi	r22, 0x5A	; 90
     c4a:	75 ef       	ldi	r23, 0xF5	; 245
     c4c:	89 e5       	ldi	r24, 0x59	; 89
     c4e:	9f e3       	ldi	r25, 0x3F	; 63
     c50:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(D5);
     c54:	68 e4       	ldi	r22, 0x48	; 72
     c56:	7f eb       	ldi	r23, 0xBF	; 191
     c58:	8d e4       	ldi	r24, 0x4D	; 77
     c5a:	9f e3       	ldi	r25, 0x3F	; 63
     c5c:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(Eb5);
     c60:	65 e4       	ldi	r22, 0x45	; 69
     c62:	77 e4       	ldi	r23, 0x47	; 71
     c64:	82 e4       	ldi	r24, 0x42	; 66
     c66:	9f e3       	ldi	r25, 0x3F	; 63
     c68:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>

Play_Sound(E5);
     c6c:	60 e7       	ldi	r22, 0x70	; 112
     c6e:	7f e5       	ldi	r23, 0x5F	; 95
     c70:	87 e3       	ldi	r24, 0x37	; 55
     c72:	9f e3       	ldi	r25, 0x3F	; 63
     c74:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>


	/* Initialize PORTC and set PC0, PC1, PC2 as output */
	DDRC |= 0b11111111;
     c78:	87 b1       	in	r24, 0x07	; 7
     c7a:	8f ef       	ldi	r24, 0xFF	; 255
     c7c:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b11111111;
     c7e:	9a b1       	in	r25, 0x0a	; 10
     c80:	8a b9       	out	0x0a, r24	; 10
     c82:	91 2c       	mov	r9, r1
     c84:	81 2c       	mov	r8, r1
     c86:	71 2c       	mov	r7, r1
     c88:	61 2c       	mov	r6, r1
	while (1){
		/* Read the input value */
		uint8_t switchNo = readInput1();
     c8a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <readInput1>
     c8e:	c8 2e       	mov	r12, r24
		uint8_t switchNo2 = readInput2();
     c90:	0e 94 12 01 	call	0x224	; 0x224 <readInput2>
     c94:	b8 2e       	mov	r11, r24
		uint8_t switchNo3 = readInput3();
     c96:	0e 94 28 01 	call	0x250	; 0x250 <readInput3>
     c9a:	a8 2e       	mov	r10, r24
		
		float freq = 0;
		
		if(PINB & 0B00000001){
     c9c:	18 99       	sbic	0x03, 0	; 3
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <main+0x2aa>
     ca0:	d5 c1       	rjmp	.+938    	; 0x104c <main+0x650>
     ca2:	21 96       	adiw	r28, 0x01	; 1
     ca4:	07 c0       	rjmp	.+14     	; 0xcb4 <main+0x2b8>
     ca6:	c1 e0       	ldi	r28, 0x01	; 1
     ca8:	d0 e0       	ldi	r29, 0x00	; 0
     caa:	e9 2c       	mov	r14, r9
     cac:	f8 2c       	mov	r15, r8
     cae:	07 2d       	mov	r16, r7
     cb0:	16 2d       	mov	r17, r6
			/* Iterate through each bit of switchNo */
			for (int i = 0; i < 8; i++) {
				/* Check if the i-th bit of switchNo is set */
				if (switchNo & (1 << i)) {
     cb2:	d1 2c       	mov	r13, r1
     cb4:	fe 01       	movw	r30, r28
     cb6:	31 97       	sbiw	r30, 0x01	; 1
     cb8:	c6 01       	movw	r24, r12
     cba:	0e 2e       	mov	r0, r30
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <main+0x2c6>
     cbe:	95 95       	asr	r25
     cc0:	87 95       	ror	r24
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <main+0x2c2>
     cc6:	80 ff       	sbrs	r24, 0
     cc8:	80 c0       	rjmp	.+256    	; 0xdca <main+0x3ce>
					/* Set frequency based on which button is pressed */
					switch (i) {
     cca:	e8 30       	cpi	r30, 0x08	; 8
     ccc:	f1 05       	cpc	r31, r1
     cce:	08 f0       	brcs	.+2      	; 0xcd2 <main+0x2d6>
     cd0:	7c c0       	rjmp	.+248    	; 0xdca <main+0x3ce>
     cd2:	ec 5c       	subi	r30, 0xCC	; 204
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__tablejump2__>
						case 0:freq += F3;break;
     cda:	2a e6       	ldi	r18, 0x6A	; 106
     cdc:	3d e4       	ldi	r19, 0x4D	; 77
     cde:	47 e3       	ldi	r20, 0x37	; 55
     ce0:	50 e4       	ldi	r21, 0x40	; 64
     ce2:	6e 2d       	mov	r22, r14
     ce4:	7f 2d       	mov	r23, r15
     ce6:	80 2f       	mov	r24, r16
     ce8:	91 2f       	mov	r25, r17
     cea:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     cee:	e6 2e       	mov	r14, r22
     cf0:	f7 2e       	mov	r15, r23
     cf2:	08 2f       	mov	r16, r24
     cf4:	19 2f       	mov	r17, r25
     cf6:	d5 cf       	rjmp	.-86     	; 0xca2 <main+0x2a6>
						case 1:freq += Gb3;break;
     cf8:	29 e0       	ldi	r18, 0x09	; 9
     cfa:	39 ef       	ldi	r19, 0xF9	; 249
     cfc:	4c e2       	ldi	r20, 0x2C	; 44
     cfe:	50 e4       	ldi	r21, 0x40	; 64
     d00:	6e 2d       	mov	r22, r14
     d02:	7f 2d       	mov	r23, r15
     d04:	80 2f       	mov	r24, r16
     d06:	91 2f       	mov	r25, r17
     d08:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     d0c:	e6 2e       	mov	r14, r22
     d0e:	f7 2e       	mov	r15, r23
     d10:	08 2f       	mov	r16, r24
     d12:	19 2f       	mov	r17, r25
     d14:	c6 cf       	rjmp	.-116    	; 0xca2 <main+0x2a6>
						case 2:freq += G3;break;
     d16:	26 e9       	ldi	r18, 0x96	; 150
     d18:	33 e4       	ldi	r19, 0x43	; 67
     d1a:	43 e2       	ldi	r20, 0x23	; 35
     d1c:	50 e4       	ldi	r21, 0x40	; 64
     d1e:	6e 2d       	mov	r22, r14
     d20:	7f 2d       	mov	r23, r15
     d22:	80 2f       	mov	r24, r16
     d24:	91 2f       	mov	r25, r17
     d26:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     d2a:	e6 2e       	mov	r14, r22
     d2c:	f7 2e       	mov	r15, r23
     d2e:	08 2f       	mov	r16, r24
     d30:	19 2f       	mov	r17, r25
     d32:	b7 cf       	rjmp	.-146    	; 0xca2 <main+0x2a6>
						case 3:freq += Ab3;break;
     d34:	24 e2       	ldi	r18, 0x24	; 36
     d36:	38 e2       	ldi	r19, 0x28	; 40
     d38:	4a e1       	ldi	r20, 0x1A	; 26
     d3a:	50 e4       	ldi	r21, 0x40	; 64
     d3c:	6e 2d       	mov	r22, r14
     d3e:	7f 2d       	mov	r23, r15
     d40:	80 2f       	mov	r24, r16
     d42:	91 2f       	mov	r25, r17
     d44:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     d48:	e6 2e       	mov	r14, r22
     d4a:	f7 2e       	mov	r15, r23
     d4c:	08 2f       	mov	r16, r24
     d4e:	19 2f       	mov	r17, r25
     d50:	a8 cf       	rjmp	.-176    	; 0xca2 <main+0x2a6>
						case 4:freq += A3;break;
     d52:	2b ee       	ldi	r18, 0xEB	; 235
     d54:	33 e7       	ldi	r19, 0x73	; 115
     d56:	41 e1       	ldi	r20, 0x11	; 17
     d58:	50 e4       	ldi	r21, 0x40	; 64
     d5a:	6e 2d       	mov	r22, r14
     d5c:	7f 2d       	mov	r23, r15
     d5e:	80 2f       	mov	r24, r16
     d60:	91 2f       	mov	r25, r17
     d62:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     d66:	e6 2e       	mov	r14, r22
     d68:	f7 2e       	mov	r15, r23
     d6a:	08 2f       	mov	r16, r24
     d6c:	19 2f       	mov	r17, r25
     d6e:	99 cf       	rjmp	.-206    	; 0xca2 <main+0x2a6>
						case 5:freq += Bb3;break;
     d70:	2b e1       	ldi	r18, 0x1B	; 27
     d72:	3f e2       	ldi	r19, 0x2F	; 47
     d74:	49 e0       	ldi	r20, 0x09	; 9
     d76:	50 e4       	ldi	r21, 0x40	; 64
     d78:	6e 2d       	mov	r22, r14
     d7a:	7f 2d       	mov	r23, r15
     d7c:	80 2f       	mov	r24, r16
     d7e:	91 2f       	mov	r25, r17
     d80:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     d84:	e6 2e       	mov	r14, r22
     d86:	f7 2e       	mov	r15, r23
     d88:	08 2f       	mov	r16, r24
     d8a:	19 2f       	mov	r17, r25
     d8c:	8a cf       	rjmp	.-236    	; 0xca2 <main+0x2a6>
						case 6:freq += B3;break;
     d8e:	23 e5       	ldi	r18, 0x53	; 83
     d90:	36 e9       	ldi	r19, 0x96	; 150
     d92:	41 e0       	ldi	r20, 0x01	; 1
     d94:	50 e4       	ldi	r21, 0x40	; 64
     d96:	6e 2d       	mov	r22, r14
     d98:	7f 2d       	mov	r23, r15
     d9a:	80 2f       	mov	r24, r16
     d9c:	91 2f       	mov	r25, r17
     d9e:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     da2:	e6 2e       	mov	r14, r22
     da4:	f7 2e       	mov	r15, r23
     da6:	08 2f       	mov	r16, r24
     da8:	19 2f       	mov	r17, r25
     daa:	7b cf       	rjmp	.-266    	; 0xca2 <main+0x2a6>
						case 7:freq += C4;break;
     dac:	2d e0       	ldi	r18, 0x0D	; 13
     dae:	31 e7       	ldi	r19, 0x71	; 113
     db0:	44 ef       	ldi	r20, 0xF4	; 244
     db2:	5f e3       	ldi	r21, 0x3F	; 63
     db4:	6e 2d       	mov	r22, r14
     db6:	7f 2d       	mov	r23, r15
     db8:	80 2f       	mov	r24, r16
     dba:	91 2f       	mov	r25, r17
     dbc:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     dc0:	e6 2e       	mov	r14, r22
     dc2:	f7 2e       	mov	r15, r23
     dc4:	08 2f       	mov	r16, r24
     dc6:	19 2f       	mov	r17, r25
     dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <main+0x3d6>
		
		float freq = 0;
		
		if(PINB & 0B00000001){
			/* Iterate through each bit of switchNo */
			for (int i = 0; i < 8; i++) {
     dca:	c8 30       	cpi	r28, 0x08	; 8
     dcc:	d1 05       	cpc	r29, r1
     dce:	0c f4       	brge	.+2      	; 0xdd2 <main+0x3d6>
     dd0:	68 cf       	rjmp	.-304    	; 0xca2 <main+0x2a6>
     dd2:	c1 e0       	ldi	r28, 0x01	; 1
     dd4:	d0 e0       	ldi	r29, 0x00	; 0
			
			
			
			for (int i = 0; i < 8; i++) {
				/* Check if the i-th bit of switchNo is set */
				if (switchNo2 & (1 << i)) {
     dd6:	cb 2c       	mov	r12, r11
     dd8:	d1 2c       	mov	r13, r1
     dda:	01 c0       	rjmp	.+2      	; 0xdde <main+0x3e2>
     ddc:	21 96       	adiw	r28, 0x01	; 1
     dde:	fe 01       	movw	r30, r28
     de0:	31 97       	sbiw	r30, 0x01	; 1
     de2:	c6 01       	movw	r24, r12
     de4:	0e 2e       	mov	r0, r30
     de6:	02 c0       	rjmp	.+4      	; 0xdec <main+0x3f0>
     de8:	95 95       	asr	r25
     dea:	87 95       	ror	r24
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <main+0x3ec>
     df0:	80 ff       	sbrs	r24, 0
     df2:	80 c0       	rjmp	.+256    	; 0xef4 <main+0x4f8>
					/* Set frequency based on which button is pressed */
					switch (i) {
     df4:	e8 30       	cpi	r30, 0x08	; 8
     df6:	f1 05       	cpc	r31, r1
     df8:	08 f0       	brcs	.+2      	; 0xdfc <main+0x400>
     dfa:	7c c0       	rjmp	.+248    	; 0xef4 <main+0x4f8>
     dfc:	e4 5c       	subi	r30, 0xC4	; 196
     dfe:	ff 4f       	sbci	r31, 0xFF	; 255
     e00:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__tablejump2__>
						case 0:freq += Db4;break;
     e04:	2b ec       	ldi	r18, 0xCB	; 203
     e06:	30 e1       	ldi	r19, 0x10	; 16
     e08:	47 ee       	ldi	r20, 0xE7	; 231
     e0a:	5f e3       	ldi	r21, 0x3F	; 63
     e0c:	6e 2d       	mov	r22, r14
     e0e:	7f 2d       	mov	r23, r15
     e10:	80 2f       	mov	r24, r16
     e12:	91 2f       	mov	r25, r17
     e14:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     e18:	e6 2e       	mov	r14, r22
     e1a:	f7 2e       	mov	r15, r23
     e1c:	08 2f       	mov	r16, r24
     e1e:	19 2f       	mov	r17, r25
     e20:	dd cf       	rjmp	.-70     	; 0xddc <main+0x3e0>
						case 1:freq += D4;break;
     e22:	2e e3       	ldi	r18, 0x3E	; 62
     e24:	38 ee       	ldi	r19, 0xE8	; 232
     e26:	49 ed       	ldi	r20, 0xD9	; 217
     e28:	5f e3       	ldi	r21, 0x3F	; 63
     e2a:	6e 2d       	mov	r22, r14
     e2c:	7f 2d       	mov	r23, r15
     e2e:	80 2f       	mov	r24, r16
     e30:	91 2f       	mov	r25, r17
     e32:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     e36:	e6 2e       	mov	r14, r22
     e38:	f7 2e       	mov	r15, r23
     e3a:	08 2f       	mov	r16, r24
     e3c:	19 2f       	mov	r17, r25
     e3e:	ce cf       	rjmp	.-100    	; 0xddc <main+0x3e0>
						case 2:freq += Eb4;break;
     e40:	2b ea       	ldi	r18, 0xAB	; 171
     e42:	3f ec       	ldi	r19, 0xCF	; 207
     e44:	4d ec       	ldi	r20, 0xCD	; 205
     e46:	5f e3       	ldi	r21, 0x3F	; 63
     e48:	6e 2d       	mov	r22, r14
     e4a:	7f 2d       	mov	r23, r15
     e4c:	80 2f       	mov	r24, r16
     e4e:	91 2f       	mov	r25, r17
     e50:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     e54:	e6 2e       	mov	r14, r22
     e56:	f7 2e       	mov	r15, r23
     e58:	08 2f       	mov	r16, r24
     e5a:	19 2f       	mov	r17, r25
     e5c:	bf cf       	rjmp	.-130    	; 0xddc <main+0x3e0>
						case 3:freq += E4;break;
     e5e:	2a e1       	ldi	r18, 0x1A	; 26
     e60:	31 e5       	ldi	r19, 0x51	; 81
     e62:	42 ec       	ldi	r20, 0xC2	; 194
     e64:	5f e3       	ldi	r21, 0x3F	; 63
     e66:	6e 2d       	mov	r22, r14
     e68:	7f 2d       	mov	r23, r15
     e6a:	80 2f       	mov	r24, r16
     e6c:	91 2f       	mov	r25, r17
     e6e:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     e72:	e6 2e       	mov	r14, r22
     e74:	f7 2e       	mov	r15, r23
     e76:	08 2f       	mov	r16, r24
     e78:	19 2f       	mov	r17, r25
     e7a:	b0 cf       	rjmp	.-160    	; 0xddc <main+0x3e0>
						case 4:freq += F4;break;
     e7c:	2b e9       	ldi	r18, 0x9B	; 155
     e7e:	35 e5       	ldi	r19, 0x55	; 85
     e80:	47 eb       	ldi	r20, 0xB7	; 183
     e82:	5f e3       	ldi	r21, 0x3F	; 63
     e84:	6e 2d       	mov	r22, r14
     e86:	7f 2d       	mov	r23, r15
     e88:	80 2f       	mov	r24, r16
     e8a:	91 2f       	mov	r25, r17
     e8c:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     e90:	e6 2e       	mov	r14, r22
     e92:	f7 2e       	mov	r15, r23
     e94:	08 2f       	mov	r16, r24
     e96:	19 2f       	mov	r17, r25
     e98:	a1 cf       	rjmp	.-190    	; 0xddc <main+0x3e0>
						case 5:freq += Gb4;break;
     e9a:	2d ea       	ldi	r18, 0xAD	; 173
     e9c:	3a ef       	ldi	r19, 0xFA	; 250
     e9e:	4c ea       	ldi	r20, 0xAC	; 172
     ea0:	5f e3       	ldi	r21, 0x3F	; 63
     ea2:	6e 2d       	mov	r22, r14
     ea4:	7f 2d       	mov	r23, r15
     ea6:	80 2f       	mov	r24, r16
     ea8:	91 2f       	mov	r25, r17
     eaa:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     eae:	e6 2e       	mov	r14, r22
     eb0:	f7 2e       	mov	r15, r23
     eb2:	08 2f       	mov	r16, r24
     eb4:	19 2f       	mov	r17, r25
     eb6:	92 cf       	rjmp	.-220    	; 0xddc <main+0x3e0>
						case 6:freq += G4;break;
     eb8:	26 e9       	ldi	r18, 0x96	; 150
     eba:	33 e4       	ldi	r19, 0x43	; 67
     ebc:	43 ea       	ldi	r20, 0xA3	; 163
     ebe:	5f e3       	ldi	r21, 0x3F	; 63
     ec0:	6e 2d       	mov	r22, r14
     ec2:	7f 2d       	mov	r23, r15
     ec4:	80 2f       	mov	r24, r16
     ec6:	91 2f       	mov	r25, r17
     ec8:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     ecc:	e6 2e       	mov	r14, r22
     ece:	f7 2e       	mov	r15, r23
     ed0:	08 2f       	mov	r16, r24
     ed2:	19 2f       	mov	r17, r25
     ed4:	83 cf       	rjmp	.-250    	; 0xddc <main+0x3e0>
						case 7:freq += Ab4;break;
     ed6:	21 e9       	ldi	r18, 0x91	; 145
     ed8:	3f e0       	ldi	r19, 0x0F	; 15
     eda:	4a e9       	ldi	r20, 0x9A	; 154
     edc:	5f e3       	ldi	r21, 0x3F	; 63
     ede:	6e 2d       	mov	r22, r14
     ee0:	7f 2d       	mov	r23, r15
     ee2:	80 2f       	mov	r24, r16
     ee4:	91 2f       	mov	r25, r17
     ee6:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     eea:	e6 2e       	mov	r14, r22
     eec:	f7 2e       	mov	r15, r23
     eee:	08 2f       	mov	r16, r24
     ef0:	19 2f       	mov	r17, r25
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <main+0x500>
				}
			}
			
			
			
			for (int i = 0; i < 8; i++) {
     ef4:	c8 30       	cpi	r28, 0x08	; 8
     ef6:	d1 05       	cpc	r29, r1
     ef8:	0c f4       	brge	.+2      	; 0xefc <main+0x500>
     efa:	70 cf       	rjmp	.-288    	; 0xddc <main+0x3e0>
     efc:	c1 e0       	ldi	r28, 0x01	; 1
     efe:	d0 e0       	ldi	r29, 0x00	; 0
			}
			
			
			for (int i = 0; i < 8; i++) {
				/* Check if the i-th bit of switchNo is set */
				if (switchNo3 & (1 << i)) {
     f00:	ca 2c       	mov	r12, r10
     f02:	d1 2c       	mov	r13, r1
     f04:	01 c0       	rjmp	.+2      	; 0xf08 <main+0x50c>
     f06:	21 96       	adiw	r28, 0x01	; 1
     f08:	fe 01       	movw	r30, r28
     f0a:	31 97       	sbiw	r30, 0x01	; 1
     f0c:	c6 01       	movw	r24, r12
     f0e:	0e 2e       	mov	r0, r30
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <main+0x51a>
     f12:	95 95       	asr	r25
     f14:	87 95       	ror	r24
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <main+0x516>
     f1a:	80 ff       	sbrs	r24, 0
     f1c:	80 c0       	rjmp	.+256    	; 0x101e <main+0x622>
					/* Set frequency based on which button is pressed */
					switch (i) {
     f1e:	e8 30       	cpi	r30, 0x08	; 8
     f20:	f1 05       	cpc	r31, r1
     f22:	08 f0       	brcs	.+2      	; 0xf26 <main+0x52a>
     f24:	7c c0       	rjmp	.+248    	; 0x101e <main+0x622>
     f26:	ec 5b       	subi	r30, 0xBC	; 188
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__tablejump2__>
						case 0:freq += A4;break;
     f2e:	2e e8       	ldi	r18, 0x8E	; 142
     f30:	35 e7       	ldi	r19, 0x75	; 117
     f32:	41 e9       	ldi	r20, 0x91	; 145
     f34:	5f e3       	ldi	r21, 0x3F	; 63
     f36:	6e 2d       	mov	r22, r14
     f38:	7f 2d       	mov	r23, r15
     f3a:	80 2f       	mov	r24, r16
     f3c:	91 2f       	mov	r25, r17
     f3e:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     f42:	e6 2e       	mov	r14, r22
     f44:	f7 2e       	mov	r15, r23
     f46:	08 2f       	mov	r16, r24
     f48:	19 2f       	mov	r17, r25
     f4a:	dd cf       	rjmp	.-70     	; 0xf06 <main+0x50a>
						case 1:freq += Bb4;break;
     f4c:	27 e6       	ldi	r18, 0x67	; 103
     f4e:	34 e4       	ldi	r19, 0x44	; 68
     f50:	49 e8       	ldi	r20, 0x89	; 137
     f52:	5f e3       	ldi	r21, 0x3F	; 63
     f54:	6e 2d       	mov	r22, r14
     f56:	7f 2d       	mov	r23, r15
     f58:	80 2f       	mov	r24, r16
     f5a:	91 2f       	mov	r25, r17
     f5c:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     f60:	e6 2e       	mov	r14, r22
     f62:	f7 2e       	mov	r15, r23
     f64:	08 2f       	mov	r16, r24
     f66:	19 2f       	mov	r17, r25
     f68:	ce cf       	rjmp	.-100    	; 0xf06 <main+0x50a>
						case 2:freq += B4;break;
     f6a:	20 ee       	ldi	r18, 0xE0	; 224
     f6c:	3c e9       	ldi	r19, 0x9C	; 156
     f6e:	41 e8       	ldi	r20, 0x81	; 129
     f70:	5f e3       	ldi	r21, 0x3F	; 63
     f72:	6e 2d       	mov	r22, r14
     f74:	7f 2d       	mov	r23, r15
     f76:	80 2f       	mov	r24, r16
     f78:	91 2f       	mov	r25, r17
     f7a:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     f7e:	e6 2e       	mov	r14, r22
     f80:	f7 2e       	mov	r15, r23
     f82:	08 2f       	mov	r16, r24
     f84:	19 2f       	mov	r17, r25
     f86:	bf cf       	rjmp	.-130    	; 0xf06 <main+0x50a>
						case 3:freq += C5;break;
     f88:	27 ee       	ldi	r18, 0xE7	; 231
     f8a:	3d e1       	ldi	r19, 0x1D	; 29
     f8c:	47 e6       	ldi	r20, 0x67	; 103
     f8e:	5f e3       	ldi	r21, 0x3F	; 63
     f90:	6e 2d       	mov	r22, r14
     f92:	7f 2d       	mov	r23, r15
     f94:	80 2f       	mov	r24, r16
     f96:	91 2f       	mov	r25, r17
     f98:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     f9c:	e6 2e       	mov	r14, r22
     f9e:	f7 2e       	mov	r15, r23
     fa0:	08 2f       	mov	r16, r24
     fa2:	19 2f       	mov	r17, r25
     fa4:	b0 cf       	rjmp	.-160    	; 0xf06 <main+0x50a>
						case 4:freq += Db5;break;
     fa6:	2a e5       	ldi	r18, 0x5A	; 90
     fa8:	35 ef       	ldi	r19, 0xF5	; 245
     faa:	49 e5       	ldi	r20, 0x59	; 89
     fac:	5f e3       	ldi	r21, 0x3F	; 63
     fae:	6e 2d       	mov	r22, r14
     fb0:	7f 2d       	mov	r23, r15
     fb2:	80 2f       	mov	r24, r16
     fb4:	91 2f       	mov	r25, r17
     fb6:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     fba:	e6 2e       	mov	r14, r22
     fbc:	f7 2e       	mov	r15, r23
     fbe:	08 2f       	mov	r16, r24
     fc0:	19 2f       	mov	r17, r25
     fc2:	a1 cf       	rjmp	.-190    	; 0xf06 <main+0x50a>
						case 5:freq += D5;break;
     fc4:	28 e4       	ldi	r18, 0x48	; 72
     fc6:	3f eb       	ldi	r19, 0xBF	; 191
     fc8:	4d e4       	ldi	r20, 0x4D	; 77
     fca:	5f e3       	ldi	r21, 0x3F	; 63
     fcc:	6e 2d       	mov	r22, r14
     fce:	7f 2d       	mov	r23, r15
     fd0:	80 2f       	mov	r24, r16
     fd2:	91 2f       	mov	r25, r17
     fd4:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     fd8:	e6 2e       	mov	r14, r22
     fda:	f7 2e       	mov	r15, r23
     fdc:	08 2f       	mov	r16, r24
     fde:	19 2f       	mov	r17, r25
     fe0:	92 cf       	rjmp	.-220    	; 0xf06 <main+0x50a>
						case 6:freq += Eb5;break;
     fe2:	25 e4       	ldi	r18, 0x45	; 69
     fe4:	37 e4       	ldi	r19, 0x47	; 71
     fe6:	42 e4       	ldi	r20, 0x42	; 66
     fe8:	5f e3       	ldi	r21, 0x3F	; 63
     fea:	6e 2d       	mov	r22, r14
     fec:	7f 2d       	mov	r23, r15
     fee:	80 2f       	mov	r24, r16
     ff0:	91 2f       	mov	r25, r17
     ff2:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
     ff6:	e6 2e       	mov	r14, r22
     ff8:	f7 2e       	mov	r15, r23
     ffa:	08 2f       	mov	r16, r24
     ffc:	19 2f       	mov	r17, r25
     ffe:	83 cf       	rjmp	.-250    	; 0xf06 <main+0x50a>
						case 7:freq += E5;break;
    1000:	20 e7       	ldi	r18, 0x70	; 112
    1002:	3f e5       	ldi	r19, 0x5F	; 95
    1004:	47 e3       	ldi	r20, 0x37	; 55
    1006:	5f e3       	ldi	r21, 0x3F	; 63
    1008:	6e 2d       	mov	r22, r14
    100a:	7f 2d       	mov	r23, r15
    100c:	80 2f       	mov	r24, r16
    100e:	91 2f       	mov	r25, r17
    1010:	0e 94 2a 08 	call	0x1054	; 0x1054 <__addsf3>
    1014:	e6 2e       	mov	r14, r22
    1016:	f7 2e       	mov	r15, r23
    1018:	08 2f       	mov	r16, r24
    101a:	19 2f       	mov	r17, r25
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <main+0x62a>
					}
				}
			}
			
			
			for (int i = 0; i < 8; i++) {
    101e:	c8 30       	cpi	r28, 0x08	; 8
    1020:	d1 05       	cpc	r29, r1
    1022:	0c f4       	brge	.+2      	; 0x1026 <main+0x62a>
    1024:	70 cf       	rjmp	.-288    	; 0xf06 <main+0x50a>
				}
			}
			}
		
		
		if (freq > 0) {
    1026:	29 2d       	mov	r18, r9
    1028:	38 2d       	mov	r19, r8
    102a:	47 2d       	mov	r20, r7
    102c:	56 2d       	mov	r21, r6
    102e:	6e 2d       	mov	r22, r14
    1030:	7f 2d       	mov	r23, r15
    1032:	80 2f       	mov	r24, r16
    1034:	91 2f       	mov	r25, r17
    1036:	0e 94 b1 09 	call	0x1362	; 0x1362 <__gesf2>
    103a:	18 16       	cp	r1, r24
    103c:	3c f4       	brge	.+14     	; 0x104c <main+0x650>
			Play_Sound(freq);
    103e:	6e 2d       	mov	r22, r14
    1040:	7f 2d       	mov	r23, r15
    1042:	80 2f       	mov	r24, r16
    1044:	91 2f       	mov	r25, r17
    1046:	0e 94 1a 04 	call	0x834	; 0x834 <Play_Sound>
    104a:	1f ce       	rjmp	.-962    	; 0xc8a <main+0x28e>
			}else{
			stop_sound();
    104c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <stop_sound>
    1050:	1c ce       	rjmp	.-968    	; 0xc8a <main+0x28e>

00001052 <__subsf3>:
    1052:	50 58       	subi	r21, 0x80	; 128

00001054 <__addsf3>:
    1054:	bb 27       	eor	r27, r27
    1056:	aa 27       	eor	r26, r26
    1058:	0e 94 41 08 	call	0x1082	; 0x1082 <__addsf3x>
    105c:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__fp_round>
    1060:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fp_pscA>
    1064:	38 f0       	brcs	.+14     	; 0x1074 <__addsf3+0x20>
    1066:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fp_pscB>
    106a:	20 f0       	brcs	.+8      	; 0x1074 <__addsf3+0x20>
    106c:	39 f4       	brne	.+14     	; 0x107c <__addsf3+0x28>
    106e:	9f 3f       	cpi	r25, 0xFF	; 255
    1070:	19 f4       	brne	.+6      	; 0x1078 <__addsf3+0x24>
    1072:	26 f4       	brtc	.+8      	; 0x107c <__addsf3+0x28>
    1074:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__fp_nan>
    1078:	0e f4       	brtc	.+2      	; 0x107c <__addsf3+0x28>
    107a:	e0 95       	com	r30
    107c:	e7 fb       	bst	r30, 7
    107e:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__fp_inf>

00001082 <__addsf3x>:
    1082:	e9 2f       	mov	r30, r25
    1084:	0e 94 88 09 	call	0x1310	; 0x1310 <__fp_split3>
    1088:	58 f3       	brcs	.-42     	; 0x1060 <__addsf3+0xc>
    108a:	ba 17       	cp	r27, r26
    108c:	62 07       	cpc	r22, r18
    108e:	73 07       	cpc	r23, r19
    1090:	84 07       	cpc	r24, r20
    1092:	95 07       	cpc	r25, r21
    1094:	20 f0       	brcs	.+8      	; 0x109e <__addsf3x+0x1c>
    1096:	79 f4       	brne	.+30     	; 0x10b6 <__addsf3x+0x34>
    1098:	a6 f5       	brtc	.+104    	; 0x1102 <__addsf3x+0x80>
    109a:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__fp_zero>
    109e:	0e f4       	brtc	.+2      	; 0x10a2 <__addsf3x+0x20>
    10a0:	e0 95       	com	r30
    10a2:	0b 2e       	mov	r0, r27
    10a4:	ba 2f       	mov	r27, r26
    10a6:	a0 2d       	mov	r26, r0
    10a8:	0b 01       	movw	r0, r22
    10aa:	b9 01       	movw	r22, r18
    10ac:	90 01       	movw	r18, r0
    10ae:	0c 01       	movw	r0, r24
    10b0:	ca 01       	movw	r24, r20
    10b2:	a0 01       	movw	r20, r0
    10b4:	11 24       	eor	r1, r1
    10b6:	ff 27       	eor	r31, r31
    10b8:	59 1b       	sub	r21, r25
    10ba:	99 f0       	breq	.+38     	; 0x10e2 <__addsf3x+0x60>
    10bc:	59 3f       	cpi	r21, 0xF9	; 249
    10be:	50 f4       	brcc	.+20     	; 0x10d4 <__addsf3x+0x52>
    10c0:	50 3e       	cpi	r21, 0xE0	; 224
    10c2:	68 f1       	brcs	.+90     	; 0x111e <__addsf3x+0x9c>
    10c4:	1a 16       	cp	r1, r26
    10c6:	f0 40       	sbci	r31, 0x00	; 0
    10c8:	a2 2f       	mov	r26, r18
    10ca:	23 2f       	mov	r18, r19
    10cc:	34 2f       	mov	r19, r20
    10ce:	44 27       	eor	r20, r20
    10d0:	58 5f       	subi	r21, 0xF8	; 248
    10d2:	f3 cf       	rjmp	.-26     	; 0x10ba <__addsf3x+0x38>
    10d4:	46 95       	lsr	r20
    10d6:	37 95       	ror	r19
    10d8:	27 95       	ror	r18
    10da:	a7 95       	ror	r26
    10dc:	f0 40       	sbci	r31, 0x00	; 0
    10de:	53 95       	inc	r21
    10e0:	c9 f7       	brne	.-14     	; 0x10d4 <__addsf3x+0x52>
    10e2:	7e f4       	brtc	.+30     	; 0x1102 <__addsf3x+0x80>
    10e4:	1f 16       	cp	r1, r31
    10e6:	ba 0b       	sbc	r27, r26
    10e8:	62 0b       	sbc	r22, r18
    10ea:	73 0b       	sbc	r23, r19
    10ec:	84 0b       	sbc	r24, r20
    10ee:	ba f0       	brmi	.+46     	; 0x111e <__addsf3x+0x9c>
    10f0:	91 50       	subi	r25, 0x01	; 1
    10f2:	a1 f0       	breq	.+40     	; 0x111c <__addsf3x+0x9a>
    10f4:	ff 0f       	add	r31, r31
    10f6:	bb 1f       	adc	r27, r27
    10f8:	66 1f       	adc	r22, r22
    10fa:	77 1f       	adc	r23, r23
    10fc:	88 1f       	adc	r24, r24
    10fe:	c2 f7       	brpl	.-16     	; 0x10f0 <__addsf3x+0x6e>
    1100:	0e c0       	rjmp	.+28     	; 0x111e <__addsf3x+0x9c>
    1102:	ba 0f       	add	r27, r26
    1104:	62 1f       	adc	r22, r18
    1106:	73 1f       	adc	r23, r19
    1108:	84 1f       	adc	r24, r20
    110a:	48 f4       	brcc	.+18     	; 0x111e <__addsf3x+0x9c>
    110c:	87 95       	ror	r24
    110e:	77 95       	ror	r23
    1110:	67 95       	ror	r22
    1112:	b7 95       	ror	r27
    1114:	f7 95       	ror	r31
    1116:	9e 3f       	cpi	r25, 0xFE	; 254
    1118:	08 f0       	brcs	.+2      	; 0x111c <__addsf3x+0x9a>
    111a:	b0 cf       	rjmp	.-160    	; 0x107c <__addsf3+0x28>
    111c:	93 95       	inc	r25
    111e:	88 0f       	add	r24, r24
    1120:	08 f0       	brcs	.+2      	; 0x1124 <__addsf3x+0xa2>
    1122:	99 27       	eor	r25, r25
    1124:	ee 0f       	add	r30, r30
    1126:	97 95       	ror	r25
    1128:	87 95       	ror	r24
    112a:	08 95       	ret

0000112c <__cmpsf2>:
    112c:	0e 94 3c 09 	call	0x1278	; 0x1278 <__fp_cmp>
    1130:	08 f4       	brcc	.+2      	; 0x1134 <__cmpsf2+0x8>
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	08 95       	ret

00001136 <__divsf3>:
    1136:	0e 94 af 08 	call	0x115e	; 0x115e <__divsf3x>
    113a:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__fp_round>
    113e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fp_pscB>
    1142:	58 f0       	brcs	.+22     	; 0x115a <__divsf3+0x24>
    1144:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fp_pscA>
    1148:	40 f0       	brcs	.+16     	; 0x115a <__divsf3+0x24>
    114a:	29 f4       	brne	.+10     	; 0x1156 <__divsf3+0x20>
    114c:	5f 3f       	cpi	r21, 0xFF	; 255
    114e:	29 f0       	breq	.+10     	; 0x115a <__divsf3+0x24>
    1150:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__fp_inf>
    1154:	51 11       	cpse	r21, r1
    1156:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_szero>
    115a:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__fp_nan>

0000115e <__divsf3x>:
    115e:	0e 94 88 09 	call	0x1310	; 0x1310 <__fp_split3>
    1162:	68 f3       	brcs	.-38     	; 0x113e <__divsf3+0x8>

00001164 <__divsf3_pse>:
    1164:	99 23       	and	r25, r25
    1166:	b1 f3       	breq	.-20     	; 0x1154 <__divsf3+0x1e>
    1168:	55 23       	and	r21, r21
    116a:	91 f3       	breq	.-28     	; 0x1150 <__divsf3+0x1a>
    116c:	95 1b       	sub	r25, r21
    116e:	55 0b       	sbc	r21, r21
    1170:	bb 27       	eor	r27, r27
    1172:	aa 27       	eor	r26, r26
    1174:	62 17       	cp	r22, r18
    1176:	73 07       	cpc	r23, r19
    1178:	84 07       	cpc	r24, r20
    117a:	38 f0       	brcs	.+14     	; 0x118a <__divsf3_pse+0x26>
    117c:	9f 5f       	subi	r25, 0xFF	; 255
    117e:	5f 4f       	sbci	r21, 0xFF	; 255
    1180:	22 0f       	add	r18, r18
    1182:	33 1f       	adc	r19, r19
    1184:	44 1f       	adc	r20, r20
    1186:	aa 1f       	adc	r26, r26
    1188:	a9 f3       	breq	.-22     	; 0x1174 <__divsf3_pse+0x10>
    118a:	35 d0       	rcall	.+106    	; 0x11f6 <__divsf3_pse+0x92>
    118c:	0e 2e       	mov	r0, r30
    118e:	3a f0       	brmi	.+14     	; 0x119e <__divsf3_pse+0x3a>
    1190:	e0 e8       	ldi	r30, 0x80	; 128
    1192:	32 d0       	rcall	.+100    	; 0x11f8 <__divsf3_pse+0x94>
    1194:	91 50       	subi	r25, 0x01	; 1
    1196:	50 40       	sbci	r21, 0x00	; 0
    1198:	e6 95       	lsr	r30
    119a:	00 1c       	adc	r0, r0
    119c:	ca f7       	brpl	.-14     	; 0x1190 <__divsf3_pse+0x2c>
    119e:	2b d0       	rcall	.+86     	; 0x11f6 <__divsf3_pse+0x92>
    11a0:	fe 2f       	mov	r31, r30
    11a2:	29 d0       	rcall	.+82     	; 0x11f6 <__divsf3_pse+0x92>
    11a4:	66 0f       	add	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	88 1f       	adc	r24, r24
    11aa:	bb 1f       	adc	r27, r27
    11ac:	26 17       	cp	r18, r22
    11ae:	37 07       	cpc	r19, r23
    11b0:	48 07       	cpc	r20, r24
    11b2:	ab 07       	cpc	r26, r27
    11b4:	b0 e8       	ldi	r27, 0x80	; 128
    11b6:	09 f0       	breq	.+2      	; 0x11ba <__divsf3_pse+0x56>
    11b8:	bb 0b       	sbc	r27, r27
    11ba:	80 2d       	mov	r24, r0
    11bc:	bf 01       	movw	r22, r30
    11be:	ff 27       	eor	r31, r31
    11c0:	93 58       	subi	r25, 0x83	; 131
    11c2:	5f 4f       	sbci	r21, 0xFF	; 255
    11c4:	3a f0       	brmi	.+14     	; 0x11d4 <__divsf3_pse+0x70>
    11c6:	9e 3f       	cpi	r25, 0xFE	; 254
    11c8:	51 05       	cpc	r21, r1
    11ca:	78 f0       	brcs	.+30     	; 0x11ea <__divsf3_pse+0x86>
    11cc:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__fp_inf>
    11d0:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_szero>
    11d4:	5f 3f       	cpi	r21, 0xFF	; 255
    11d6:	e4 f3       	brlt	.-8      	; 0x11d0 <__divsf3_pse+0x6c>
    11d8:	98 3e       	cpi	r25, 0xE8	; 232
    11da:	d4 f3       	brlt	.-12     	; 0x11d0 <__divsf3_pse+0x6c>
    11dc:	86 95       	lsr	r24
    11de:	77 95       	ror	r23
    11e0:	67 95       	ror	r22
    11e2:	b7 95       	ror	r27
    11e4:	f7 95       	ror	r31
    11e6:	9f 5f       	subi	r25, 0xFF	; 255
    11e8:	c9 f7       	brne	.-14     	; 0x11dc <__divsf3_pse+0x78>
    11ea:	88 0f       	add	r24, r24
    11ec:	91 1d       	adc	r25, r1
    11ee:	96 95       	lsr	r25
    11f0:	87 95       	ror	r24
    11f2:	97 f9       	bld	r25, 7
    11f4:	08 95       	ret
    11f6:	e1 e0       	ldi	r30, 0x01	; 1
    11f8:	66 0f       	add	r22, r22
    11fa:	77 1f       	adc	r23, r23
    11fc:	88 1f       	adc	r24, r24
    11fe:	bb 1f       	adc	r27, r27
    1200:	62 17       	cp	r22, r18
    1202:	73 07       	cpc	r23, r19
    1204:	84 07       	cpc	r24, r20
    1206:	ba 07       	cpc	r27, r26
    1208:	20 f0       	brcs	.+8      	; 0x1212 <__divsf3_pse+0xae>
    120a:	62 1b       	sub	r22, r18
    120c:	73 0b       	sbc	r23, r19
    120e:	84 0b       	sbc	r24, r20
    1210:	ba 0b       	sbc	r27, r26
    1212:	ee 1f       	adc	r30, r30
    1214:	88 f7       	brcc	.-30     	; 0x11f8 <__divsf3_pse+0x94>
    1216:	e0 95       	com	r30
    1218:	08 95       	ret

0000121a <__fixunssfsi>:
    121a:	0e 94 90 09 	call	0x1320	; 0x1320 <__fp_splitA>
    121e:	88 f0       	brcs	.+34     	; 0x1242 <__fixunssfsi+0x28>
    1220:	9f 57       	subi	r25, 0x7F	; 127
    1222:	98 f0       	brcs	.+38     	; 0x124a <__fixunssfsi+0x30>
    1224:	b9 2f       	mov	r27, r25
    1226:	99 27       	eor	r25, r25
    1228:	b7 51       	subi	r27, 0x17	; 23
    122a:	b0 f0       	brcs	.+44     	; 0x1258 <__fixunssfsi+0x3e>
    122c:	e1 f0       	breq	.+56     	; 0x1266 <__fixunssfsi+0x4c>
    122e:	66 0f       	add	r22, r22
    1230:	77 1f       	adc	r23, r23
    1232:	88 1f       	adc	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	1a f0       	brmi	.+6      	; 0x123e <__fixunssfsi+0x24>
    1238:	ba 95       	dec	r27
    123a:	c9 f7       	brne	.-14     	; 0x122e <__fixunssfsi+0x14>
    123c:	14 c0       	rjmp	.+40     	; 0x1266 <__fixunssfsi+0x4c>
    123e:	b1 30       	cpi	r27, 0x01	; 1
    1240:	91 f0       	breq	.+36     	; 0x1266 <__fixunssfsi+0x4c>
    1242:	0e 94 aa 09 	call	0x1354	; 0x1354 <__fp_zero>
    1246:	b1 e0       	ldi	r27, 0x01	; 1
    1248:	08 95       	ret
    124a:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__fp_zero>
    124e:	67 2f       	mov	r22, r23
    1250:	78 2f       	mov	r23, r24
    1252:	88 27       	eor	r24, r24
    1254:	b8 5f       	subi	r27, 0xF8	; 248
    1256:	39 f0       	breq	.+14     	; 0x1266 <__fixunssfsi+0x4c>
    1258:	b9 3f       	cpi	r27, 0xF9	; 249
    125a:	cc f3       	brlt	.-14     	; 0x124e <__fixunssfsi+0x34>
    125c:	86 95       	lsr	r24
    125e:	77 95       	ror	r23
    1260:	67 95       	ror	r22
    1262:	b3 95       	inc	r27
    1264:	d9 f7       	brne	.-10     	; 0x125c <__fixunssfsi+0x42>
    1266:	3e f4       	brtc	.+14     	; 0x1276 <__fixunssfsi+0x5c>
    1268:	90 95       	com	r25
    126a:	80 95       	com	r24
    126c:	70 95       	com	r23
    126e:	61 95       	neg	r22
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	8f 4f       	sbci	r24, 0xFF	; 255
    1274:	9f 4f       	sbci	r25, 0xFF	; 255
    1276:	08 95       	ret

00001278 <__fp_cmp>:
    1278:	99 0f       	add	r25, r25
    127a:	00 08       	sbc	r0, r0
    127c:	55 0f       	add	r21, r21
    127e:	aa 0b       	sbc	r26, r26
    1280:	e0 e8       	ldi	r30, 0x80	; 128
    1282:	fe ef       	ldi	r31, 0xFE	; 254
    1284:	16 16       	cp	r1, r22
    1286:	17 06       	cpc	r1, r23
    1288:	e8 07       	cpc	r30, r24
    128a:	f9 07       	cpc	r31, r25
    128c:	c0 f0       	brcs	.+48     	; 0x12be <__fp_cmp+0x46>
    128e:	12 16       	cp	r1, r18
    1290:	13 06       	cpc	r1, r19
    1292:	e4 07       	cpc	r30, r20
    1294:	f5 07       	cpc	r31, r21
    1296:	98 f0       	brcs	.+38     	; 0x12be <__fp_cmp+0x46>
    1298:	62 1b       	sub	r22, r18
    129a:	73 0b       	sbc	r23, r19
    129c:	84 0b       	sbc	r24, r20
    129e:	95 0b       	sbc	r25, r21
    12a0:	39 f4       	brne	.+14     	; 0x12b0 <__fp_cmp+0x38>
    12a2:	0a 26       	eor	r0, r26
    12a4:	61 f0       	breq	.+24     	; 0x12be <__fp_cmp+0x46>
    12a6:	23 2b       	or	r18, r19
    12a8:	24 2b       	or	r18, r20
    12aa:	25 2b       	or	r18, r21
    12ac:	21 f4       	brne	.+8      	; 0x12b6 <__fp_cmp+0x3e>
    12ae:	08 95       	ret
    12b0:	0a 26       	eor	r0, r26
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <__fp_cmp+0x3e>
    12b4:	a1 40       	sbci	r26, 0x01	; 1
    12b6:	a6 95       	lsr	r26
    12b8:	8f ef       	ldi	r24, 0xFF	; 255
    12ba:	81 1d       	adc	r24, r1
    12bc:	81 1d       	adc	r24, r1
    12be:	08 95       	ret

000012c0 <__fp_inf>:
    12c0:	97 f9       	bld	r25, 7
    12c2:	9f 67       	ori	r25, 0x7F	; 127
    12c4:	80 e8       	ldi	r24, 0x80	; 128
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	08 95       	ret

000012cc <__fp_nan>:
    12cc:	9f ef       	ldi	r25, 0xFF	; 255
    12ce:	80 ec       	ldi	r24, 0xC0	; 192
    12d0:	08 95       	ret

000012d2 <__fp_pscA>:
    12d2:	00 24       	eor	r0, r0
    12d4:	0a 94       	dec	r0
    12d6:	16 16       	cp	r1, r22
    12d8:	17 06       	cpc	r1, r23
    12da:	18 06       	cpc	r1, r24
    12dc:	09 06       	cpc	r0, r25
    12de:	08 95       	ret

000012e0 <__fp_pscB>:
    12e0:	00 24       	eor	r0, r0
    12e2:	0a 94       	dec	r0
    12e4:	12 16       	cp	r1, r18
    12e6:	13 06       	cpc	r1, r19
    12e8:	14 06       	cpc	r1, r20
    12ea:	05 06       	cpc	r0, r21
    12ec:	08 95       	ret

000012ee <__fp_round>:
    12ee:	09 2e       	mov	r0, r25
    12f0:	03 94       	inc	r0
    12f2:	00 0c       	add	r0, r0
    12f4:	11 f4       	brne	.+4      	; 0x12fa <__fp_round+0xc>
    12f6:	88 23       	and	r24, r24
    12f8:	52 f0       	brmi	.+20     	; 0x130e <__fp_round+0x20>
    12fa:	bb 0f       	add	r27, r27
    12fc:	40 f4       	brcc	.+16     	; 0x130e <__fp_round+0x20>
    12fe:	bf 2b       	or	r27, r31
    1300:	11 f4       	brne	.+4      	; 0x1306 <__fp_round+0x18>
    1302:	60 ff       	sbrs	r22, 0
    1304:	04 c0       	rjmp	.+8      	; 0x130e <__fp_round+0x20>
    1306:	6f 5f       	subi	r22, 0xFF	; 255
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	8f 4f       	sbci	r24, 0xFF	; 255
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	08 95       	ret

00001310 <__fp_split3>:
    1310:	57 fd       	sbrc	r21, 7
    1312:	90 58       	subi	r25, 0x80	; 128
    1314:	44 0f       	add	r20, r20
    1316:	55 1f       	adc	r21, r21
    1318:	59 f0       	breq	.+22     	; 0x1330 <__fp_splitA+0x10>
    131a:	5f 3f       	cpi	r21, 0xFF	; 255
    131c:	71 f0       	breq	.+28     	; 0x133a <__fp_splitA+0x1a>
    131e:	47 95       	ror	r20

00001320 <__fp_splitA>:
    1320:	88 0f       	add	r24, r24
    1322:	97 fb       	bst	r25, 7
    1324:	99 1f       	adc	r25, r25
    1326:	61 f0       	breq	.+24     	; 0x1340 <__fp_splitA+0x20>
    1328:	9f 3f       	cpi	r25, 0xFF	; 255
    132a:	79 f0       	breq	.+30     	; 0x134a <__fp_splitA+0x2a>
    132c:	87 95       	ror	r24
    132e:	08 95       	ret
    1330:	12 16       	cp	r1, r18
    1332:	13 06       	cpc	r1, r19
    1334:	14 06       	cpc	r1, r20
    1336:	55 1f       	adc	r21, r21
    1338:	f2 cf       	rjmp	.-28     	; 0x131e <__fp_split3+0xe>
    133a:	46 95       	lsr	r20
    133c:	f1 df       	rcall	.-30     	; 0x1320 <__fp_splitA>
    133e:	08 c0       	rjmp	.+16     	; 0x1350 <__fp_splitA+0x30>
    1340:	16 16       	cp	r1, r22
    1342:	17 06       	cpc	r1, r23
    1344:	18 06       	cpc	r1, r24
    1346:	99 1f       	adc	r25, r25
    1348:	f1 cf       	rjmp	.-30     	; 0x132c <__fp_splitA+0xc>
    134a:	86 95       	lsr	r24
    134c:	71 05       	cpc	r23, r1
    134e:	61 05       	cpc	r22, r1
    1350:	08 94       	sec
    1352:	08 95       	ret

00001354 <__fp_zero>:
    1354:	e8 94       	clt

00001356 <__fp_szero>:
    1356:	bb 27       	eor	r27, r27
    1358:	66 27       	eor	r22, r22
    135a:	77 27       	eor	r23, r23
    135c:	cb 01       	movw	r24, r22
    135e:	97 f9       	bld	r25, 7
    1360:	08 95       	ret

00001362 <__gesf2>:
    1362:	0e 94 3c 09 	call	0x1278	; 0x1278 <__fp_cmp>
    1366:	08 f4       	brcc	.+2      	; 0x136a <__gesf2+0x8>
    1368:	8f ef       	ldi	r24, 0xFF	; 255
    136a:	08 95       	ret

0000136c <__mulsf3>:
    136c:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3x>
    1370:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__fp_round>
    1374:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fp_pscA>
    1378:	38 f0       	brcs	.+14     	; 0x1388 <__mulsf3+0x1c>
    137a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fp_pscB>
    137e:	20 f0       	brcs	.+8      	; 0x1388 <__mulsf3+0x1c>
    1380:	95 23       	and	r25, r21
    1382:	11 f0       	breq	.+4      	; 0x1388 <__mulsf3+0x1c>
    1384:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__fp_inf>
    1388:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__fp_nan>
    138c:	11 24       	eor	r1, r1
    138e:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_szero>

00001392 <__mulsf3x>:
    1392:	0e 94 88 09 	call	0x1310	; 0x1310 <__fp_split3>
    1396:	70 f3       	brcs	.-36     	; 0x1374 <__mulsf3+0x8>

00001398 <__mulsf3_pse>:
    1398:	95 9f       	mul	r25, r21
    139a:	c1 f3       	breq	.-16     	; 0x138c <__mulsf3+0x20>
    139c:	95 0f       	add	r25, r21
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	55 1f       	adc	r21, r21
    13a2:	62 9f       	mul	r22, r18
    13a4:	f0 01       	movw	r30, r0
    13a6:	72 9f       	mul	r23, r18
    13a8:	bb 27       	eor	r27, r27
    13aa:	f0 0d       	add	r31, r0
    13ac:	b1 1d       	adc	r27, r1
    13ae:	63 9f       	mul	r22, r19
    13b0:	aa 27       	eor	r26, r26
    13b2:	f0 0d       	add	r31, r0
    13b4:	b1 1d       	adc	r27, r1
    13b6:	aa 1f       	adc	r26, r26
    13b8:	64 9f       	mul	r22, r20
    13ba:	66 27       	eor	r22, r22
    13bc:	b0 0d       	add	r27, r0
    13be:	a1 1d       	adc	r26, r1
    13c0:	66 1f       	adc	r22, r22
    13c2:	82 9f       	mul	r24, r18
    13c4:	22 27       	eor	r18, r18
    13c6:	b0 0d       	add	r27, r0
    13c8:	a1 1d       	adc	r26, r1
    13ca:	62 1f       	adc	r22, r18
    13cc:	73 9f       	mul	r23, r19
    13ce:	b0 0d       	add	r27, r0
    13d0:	a1 1d       	adc	r26, r1
    13d2:	62 1f       	adc	r22, r18
    13d4:	83 9f       	mul	r24, r19
    13d6:	a0 0d       	add	r26, r0
    13d8:	61 1d       	adc	r22, r1
    13da:	22 1f       	adc	r18, r18
    13dc:	74 9f       	mul	r23, r20
    13de:	33 27       	eor	r19, r19
    13e0:	a0 0d       	add	r26, r0
    13e2:	61 1d       	adc	r22, r1
    13e4:	23 1f       	adc	r18, r19
    13e6:	84 9f       	mul	r24, r20
    13e8:	60 0d       	add	r22, r0
    13ea:	21 1d       	adc	r18, r1
    13ec:	82 2f       	mov	r24, r18
    13ee:	76 2f       	mov	r23, r22
    13f0:	6a 2f       	mov	r22, r26
    13f2:	11 24       	eor	r1, r1
    13f4:	9f 57       	subi	r25, 0x7F	; 127
    13f6:	50 40       	sbci	r21, 0x00	; 0
    13f8:	9a f0       	brmi	.+38     	; 0x1420 <__mulsf3_pse+0x88>
    13fa:	f1 f0       	breq	.+60     	; 0x1438 <__mulsf3_pse+0xa0>
    13fc:	88 23       	and	r24, r24
    13fe:	4a f0       	brmi	.+18     	; 0x1412 <__mulsf3_pse+0x7a>
    1400:	ee 0f       	add	r30, r30
    1402:	ff 1f       	adc	r31, r31
    1404:	bb 1f       	adc	r27, r27
    1406:	66 1f       	adc	r22, r22
    1408:	77 1f       	adc	r23, r23
    140a:	88 1f       	adc	r24, r24
    140c:	91 50       	subi	r25, 0x01	; 1
    140e:	50 40       	sbci	r21, 0x00	; 0
    1410:	a9 f7       	brne	.-22     	; 0x13fc <__mulsf3_pse+0x64>
    1412:	9e 3f       	cpi	r25, 0xFE	; 254
    1414:	51 05       	cpc	r21, r1
    1416:	80 f0       	brcs	.+32     	; 0x1438 <__mulsf3_pse+0xa0>
    1418:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__fp_inf>
    141c:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_szero>
    1420:	5f 3f       	cpi	r21, 0xFF	; 255
    1422:	e4 f3       	brlt	.-8      	; 0x141c <__mulsf3_pse+0x84>
    1424:	98 3e       	cpi	r25, 0xE8	; 232
    1426:	d4 f3       	brlt	.-12     	; 0x141c <__mulsf3_pse+0x84>
    1428:	86 95       	lsr	r24
    142a:	77 95       	ror	r23
    142c:	67 95       	ror	r22
    142e:	b7 95       	ror	r27
    1430:	f7 95       	ror	r31
    1432:	e7 95       	ror	r30
    1434:	9f 5f       	subi	r25, 0xFF	; 255
    1436:	c1 f7       	brne	.-16     	; 0x1428 <__mulsf3_pse+0x90>
    1438:	fe 2b       	or	r31, r30
    143a:	88 0f       	add	r24, r24
    143c:	91 1d       	adc	r25, r1
    143e:	96 95       	lsr	r25
    1440:	87 95       	ror	r24
    1442:	97 f9       	bld	r25, 7
    1444:	08 95       	ret

00001446 <__tablejump2__>:
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	05 90       	lpm	r0, Z+
    144c:	f4 91       	lpm	r31, Z
    144e:	e0 2d       	mov	r30, r0
    1450:	09 94       	ijmp

00001452 <_exit>:
    1452:	f8 94       	cli

00001454 <__stop_program>:
    1454:	ff cf       	rjmp	.-2      	; 0x1454 <__stop_program>
