
piano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00001970  000019e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001970  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00001a2e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a8c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001959  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a49  00000000  00000000  000034fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e3b  00000000  00000000  00003f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000348  00000000  00000000  00004d84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f1  00000000  00000000  000050cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000191c  00000000  00000000  000056bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  00006fd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__vector_1>
       8:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__vector_2>
       c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      68:	9f 05       	cpc	r25, r15
      6a:	a6 05       	cpc	r26, r6
      6c:	ad 05       	cpc	r26, r13
      6e:	b4 05       	cpc	r27, r4
      70:	bb 05       	cpc	r27, r11
      72:	c2 05       	cpc	r28, r2
      74:	c9 05       	cpc	r28, r9
      76:	d0 05       	cpc	r29, r0
      78:	f2 05       	cpc	r31, r2
      7a:	f9 05       	cpc	r31, r9
      7c:	00 06       	cpc	r0, r16
      7e:	07 06       	cpc	r0, r23
      80:	0e 06       	cpc	r0, r30
      82:	15 06       	cpc	r1, r21
      84:	1c 06       	cpc	r1, r28
      86:	23 06       	cpc	r2, r19
      88:	46 06       	cpc	r4, r22
      8a:	4d 06       	cpc	r4, r29
      8c:	54 06       	cpc	r5, r20
      8e:	5b 06       	cpc	r5, r27
      90:	62 06       	cpc	r6, r18
      92:	69 06       	cpc	r6, r25
      94:	70 06       	cpc	r7, r16
      96:	77 06       	cpc	r7, r23

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e0 e7       	ldi	r30, 0x70	; 112
      ac:	f9 e1       	ldi	r31, 0x19	; 25
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 34       	cpi	r26, 0x4A	; 74
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>
      ba:	0e 94 ff 06 	call	0xdfe	; 0xdfe <main>
      be:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <_exit>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <lcd_send_command>:
	
}

void lcd_send_command (uint8_t command)
{
	DATA_BUS=(command&0b11110000);
      c6:	98 2f       	mov	r25, r24
      c8:	90 7f       	andi	r25, 0xF0	; 240
      ca:	9b b9       	out	0x0b, r25	; 11
	CTL_BUS &=~(1<<LCD_RS);
      cc:	43 98       	cbi	0x08, 3	; 8
	CTL_BUS |=(1<<LCD_EN);
      ce:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d0:	ef e9       	ldi	r30, 0x9F	; 159
      d2:	ff e0       	ldi	r31, 0x0F	; 15
      d4:	31 97       	sbiw	r30, 0x01	; 1
      d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_send_command+0xe>
      d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_send_command+0x14>
      da:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
      dc:	45 98       	cbi	0x08, 5	; 8
      de:	ef e9       	ldi	r30, 0x9F	; 159
      e0:	ff e0       	ldi	r31, 0x0F	; 15
      e2:	31 97       	sbiw	r30, 0x01	; 1
      e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_send_command+0x1c>
      e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_send_command+0x22>
      e8:	00 00       	nop
	_delay_ms(1);
	DATA_BUS=((command&0b00001111)<<4);
      ea:	f0 e1       	ldi	r31, 0x10	; 16
      ec:	8f 9f       	mul	r24, r31
      ee:	c0 01       	movw	r24, r0
      f0:	11 24       	eor	r1, r1
      f2:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS |=(1<<LCD_EN);
      f4:	45 9a       	sbi	0x08, 5	; 8
      f6:	8f e9       	ldi	r24, 0x9F	; 159
      f8:	9f e0       	ldi	r25, 0x0F	; 15
      fa:	01 97       	sbiw	r24, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_send_command+0x34>
      fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_send_command+0x3a>
     100:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
     102:	45 98       	cbi	0x08, 5	; 8
     104:	ef e9       	ldi	r30, 0x9F	; 159
     106:	ff e0       	ldi	r31, 0x0F	; 15
     108:	31 97       	sbiw	r30, 0x01	; 1
     10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_send_command+0x42>
     10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_send_command+0x48>
     10e:	00 00       	nop
     110:	08 95       	ret

00000112 <lcd_init>:


void lcd_init(void)
{
	
	DATA_DDR = (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5)| (1<<LCD_D4);
     112:	80 ef       	ldi	r24, 0xF0	; 240
     114:	8a b9       	out	0x0a, r24	; 10
	CTL_DDR |= (1<<LCD_EN)|(1<<LCD_RW)|(1<<LCD_RS);
     116:	87 b1       	in	r24, 0x07	; 7
     118:	88 63       	ori	r24, 0x38	; 56
     11a:	87 b9       	out	0x07, r24	; 7

	
	DATA_BUS = (0<<LCD_D7)|(0<<LCD_D6)|(1<<LCD_D5)|(0<<LCD_D4);
     11c:	80 e2       	ldi	r24, 0x20	; 32
     11e:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS|= (1<<LCD_EN)|(0<<LCD_RW)|(0<<LCD_RS);
     120:	45 9a       	sbi	0x08, 5	; 8
     122:	8f e9       	ldi	r24, 0x9F	; 159
     124:	9f e0       	ldi	r25, 0x0F	; 15
     126:	01 97       	sbiw	r24, 0x01	; 1
     128:	f1 f7       	brne	.-4      	; 0x126 <lcd_init+0x14>
     12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_init+0x1a>
     12c:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
     12e:	45 98       	cbi	0x08, 5	; 8
     130:	8f e9       	ldi	r24, 0x9F	; 159
     132:	9f e0       	ldi	r25, 0x0F	; 15
     134:	01 97       	sbiw	r24, 0x01	; 1
     136:	f1 f7       	brne	.-4      	; 0x134 <lcd_init+0x22>
     138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_init+0x28>
     13a:	00 00       	nop
	_delay_ms(1);
	
	lcd_send_command(LCD_CMD_4BIT_2ROW_5X7);
     13c:	88 e2       	ldi	r24, 0x28	; 40
     13e:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
     142:	8f e9       	ldi	r24, 0x9F	; 159
     144:	9f e0       	ldi	r25, 0x0F	; 15
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <lcd_init+0x34>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_init+0x3a>
     14c:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(LCD_CMD_DISPLAY_NO_CURSOR);
     14e:	8c e0       	ldi	r24, 0x0C	; 12
     150:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
     154:	8f e9       	ldi	r24, 0x9F	; 159
     156:	9f e0       	ldi	r25, 0x0F	; 15
     158:	01 97       	sbiw	r24, 0x01	; 1
     15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_init+0x46>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <lcd_init+0x4c>
     15e:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(0x80);
     160:	80 e8       	ldi	r24, 0x80	; 128
     162:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
     166:	08 95       	ret

00000168 <lcd_write_character>:
	}
}
void lcd_write_character(uint8_t character)
{
	
	DATA_BUS=(character & 0b11110000);
     168:	98 2f       	mov	r25, r24
     16a:	90 7f       	andi	r25, 0xF0	; 240
     16c:	9b b9       	out	0x0b, r25	; 11
	CTL_BUS|=(1<<LCD_RS);
     16e:	43 9a       	sbi	0x08, 3	; 8
	CTL_BUS |=(1<<LCD_EN);
     170:	45 9a       	sbi	0x08, 5	; 8
     172:	ef e3       	ldi	r30, 0x3F	; 63
     174:	ff e1       	ldi	r31, 0x1F	; 31
     176:	31 97       	sbiw	r30, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <lcd_write_character+0xe>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_write_character+0x14>
     17c:	00 00       	nop
	_delay_ms(2);
	CTL_BUS &=~(1<<LCD_EN);
     17e:	45 98       	cbi	0x08, 5	; 8
     180:	ef e3       	ldi	r30, 0x3F	; 63
     182:	ff e1       	ldi	r31, 0x1F	; 31
     184:	31 97       	sbiw	r30, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_write_character+0x1c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_write_character+0x22>
     18a:	00 00       	nop
	_delay_ms(2);
	DATA_BUS=((character & 0b00001111)<<4);
     18c:	f0 e1       	ldi	r31, 0x10	; 16
     18e:	8f 9f       	mul	r24, r31
     190:	c0 01       	movw	r24, r0
     192:	11 24       	eor	r1, r1
     194:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS |=(1<<LCD_EN);
     196:	45 9a       	sbi	0x08, 5	; 8
     198:	8f e3       	ldi	r24, 0x3F	; 63
     19a:	9f e1       	ldi	r25, 0x1F	; 31
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_write_character+0x34>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_write_character+0x3a>
     1a2:	00 00       	nop
	_delay_ms(2);
	CTL_BUS &=~(1<<LCD_EN);
     1a4:	45 98       	cbi	0x08, 5	; 8
     1a6:	ef e3       	ldi	r30, 0x3F	; 63
     1a8:	ff e1       	ldi	r31, 0x1F	; 31
     1aa:	31 97       	sbiw	r30, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_write_character+0x42>
     1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_write_character+0x48>
     1b0:	00 00       	nop
     1b2:	08 95       	ret

000001b4 <lcd_write_word>:
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
	_delay_ms(1);
}
void lcd_write_word(uint8_t word[20])
{
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	ec 01       	movw	r28, r24
	int i=0;
	while(word[i]!='\0')
     1ba:	88 81       	ld	r24, Y
     1bc:	88 23       	and	r24, r24
     1be:	31 f0       	breq	.+12     	; 0x1cc <lcd_write_word+0x18>
     1c0:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_write_character(word[i]);
     1c2:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_write_character>
	_delay_ms(1);
}
void lcd_write_word(uint8_t word[20])
{
	int i=0;
	while(word[i]!='\0')
     1c6:	89 91       	ld	r24, Y+
     1c8:	81 11       	cpse	r24, r1
     1ca:	fb cf       	rjmp	.-10     	; 0x1c2 <lcd_write_word+0xe>
	{
		lcd_write_character(word[i]);
		i++;
	}
}
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	08 95       	ret

000001d2 <lcd_clear>:
	_delay_ms(2);
	
}
void lcd_clear(void)
{
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
     1d8:	08 95       	ret

000001da <lcd_goto_xy>:
	
}
void lcd_goto_xy (uint8_t line,uint8_t pos)				//line = 0 or 1
{
	lcd_send_command((0x80|(line<<6))+pos);
     1da:	20 e4       	ldi	r18, 0x40	; 64
     1dc:	82 9f       	mul	r24, r18
     1de:	c0 01       	movw	r24, r0
     1e0:	11 24       	eor	r1, r1
     1e2:	80 68       	ori	r24, 0x80	; 128
     1e4:	86 0f       	add	r24, r22
     1e6:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ea:	87 ec       	ldi	r24, 0xC7	; 199
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_goto_xy+0x14>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_goto_xy+0x1a>
     1f4:	00 00       	nop
     1f6:	08 95       	ret

000001f8 <USART_Init>:
#define DATA_BIT   (3<<UCSZ00)  // USART Data Bit Selection

void USART_Init()
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
     1f8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALER;
     1fc:	87 e6       	ldi	r24, 0x67	; 103
     1fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
     202:	86 e0       	ldi	r24, 0x06	; 6
     204:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     208:	88 e1       	ldi	r24, 0x18	; 24
     20a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     20e:	08 95       	ret

00000210 <USART_TransmitChar>:
}


void USART_TransmitChar(uint8_t DataByte) {
	while (!(UCSR0A & (1<<UDRE0))); // Wait until UDR is ready
     210:	e0 ec       	ldi	r30, 0xC0	; 192
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	90 81       	ld	r25, Z
     216:	95 ff       	sbrs	r25, 5
     218:	fd cf       	rjmp	.-6      	; 0x214 <USART_TransmitChar+0x4>
	UDR0 = DataByte;
     21a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     21e:	08 95       	ret

00000220 <USART_TransmitString>:
}

void USART_TransmitString(char *str) {
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	ec 01       	movw	r28, r24
	while (*str) {
     226:	88 81       	ld	r24, Y
     228:	88 23       	and	r24, r24
     22a:	31 f0       	breq	.+12     	; 0x238 <USART_TransmitString+0x18>
     22c:	21 96       	adiw	r28, 0x01	; 1
		USART_TransmitChar(*str);
     22e:	0e 94 08 01 	call	0x210	; 0x210 <USART_TransmitChar>
	while (!(UCSR0A & (1<<UDRE0))); // Wait until UDR is ready
	UDR0 = DataByte;
}

void USART_TransmitString(char *str) {
	while (*str) {
     232:	89 91       	ld	r24, Y+
     234:	81 11       	cpse	r24, r1
     236:	fb cf       	rjmp	.-10     	; 0x22e <USART_TransmitString+0xe>
		USART_TransmitChar(*str);
		str++;
	}
}
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	08 95       	ret

0000023e <USART_TransmitInteger>:

void USART_TransmitInteger(int value) {
     23e:	0f 93       	push	r16
     240:	1f 93       	push	r17
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
     24a:	2a 97       	sbiw	r28, 0x0a	; 10
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
	char buffer[10]; // Assuming a maximum of 10 digits for the integer
	sprintf(buffer, "%d", value);
     256:	9f 93       	push	r25
     258:	8f 93       	push	r24
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	9f 93       	push	r25
     260:	8f 93       	push	r24
     262:	8e 01       	movw	r16, r28
     264:	0f 5f       	subi	r16, 0xFF	; 255
     266:	1f 4f       	sbci	r17, 0xFF	; 255
     268:	1f 93       	push	r17
     26a:	0f 93       	push	r16
     26c:	0e 94 cc 09 	call	0x1398	; 0x1398 <sprintf>
	USART_TransmitString(buffer);
     270:	c8 01       	movw	r24, r16
     272:	0e 94 10 01 	call	0x220	; 0x220 <USART_TransmitString>
}
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	2a 96       	adiw	r28, 0x0a	; 10
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	f8 94       	cli
     288:	de bf       	out	0x3e, r29	; 62
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	cd bf       	out	0x3d, r28	; 61
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	08 95       	ret

00000298 <USART_TransmitFixedPoint>:

void USART_TransmitFixedPoint(float value) {
     298:	8f 92       	push	r8
     29a:	9f 92       	push	r9
     29c:	af 92       	push	r10
     29e:	bf 92       	push	r11
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	4b 01       	movw	r8, r22
     2aa:	5c 01       	movw	r10, r24
	int integer_part = (int)value;
     2ac:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fixsfsi>
     2b0:	6b 01       	movw	r12, r22
     2b2:	7c 01       	movw	r14, r24
	USART_TransmitInteger(integer_part);
     2b4:	cb 01       	movw	r24, r22
     2b6:	0e 94 1f 01 	call	0x23e	; 0x23e <USART_TransmitInteger>
	USART_TransmitChar('.');
     2ba:	8e e2       	ldi	r24, 0x2E	; 46
     2bc:	0e 94 08 01 	call	0x210	; 0x210 <USART_TransmitChar>
	int fractional_part = (int)((value - integer_part) * 10000);
	USART_TransmitInteger(fractional_part);
     2c0:	b6 01       	movw	r22, r12
     2c2:	dd 0c       	add	r13, r13
     2c4:	88 0b       	sbc	r24, r24
     2c6:	99 0b       	sbc	r25, r25
     2c8:	0e 94 a4 08 	call	0x1148	; 0x1148 <__floatsisf>
     2cc:	9b 01       	movw	r18, r22
     2ce:	ac 01       	movw	r20, r24
     2d0:	c5 01       	movw	r24, r10
     2d2:	b4 01       	movw	r22, r8
     2d4:	0e 94 88 07 	call	0xf10	; 0xf10 <__subsf3>
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e4       	ldi	r19, 0x40	; 64
     2dc:	4c e1       	ldi	r20, 0x1C	; 28
     2de:	56 e4       	ldi	r21, 0x46	; 70
     2e0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     2e4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fixsfsi>
     2e8:	cb 01       	movw	r24, r22
     2ea:	0e 94 1f 01 	call	0x23e	; 0x23e <USART_TransmitInteger>
}
     2ee:	ff 90       	pop	r15
     2f0:	ef 90       	pop	r14
     2f2:	df 90       	pop	r13
     2f4:	cf 90       	pop	r12
     2f6:	bf 90       	pop	r11
     2f8:	af 90       	pop	r10
     2fa:	9f 90       	pop	r9
     2fc:	8f 90       	pop	r8
     2fe:	08 95       	ret

00000300 <Play_Sound_violin>:


void Play_Sound_violin(float frequency)
{
     300:	2f 92       	push	r2
     302:	3f 92       	push	r3
     304:	4f 92       	push	r4
     306:	5f 92       	push	r5
     308:	6f 92       	push	r6
     30a:	7f 92       	push	r7
     30c:	8f 92       	push	r8
     30e:	9f 92       	push	r9
     310:	af 92       	push	r10
     312:	bf 92       	push	r11
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	6c 97       	sbiw	r28, 0x1c	; 28
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
     334:	69 83       	std	Y+1, r22	; 0x01
     336:	7a 83       	std	Y+2, r23	; 0x02
     338:	8b 83       	std	Y+3, r24	; 0x03
     33a:	9c 83       	std	Y+4, r25	; 0x04
	long int i,cycles;
	float wavelength = 1.25;

	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);
     33c:	23 9a       	sbi	0x04, 3	; 4


		for(int j=0;j<20;j++){
			_delay_ms(frequency / 10.5);
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	48 e2       	ldi	r20, 0x28	; 40
     344:	51 e4       	ldi	r21, 0x41	; 65
     346:	69 81       	ldd	r22, Y+1	; 0x01
     348:	7a 81       	ldd	r23, Y+2	; 0x02
     34a:	8b 81       	ldd	r24, Y+3	; 0x03
     34c:	9c 81       	ldd	r25, Y+4	; 0x04
     34e:	0e 94 fa 07 	call	0xff4	; 0xff4 <__divsf3>
     352:	6d 83       	std	Y+5, r22	; 0x05
     354:	7e 83       	std	Y+6, r23	; 0x06
     356:	8f 83       	std	Y+7, r24	; 0x07
     358:	98 87       	std	Y+8, r25	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	4a e7       	ldi	r20, 0x7A	; 122
     360:	55 e4       	ldi	r21, 0x45	; 69
     362:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     366:	2b 01       	movw	r4, r22
     368:	3c 01       	movw	r6, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     36a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
     36e:	6b 01       	movw	r12, r22
     370:	7c 01       	movw	r14, r24
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	40 e8       	ldi	r20, 0x80	; 128
     378:	5f e3       	ldi	r21, 0x3F	; 63
     37a:	c3 01       	movw	r24, r6
     37c:	b2 01       	movw	r22, r4
     37e:	0e 94 f5 07 	call	0xfea	; 0xfea <__cmpsf2>
     382:	88 23       	and	r24, r24
     384:	1c f4       	brge	.+6      	; 0x38c <Play_Sound_violin+0x8c>
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	02 c0       	rjmp	.+4      	; 0x390 <Play_Sound_violin+0x90>
     38c:	9c 2d       	mov	r25, r12
     38e:	8d 2d       	mov	r24, r13
     390:	29 2e       	mov	r2, r25
     392:	38 2e       	mov	r3, r24
     394:	84 e1       	ldi	r24, 0x14	; 20
     396:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     398:	00 e9       	ldi	r16, 0x90	; 144
     39a:	11 e0       	ldi	r17, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     39c:	9a 87       	std	Y+10, r25	; 0x0a
     39e:	89 87       	std	Y+9, r24	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	40 e8       	ldi	r20, 0x80	; 128
     3a6:	5f e3       	ldi	r21, 0x3F	; 63
     3a8:	c3 01       	movw	r24, r6
     3aa:	b2 01       	movw	r22, r4
     3ac:	0e 94 f5 07 	call	0xfea	; 0xfea <__cmpsf2>
     3b0:	88 23       	and	r24, r24
     3b2:	04 f1       	brlt	.+64     	; 0x3f4 <Play_Sound_violin+0xf4>
		__ticks = 1;
	else if (__tmp > 65535)
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	3f ef       	ldi	r19, 0xFF	; 255
     3b8:	4f e7       	ldi	r20, 0x7F	; 127
     3ba:	57 e4       	ldi	r21, 0x47	; 71
     3bc:	c3 01       	movw	r24, r6
     3be:	b2 01       	movw	r22, r4
     3c0:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__gesf2>
     3c4:	18 16       	cp	r1, r24
     3c6:	b4 f4       	brge	.+44     	; 0x3f4 <Play_Sound_violin+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	40 e2       	ldi	r20, 0x20	; 32
     3ce:	51 e4       	ldi	r21, 0x41	; 65
     3d0:	6d 81       	ldd	r22, Y+5	; 0x05
     3d2:	7e 81       	ldd	r23, Y+6	; 0x06
     3d4:	8f 81       	ldd	r24, Y+7	; 0x07
     3d6:	98 85       	ldd	r25, Y+8	; 0x08
     3d8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     3dc:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
		while(__ticks)
     3e0:	61 15       	cp	r22, r1
     3e2:	71 05       	cpc	r23, r1
     3e4:	51 f0       	breq	.+20     	; 0x3fa <Play_Sound_violin+0xfa>
     3e6:	c8 01       	movw	r24, r16
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <Play_Sound_violin+0xe8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3ec:	61 50       	subi	r22, 0x01	; 1
     3ee:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3f0:	d1 f7       	brne	.-12     	; 0x3e6 <Play_Sound_violin+0xe6>
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <Play_Sound_violin+0xfa>
     3f4:	c1 01       	movw	r24, r2
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <Play_Sound_violin+0xf6>
			BUZZER_PORT |= (1 << BUZZER_PIN);
     3fa:	2b 9a       	sbi	0x05, 3	; 5
			_delay_ms(22 * frequency / 10.5); // Ensuring the same duty cycle for both on and off times
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	40 eb       	ldi	r20, 0xB0	; 176
     402:	51 e4       	ldi	r21, 0x41	; 65
     404:	69 81       	ldd	r22, Y+1	; 0x01
     406:	7a 81       	ldd	r23, Y+2	; 0x02
     408:	8b 81       	ldd	r24, Y+3	; 0x03
     40a:	9c 81       	ldd	r25, Y+4	; 0x04
     40c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	48 e2       	ldi	r20, 0x28	; 40
     416:	51 e4       	ldi	r21, 0x41	; 65
     418:	0e 94 fa 07 	call	0xff4	; 0xff4 <__divsf3>
     41c:	6b 01       	movw	r12, r22
     41e:	7c 01       	movw	r14, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	4a e7       	ldi	r20, 0x7A	; 122
     426:	55 e4       	ldi	r21, 0x45	; 69
     428:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     42c:	4b 01       	movw	r8, r22
     42e:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	40 e8       	ldi	r20, 0x80	; 128
     436:	5f e3       	ldi	r21, 0x3F	; 63
     438:	0e 94 f5 07 	call	0xfea	; 0xfea <__cmpsf2>
     43c:	88 23       	and	r24, r24
     43e:	1c f1       	brlt	.+70     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		__ticks = 1;
	else if (__tmp > 65535)
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	3f ef       	ldi	r19, 0xFF	; 255
     444:	4f e7       	ldi	r20, 0x7F	; 127
     446:	57 e4       	ldi	r21, 0x47	; 71
     448:	c5 01       	movw	r24, r10
     44a:	b4 01       	movw	r22, r8
     44c:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__gesf2>
     450:	18 16       	cp	r1, r24
     452:	a4 f4       	brge	.+40     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	40 e2       	ldi	r20, 0x20	; 32
     45a:	51 e4       	ldi	r21, 0x41	; 65
     45c:	c7 01       	movw	r24, r14
     45e:	b6 01       	movw	r22, r12
     460:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     464:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
		while(__ticks)
     468:	61 15       	cp	r22, r1
     46a:	71 05       	cpc	r23, r1
     46c:	89 f0       	breq	.+34     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     46e:	c8 01       	movw	r24, r16
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     474:	61 50       	subi	r22, 0x01	; 1
     476:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     478:	d1 f7       	brne	.-12     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     47a:	0a c0       	rjmp	.+20     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     47c:	c5 01       	movw	r24, r10
     47e:	b4 01       	movw	r22, r8
     480:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
     484:	02 c0       	rjmp	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     486:	61 e0       	ldi	r22, 0x01	; 1
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	cb 01       	movw	r24, r22
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     490:	2b 98       	cbi	0x05, 3	; 5
     492:	89 85       	ldd	r24, Y+9	; 0x09
     494:	9a 85       	ldd	r25, Y+10	; 0x0a
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	9a 87       	std	Y+10, r25	; 0x0a
     49a:	89 87       	std	Y+9, r24	; 0x09
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);


		for(int j=0;j<20;j++){
     49c:	89 2b       	or	r24, r25
     49e:	09 f0       	breq	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4a0:	7f cf       	rjmp	.-258    	; 0x3a0 <Play_Sound_violin+0xa0>
			BUZZER_PORT |= (1 << BUZZER_PIN);
			_delay_ms(22 * frequency / 10.5); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		for(int j=0;j<10;j++){
			_delay_ms(frequency / 10.55);
     4a2:	2d ec       	ldi	r18, 0xCD	; 205
     4a4:	3c ec       	ldi	r19, 0xCC	; 204
     4a6:	48 e2       	ldi	r20, 0x28	; 40
     4a8:	51 e4       	ldi	r21, 0x41	; 65
     4aa:	69 81       	ldd	r22, Y+1	; 0x01
     4ac:	7a 81       	ldd	r23, Y+2	; 0x02
     4ae:	8b 81       	ldd	r24, Y+3	; 0x03
     4b0:	9c 81       	ldd	r25, Y+4	; 0x04
     4b2:	0e 94 fa 07 	call	0xff4	; 0xff4 <__divsf3>
     4b6:	6d 87       	std	Y+13, r22	; 0x0d
     4b8:	7e 87       	std	Y+14, r23	; 0x0e
     4ba:	8f 87       	std	Y+15, r24	; 0x0f
     4bc:	98 8b       	std	Y+16, r25	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	4a e7       	ldi	r20, 0x7A	; 122
     4c4:	55 e4       	ldi	r21, 0x45	; 69
     4c6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     4ca:	2b 01       	movw	r4, r22
     4cc:	3c 01       	movw	r6, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4ce:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
     4d2:	6b 01       	movw	r12, r22
     4d4:	7c 01       	movw	r14, r24
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	40 e8       	ldi	r20, 0x80	; 128
     4dc:	5f e3       	ldi	r21, 0x3F	; 63
     4de:	c3 01       	movw	r24, r6
     4e0:	b2 01       	movw	r22, r4
     4e2:	0e 94 f5 07 	call	0xfea	; 0xfea <__cmpsf2>
     4e6:	88 23       	and	r24, r24
     4e8:	1c f4       	brge	.+6      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f0:	9c 2d       	mov	r25, r12
     4f2:	8d 2d       	mov	r24, r13
     4f4:	29 2e       	mov	r2, r25
     4f6:	38 2e       	mov	r3, r24
     4f8:	8a e0       	ldi	r24, 0x0A	; 10
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	00 e9       	ldi	r16, 0x90	; 144
     4fe:	11 e0       	ldi	r17, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     500:	bb 24       	eor	r11, r11
     502:	b3 94       	inc	r11
     504:	a1 2c       	mov	r10, r1
     506:	9a 8b       	std	Y+18, r25	; 0x12
     508:	89 8b       	std	Y+17, r24	; 0x11
     50a:	bd 82       	std	Y+5, r11	; 0x05
     50c:	a9 86       	std	Y+9, r10	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	40 e8       	ldi	r20, 0x80	; 128
     514:	5f e3       	ldi	r21, 0x3F	; 63
     516:	c3 01       	movw	r24, r6
     518:	b2 01       	movw	r22, r4
     51a:	0e 94 f5 07 	call	0xfea	; 0xfea <__cmpsf2>
     51e:	88 23       	and	r24, r24
     520:	04 f1       	brlt	.+64     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		__ticks = 1;
	else if (__tmp > 65535)
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	3f ef       	ldi	r19, 0xFF	; 255
     526:	4f e7       	ldi	r20, 0x7F	; 127
     528:	57 e4       	ldi	r21, 0x47	; 71
     52a:	c3 01       	movw	r24, r6
     52c:	b2 01       	movw	r22, r4
     52e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__gesf2>
     532:	18 16       	cp	r1, r24
     534:	b4 f4       	brge	.+44     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	40 e2       	ldi	r20, 0x20	; 32
     53c:	51 e4       	ldi	r21, 0x41	; 65
     53e:	6d 85       	ldd	r22, Y+13	; 0x0d
     540:	7e 85       	ldd	r23, Y+14	; 0x0e
     542:	8f 85       	ldd	r24, Y+15	; 0x0f
     544:	98 89       	ldd	r25, Y+16	; 0x10
     546:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     54a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
		while(__ticks)
     54e:	61 15       	cp	r22, r1
     550:	71 05       	cpc	r23, r1
     552:	51 f0       	breq	.+20     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
     554:	c8 01       	movw	r24, r16
     556:	01 97       	sbiw	r24, 0x01	; 1
     558:	f1 f7       	brne	.-4      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     55a:	61 50       	subi	r22, 0x01	; 1
     55c:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     55e:	d1 f7       	brne	.-12     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     560:	03 c0       	rjmp	.+6      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
     562:	c1 01       	movw	r24, r2
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			BUZZER_PORT |= (1 << BUZZER_PIN);
     568:	2b 9a       	sbi	0x05, 3	; 5
			_delay_ms(22.1 * frequency / 10.55); // Ensuring the same duty cycle for both on and off times
     56a:	2d ec       	ldi	r18, 0xCD	; 205
     56c:	3c ec       	ldi	r19, 0xCC	; 204
     56e:	40 eb       	ldi	r20, 0xB0	; 176
     570:	51 e4       	ldi	r21, 0x41	; 65
     572:	69 81       	ldd	r22, Y+1	; 0x01
     574:	7a 81       	ldd	r23, Y+2	; 0x02
     576:	8b 81       	ldd	r24, Y+3	; 0x03
     578:	9c 81       	ldd	r25, Y+4	; 0x04
     57a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     57e:	2d ec       	ldi	r18, 0xCD	; 205
     580:	3c ec       	ldi	r19, 0xCC	; 204
     582:	48 e2       	ldi	r20, 0x28	; 40
     584:	51 e4       	ldi	r21, 0x41	; 65
     586:	0e 94 fa 07 	call	0xff4	; 0xff4 <__divsf3>
     58a:	4b 01       	movw	r8, r22
     58c:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	4a e7       	ldi	r20, 0x7A	; 122
     594:	55 e4       	ldi	r21, 0x45	; 69
     596:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     59a:	6b 01       	movw	r12, r22
     59c:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	40 e8       	ldi	r20, 0x80	; 128
     5a4:	5f e3       	ldi	r21, 0x3F	; 63
     5a6:	0e 94 f5 07 	call	0xfea	; 0xfea <__cmpsf2>
     5aa:	88 23       	and	r24, r24
     5ac:	1c f1       	brlt	.+70     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
		__ticks = 1;
	else if (__tmp > 65535)
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	3f ef       	ldi	r19, 0xFF	; 255
     5b2:	4f e7       	ldi	r20, 0x7F	; 127
     5b4:	57 e4       	ldi	r21, 0x47	; 71
     5b6:	c7 01       	movw	r24, r14
     5b8:	b6 01       	movw	r22, r12
     5ba:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__gesf2>
     5be:	18 16       	cp	r1, r24
     5c0:	a4 f4       	brge	.+40     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	40 e2       	ldi	r20, 0x20	; 32
     5c8:	51 e4       	ldi	r21, 0x41	; 65
     5ca:	c5 01       	movw	r24, r10
     5cc:	b4 01       	movw	r22, r8
     5ce:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     5d2:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
		while(__ticks)
     5d6:	61 15       	cp	r22, r1
     5d8:	71 05       	cpc	r23, r1
     5da:	89 f0       	breq	.+34     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
     5dc:	c8 01       	movw	r24, r16
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	f1 f7       	brne	.-4      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5e2:	61 50       	subi	r22, 0x01	; 1
     5e4:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5e6:	d1 f7       	brne	.-12     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
     5e8:	0a c0       	rjmp	.+20     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ea:	c7 01       	movw	r24, r14
     5ec:	b6 01       	movw	r22, r12
     5ee:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     5f4:	6d 81       	ldd	r22, Y+5	; 0x05
     5f6:	79 85       	ldd	r23, Y+9	; 0x09
     5f8:	cb 01       	movw	r24, r22
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     5fe:	2b 98       	cbi	0x05, 3	; 5
     600:	89 89       	ldd	r24, Y+17	; 0x11
     602:	9a 89       	ldd	r25, Y+18	; 0x12
     604:	01 97       	sbiw	r24, 0x01	; 1
     606:	9a 8b       	std	Y+18, r25	; 0x12
     608:	89 8b       	std	Y+17, r24	; 0x11
			_delay_ms(frequency / 10.5);
			BUZZER_PORT |= (1 << BUZZER_PIN);
			_delay_ms(22 * frequency / 10.5); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		for(int j=0;j<10;j++){
     60a:	89 2b       	or	r24, r25
     60c:	09 f0       	breq	.+2      	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
     60e:	7f cf       	rjmp	.-258    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     610:	8b 8a       	std	Y+19, r8	; 0x13
     612:	9c 8a       	std	Y+20, r9	; 0x14
     614:	ad 8a       	std	Y+21, r10	; 0x15
     616:	be 8a       	std	Y+22, r11	; 0x16
			_delay_ms(22.1 * frequency / 10.55); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		
		for(int j=0;j<5;j++){
			_delay_ms(frequency / 10.6);
     618:	2a e9       	ldi	r18, 0x9A	; 154
     61a:	39 e9       	ldi	r19, 0x99	; 153
     61c:	49 e2       	ldi	r20, 0x29	; 41
     61e:	51 e4       	ldi	r21, 0x41	; 65
     620:	69 81       	ldd	r22, Y+1	; 0x01
     622:	7a 81       	ldd	r23, Y+2	; 0x02
     624:	8b 81       	ldd	r24, Y+3	; 0x03
     626:	9c 81       	ldd	r25, Y+4	; 0x04
     628:	0e 94 fa 07 	call	0xff4	; 0xff4 <__divsf3>
     62c:	6f 8b       	std	Y+23, r22	; 0x17
     62e:	78 8f       	std	Y+24, r23	; 0x18
     630:	89 8f       	std	Y+25, r24	; 0x19
     632:	9a 8f       	std	Y+26, r25	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	4a e7       	ldi	r20, 0x7A	; 122
     63a:	55 e4       	ldi	r21, 0x45	; 69
     63c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     640:	69 87       	std	Y+9, r22	; 0x09
     642:	7a 87       	std	Y+10, r23	; 0x0a
     644:	8b 87       	std	Y+11, r24	; 0x0b
     646:	9c 87       	std	Y+12, r25	; 0x0c
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     648:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
     64c:	4b 01       	movw	r8, r22
     64e:	5c 01       	movw	r10, r24
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	40 e8       	ldi	r20, 0x80	; 128
     656:	5f e3       	ldi	r21, 0x3F	; 63
     658:	69 85       	ldd	r22, Y+9	; 0x09
     65a:	7a 85       	ldd	r23, Y+10	; 0x0a
     65c:	8b 85       	ldd	r24, Y+11	; 0x0b
     65e:	9c 85       	ldd	r25, Y+12	; 0x0c
     660:	0e 94 f5 07 	call	0xfea	; 0xfea <__cmpsf2>
     664:	88 23       	and	r24, r24
     666:	1c f4       	brge	.+6      	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	02 c0       	rjmp	.+4      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
     66e:	98 2d       	mov	r25, r8
     670:	89 2d       	mov	r24, r9
     672:	99 8b       	std	Y+17, r25	; 0x11
     674:	8a 8b       	std	Y+18, r24	; 0x12
     676:	85 e0       	ldi	r24, 0x05	; 5
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	00 e9       	ldi	r16, 0x90	; 144
     67c:	11 e0       	ldi	r17, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     67e:	9c 8f       	std	Y+28, r25	; 0x1c
     680:	8b 8f       	std	Y+27, r24	; 0x1b
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	40 e8       	ldi	r20, 0x80	; 128
     688:	5f e3       	ldi	r21, 0x3F	; 63
     68a:	69 85       	ldd	r22, Y+9	; 0x09
     68c:	7a 85       	ldd	r23, Y+10	; 0x0a
     68e:	8b 85       	ldd	r24, Y+11	; 0x0b
     690:	9c 85       	ldd	r25, Y+12	; 0x0c
     692:	0e 94 f5 07 	call	0xfea	; 0xfea <__cmpsf2>
     696:	88 23       	and	r24, r24
     698:	14 f1       	brlt	.+68     	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
		__ticks = 1;
	else if (__tmp > 65535)
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	3f ef       	ldi	r19, 0xFF	; 255
     69e:	4f e7       	ldi	r20, 0x7F	; 127
     6a0:	57 e4       	ldi	r21, 0x47	; 71
     6a2:	69 85       	ldd	r22, Y+9	; 0x09
     6a4:	7a 85       	ldd	r23, Y+10	; 0x0a
     6a6:	8b 85       	ldd	r24, Y+11	; 0x0b
     6a8:	9c 85       	ldd	r25, Y+12	; 0x0c
     6aa:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__gesf2>
     6ae:	18 16       	cp	r1, r24
     6b0:	b4 f4       	brge	.+44     	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	40 e2       	ldi	r20, 0x20	; 32
     6b8:	51 e4       	ldi	r21, 0x41	; 65
     6ba:	6f 89       	ldd	r22, Y+23	; 0x17
     6bc:	78 8d       	ldd	r23, Y+24	; 0x18
     6be:	89 8d       	ldd	r24, Y+25	; 0x19
     6c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6c2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     6c6:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
		while(__ticks)
     6ca:	61 15       	cp	r22, r1
     6cc:	71 05       	cpc	r23, r1
     6ce:	59 f0       	breq	.+22     	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
     6d0:	c8 01       	movw	r24, r16
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d6:	61 50       	subi	r22, 0x01	; 1
     6d8:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6da:	d1 f7       	brne	.-12     	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
     6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
     6de:	89 89       	ldd	r24, Y+17	; 0x11
     6e0:	9a 89       	ldd	r25, Y+18	; 0x12
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
			BUZZER_PORT |= (1 << BUZZER_PIN);
     6e6:	2b 9a       	sbi	0x05, 3	; 5
			_delay_ms(22.2 * frequency / 10.6); // Ensuring the same duty cycle for both on and off times
     6e8:	2a e9       	ldi	r18, 0x9A	; 154
     6ea:	39 e9       	ldi	r19, 0x99	; 153
     6ec:	41 eb       	ldi	r20, 0xB1	; 177
     6ee:	51 e4       	ldi	r21, 0x41	; 65
     6f0:	69 81       	ldd	r22, Y+1	; 0x01
     6f2:	7a 81       	ldd	r23, Y+2	; 0x02
     6f4:	8b 81       	ldd	r24, Y+3	; 0x03
     6f6:	9c 81       	ldd	r25, Y+4	; 0x04
     6f8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     6fc:	2a e9       	ldi	r18, 0x9A	; 154
     6fe:	39 e9       	ldi	r19, 0x99	; 153
     700:	49 e2       	ldi	r20, 0x29	; 41
     702:	51 e4       	ldi	r21, 0x41	; 65
     704:	0e 94 fa 07 	call	0xff4	; 0xff4 <__divsf3>
     708:	6d 83       	std	Y+5, r22	; 0x05
     70a:	7e 83       	std	Y+6, r23	; 0x06
     70c:	8f 83       	std	Y+7, r24	; 0x07
     70e:	98 87       	std	Y+8, r25	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	4a e7       	ldi	r20, 0x7A	; 122
     716:	55 e4       	ldi	r21, 0x45	; 69
     718:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     71c:	4b 01       	movw	r8, r22
     71e:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	40 e8       	ldi	r20, 0x80	; 128
     726:	5f e3       	ldi	r21, 0x3F	; 63
     728:	0e 94 f5 07 	call	0xfea	; 0xfea <__cmpsf2>
     72c:	88 23       	and	r24, r24
     72e:	2c f1       	brlt	.+74     	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
		__ticks = 1;
	else if (__tmp > 65535)
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	3f ef       	ldi	r19, 0xFF	; 255
     734:	4f e7       	ldi	r20, 0x7F	; 127
     736:	57 e4       	ldi	r21, 0x47	; 71
     738:	c5 01       	movw	r24, r10
     73a:	b4 01       	movw	r22, r8
     73c:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__gesf2>
     740:	18 16       	cp	r1, r24
     742:	b4 f4       	brge	.+44     	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	40 e2       	ldi	r20, 0x20	; 32
     74a:	51 e4       	ldi	r21, 0x41	; 65
     74c:	6d 81       	ldd	r22, Y+5	; 0x05
     74e:	7e 81       	ldd	r23, Y+6	; 0x06
     750:	8f 81       	ldd	r24, Y+7	; 0x07
     752:	98 85       	ldd	r25, Y+8	; 0x08
     754:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     758:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
		while(__ticks)
     75c:	61 15       	cp	r22, r1
     75e:	71 05       	cpc	r23, r1
     760:	89 f0       	breq	.+34     	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
     762:	c8 01       	movw	r24, r16
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     768:	61 50       	subi	r22, 0x01	; 1
     76a:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     76c:	d1 f7       	brne	.-12     	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
     76e:	0a c0       	rjmp	.+20     	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     770:	c5 01       	movw	r24, r10
     772:	b4 01       	movw	r22, r8
     774:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
     778:	02 c0       	rjmp	.+4      	; 0x77e <__LOCK_REGION_LENGTH__+0x37e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     77a:	61 e0       	ldi	r22, 0x01	; 1
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	cb 01       	movw	r24, r22
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     784:	2b 98       	cbi	0x05, 3	; 5
     786:	8b 8d       	ldd	r24, Y+27	; 0x1b
     788:	9c 8d       	ldd	r25, Y+28	; 0x1c
     78a:	01 97       	sbiw	r24, 0x01	; 1
     78c:	9c 8f       	std	Y+28, r25	; 0x1c
     78e:	8b 8f       	std	Y+27, r24	; 0x1b
			BUZZER_PORT |= (1 << BUZZER_PIN);
			_delay_ms(22.1 * frequency / 10.55); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		
		for(int j=0;j<5;j++){
     790:	89 2b       	or	r24, r25
     792:	09 f0       	breq	.+2      	; 0x796 <__LOCK_REGION_LENGTH__+0x396>
     794:	76 cf       	rjmp	.-276    	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
     796:	0a e0       	ldi	r16, 0x0A	; 10
     798:	10 e0       	ldi	r17, 0x00	; 0
     79a:	bb 24       	eor	r11, r11
     79c:	b3 94       	inc	r11
     79e:	a1 2c       	mov	r10, r1
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	40 e8       	ldi	r20, 0x80	; 128
     7a6:	5f e3       	ldi	r21, 0x3F	; 63
     7a8:	c3 01       	movw	r24, r6
     7aa:	b2 01       	movw	r22, r4
     7ac:	0e 94 f5 07 	call	0xfea	; 0xfea <__cmpsf2>
     7b0:	88 23       	and	r24, r24
     7b2:	0c f1       	brlt	.+66     	; 0x7f6 <__LOCK_REGION_LENGTH__+0x3f6>
		__ticks = 1;
	else if (__tmp > 65535)
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	3f ef       	ldi	r19, 0xFF	; 255
     7b8:	4f e7       	ldi	r20, 0x7F	; 127
     7ba:	57 e4       	ldi	r21, 0x47	; 71
     7bc:	c3 01       	movw	r24, r6
     7be:	b2 01       	movw	r22, r4
     7c0:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__gesf2>
     7c4:	18 16       	cp	r1, r24
     7c6:	bc f4       	brge	.+46     	; 0x7f6 <__LOCK_REGION_LENGTH__+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	40 e2       	ldi	r20, 0x20	; 32
     7ce:	51 e4       	ldi	r21, 0x41	; 65
     7d0:	6d 85       	ldd	r22, Y+13	; 0x0d
     7d2:	7e 85       	ldd	r23, Y+14	; 0x0e
     7d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     7d6:	98 89       	ldd	r25, Y+16	; 0x10
     7d8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     7dc:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
		while(__ticks)
     7e0:	61 15       	cp	r22, r1
     7e2:	71 05       	cpc	r23, r1
     7e4:	59 f0       	breq	.+22     	; 0x7fc <__LOCK_REGION_LENGTH__+0x3fc>
     7e6:	80 e9       	ldi	r24, 0x90	; 144
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <__LOCK_REGION_LENGTH__+0x3ea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ee:	61 50       	subi	r22, 0x01	; 1
     7f0:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7f2:	c9 f7       	brne	.-14     	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     7f4:	03 c0       	rjmp	.+6      	; 0x7fc <__LOCK_REGION_LENGTH__+0x3fc>
     7f6:	c1 01       	movw	r24, r2
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <__LOCK_REGION_LENGTH__+0x3f8>
			_delay_ms(22.2 * frequency / 10.6); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		for(int j=0;j<10;j++){
			_delay_ms(frequency / 10.55);
			BUZZER_PORT |= (1 << BUZZER_PIN);
     7fc:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	40 e8       	ldi	r20, 0x80	; 128
     804:	5f e3       	ldi	r21, 0x3F	; 63
     806:	c7 01       	movw	r24, r14
     808:	b6 01       	movw	r22, r12
     80a:	0e 94 f5 07 	call	0xfea	; 0xfea <__cmpsf2>
     80e:	88 23       	and	r24, r24
     810:	34 f1       	brlt	.+76     	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
		__ticks = 1;
	else if (__tmp > 65535)
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	3f ef       	ldi	r19, 0xFF	; 255
     816:	4f e7       	ldi	r20, 0x7F	; 127
     818:	57 e4       	ldi	r21, 0x47	; 71
     81a:	c7 01       	movw	r24, r14
     81c:	b6 01       	movw	r22, r12
     81e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__gesf2>
     822:	18 16       	cp	r1, r24
     824:	bc f4       	brge	.+46     	; 0x854 <__LOCK_REGION_LENGTH__+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	40 e2       	ldi	r20, 0x20	; 32
     82c:	51 e4       	ldi	r21, 0x41	; 65
     82e:	6b 89       	ldd	r22, Y+19	; 0x13
     830:	7c 89       	ldd	r23, Y+20	; 0x14
     832:	8d 89       	ldd	r24, Y+21	; 0x15
     834:	9e 89       	ldd	r25, Y+22	; 0x16
     836:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     83a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
		while(__ticks)
     83e:	61 15       	cp	r22, r1
     840:	71 05       	cpc	r23, r1
     842:	91 f0       	breq	.+36     	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
     844:	80 e9       	ldi	r24, 0x90	; 144
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     84c:	61 50       	subi	r22, 0x01	; 1
     84e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     850:	c9 f7       	brne	.-14     	; 0x844 <__LOCK_REGION_LENGTH__+0x444>
     852:	0a c0       	rjmp	.+20     	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     854:	c7 01       	movw	r24, r14
     856:	b6 01       	movw	r22, r12
     858:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
     85c:	02 c0       	rjmp	.+4      	; 0x862 <__LOCK_REGION_LENGTH__+0x462>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     85e:	6b 2d       	mov	r22, r11
     860:	7a 2d       	mov	r23, r10
     862:	cb 01       	movw	r24, r22
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	f1 f7       	brne	.-4      	; 0x864 <__LOCK_REGION_LENGTH__+0x464>
			_delay_ms(22.1 * frequency / 10.55); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     868:	2b 98       	cbi	0x05, 3	; 5
     86a:	01 50       	subi	r16, 0x01	; 1
     86c:	11 09       	sbc	r17, r1
			_delay_ms(frequency / 10.6);
			BUZZER_PORT |= (1 << BUZZER_PIN);
			_delay_ms(22.2 * frequency / 10.6); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		for(int j=0;j<10;j++){
     86e:	09 f0       	breq	.+2      	; 0x872 <__LOCK_REGION_LENGTH__+0x472>
     870:	97 cf       	rjmp	.-210    	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
			_delay_ms(22.1 * frequency / 10.55); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}

	
}
     872:	6c 96       	adiw	r28, 0x1c	; 28
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	ff 90       	pop	r15
     888:	ef 90       	pop	r14
     88a:	df 90       	pop	r13
     88c:	cf 90       	pop	r12
     88e:	bf 90       	pop	r11
     890:	af 90       	pop	r10
     892:	9f 90       	pop	r9
     894:	8f 90       	pop	r8
     896:	7f 90       	pop	r7
     898:	6f 90       	pop	r6
     89a:	5f 90       	pop	r5
     89c:	4f 90       	pop	r4
     89e:	3f 90       	pop	r3
     8a0:	2f 90       	pop	r2
     8a2:	08 95       	ret

000008a4 <Play_Sound_piano>:

void Play_Sound_piano(float frequency)
{
     8a4:	2f 92       	push	r2
     8a6:	3f 92       	push	r3
     8a8:	4f 92       	push	r4
     8aa:	5f 92       	push	r5
     8ac:	6f 92       	push	r6
     8ae:	7f 92       	push	r7
     8b0:	8f 92       	push	r8
     8b2:	9f 92       	push	r9
     8b4:	af 92       	push	r10
     8b6:	bf 92       	push	r11
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	1f 92       	push	r1
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	4b 01       	movw	r8, r22
     8d0:	5c 01       	movw	r10, r24
	long int i,cycles;
	float wavelength = 1.25;
	
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);
     8d2:	23 9a       	sbi	0x04, 3	; 4

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	4a e7       	ldi	r20, 0x7A	; 122
     8da:	55 e4       	ldi	r21, 0x45	; 69
     8dc:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     8e0:	6b 01       	movw	r12, r22
     8e2:	7c 01       	movw	r14, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8e4:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
     8e8:	2b 01       	movw	r4, r22
     8ea:	3c 01       	movw	r6, r24
     8ec:	69 83       	std	Y+1, r22	; 0x01
     8ee:	35 2c       	mov	r3, r5
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e8       	ldi	r20, 0x80	; 128
     8f6:	5f e3       	ldi	r21, 0x3F	; 63
     8f8:	c7 01       	movw	r24, r14
     8fa:	b6 01       	movw	r22, r12
     8fc:	0e 94 f5 07 	call	0xfea	; 0xfea <__cmpsf2>
     900:	88 23       	and	r24, r24
     902:	1c f4       	brge	.+6      	; 0x90a <__stack+0xb>
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xf>
     90a:	94 2d       	mov	r25, r4
     90c:	85 2d       	mov	r24, r5
     90e:	69 2e       	mov	r6, r25
     910:	78 2e       	mov	r7, r24
     912:	00 e0       	ldi	r16, 0x00	; 0
     914:	10 e0       	ldi	r17, 0x00	; 0

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     916:	55 24       	eor	r5, r5
     918:	53 94       	inc	r5
     91a:	21 2c       	mov	r2, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     91c:	49 80       	ldd	r4, Y+1	; 0x01
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	40 e8       	ldi	r20, 0x80	; 128
     924:	5f e3       	ldi	r21, 0x3F	; 63
     926:	c7 01       	movw	r24, r14
     928:	b6 01       	movw	r22, r12
     92a:	0e 94 f5 07 	call	0xfea	; 0xfea <__cmpsf2>
     92e:	88 23       	and	r24, r24
     930:	04 f1       	brlt	.+64     	; 0x972 <__stack+0x73>
		__ticks = 1;
	else if (__tmp > 65535)
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	3f ef       	ldi	r19, 0xFF	; 255
     936:	4f e7       	ldi	r20, 0x7F	; 127
     938:	57 e4       	ldi	r21, 0x47	; 71
     93a:	c7 01       	movw	r24, r14
     93c:	b6 01       	movw	r22, r12
     93e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__gesf2>
     942:	18 16       	cp	r1, r24
     944:	b4 f4       	brge	.+44     	; 0x972 <__stack+0x73>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	40 e2       	ldi	r20, 0x20	; 32
     94c:	51 e4       	ldi	r21, 0x41	; 65
     94e:	c5 01       	movw	r24, r10
     950:	b4 01       	movw	r22, r8
     952:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     956:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
		while(__ticks)
     95a:	61 15       	cp	r22, r1
     95c:	71 05       	cpc	r23, r1
     95e:	09 f4       	brne	.+2      	; 0x962 <__stack+0x63>
     960:	61 c0       	rjmp	.+194    	; 0xa24 <__stack+0x125>
     962:	80 e9       	ldi	r24, 0x90	; 144
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	f1 f7       	brne	.-4      	; 0x966 <__stack+0x67>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     96a:	61 50       	subi	r22, 0x01	; 1
     96c:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     96e:	c9 f7       	brne	.-14     	; 0x962 <__stack+0x63>
     970:	4d c0       	rjmp	.+154    	; 0xa0c <__stack+0x10d>
     972:	c3 01       	movw	r24, r6
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <__stack+0x75>

	for (i=0;i<cycles;i++)
	{
		_delay_ms(frequency);
		BUZZER_PORT |= (1 << BUZZER_PIN);
     978:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e8       	ldi	r20, 0x80	; 128
     980:	5f e3       	ldi	r21, 0x3F	; 63
     982:	c7 01       	movw	r24, r14
     984:	b6 01       	movw	r22, r12
     986:	0e 94 f5 07 	call	0xfea	; 0xfea <__cmpsf2>
     98a:	88 23       	and	r24, r24
     98c:	fc f0       	brlt	.+62     	; 0x9cc <__stack+0xcd>
		__ticks = 1;
	else if (__tmp > 65535)
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	3f ef       	ldi	r19, 0xFF	; 255
     992:	4f e7       	ldi	r20, 0x7F	; 127
     994:	57 e4       	ldi	r21, 0x47	; 71
     996:	c7 01       	movw	r24, r14
     998:	b6 01       	movw	r22, r12
     99a:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__gesf2>
     99e:	18 16       	cp	r1, r24
     9a0:	c4 f4       	brge	.+48     	; 0x9d2 <__stack+0xd3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 e2       	ldi	r20, 0x20	; 32
     9a8:	51 e4       	ldi	r21, 0x41	; 65
     9aa:	c5 01       	movw	r24, r10
     9ac:	b4 01       	movw	r22, r8
     9ae:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     9b2:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
		while(__ticks)
     9b6:	61 15       	cp	r22, r1
     9b8:	71 05       	cpc	r23, r1
     9ba:	a9 f0       	breq	.+42     	; 0x9e6 <__stack+0xe7>
     9bc:	80 e9       	ldi	r24, 0x90	; 144
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <__stack+0xc1>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9c4:	61 50       	subi	r22, 0x01	; 1
     9c6:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c8:	c9 f7       	brne	.-14     	; 0x9bc <__stack+0xbd>
     9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <__stack+0xe7>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     9cc:	85 2d       	mov	r24, r5
     9ce:	92 2d       	mov	r25, r2
     9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <__stack+0xe3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9d2:	84 2d       	mov	r24, r4
     9d4:	93 2d       	mov	r25, r3
     9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <__stack+0xe3>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     9d8:	85 2d       	mov	r24, r5
     9da:	92 2d       	mov	r25, r2
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <__stack+0xe3>
     9de:	85 2d       	mov	r24, r5
     9e0:	92 2d       	mov	r25, r2
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <__stack+0xe3>
		_delay_ms(frequency);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
     9e6:	2b 98       	cbi	0x05, 3	; 5
     9e8:	0f 5f       	subi	r16, 0xFF	; 255
     9ea:	1f 4f       	sbci	r17, 0xFF	; 255
	
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);

	for (i=0;i<cycles;i++)
     9ec:	04 30       	cpi	r16, 0x04	; 4
     9ee:	11 05       	cpc	r17, r1
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <__stack+0xf5>
     9f2:	95 cf       	rjmp	.-214    	; 0x91e <__stack+0x1f>
     9f4:	23 c0       	rjmp	.+70     	; 0xa3c <__stack+0x13d>
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e2       	ldi	r20, 0x20	; 32
     9fc:	51 e4       	ldi	r21, 0x41	; 65
     9fe:	c5 01       	movw	r24, r10
     a00:	b4 01       	movw	r22, r8
     a02:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     a06:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
     a0a:	d8 cf       	rjmp	.-80     	; 0x9bc <__stack+0xbd>
	{
		_delay_ms(frequency);
		BUZZER_PORT |= (1 << BUZZER_PIN);
     a0c:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	40 e8       	ldi	r20, 0x80	; 128
     a14:	5f e3       	ldi	r21, 0x3F	; 63
     a16:	c7 01       	movw	r24, r14
     a18:	b6 01       	movw	r22, r12
     a1a:	0e 94 f5 07 	call	0xfea	; 0xfea <__cmpsf2>
     a1e:	88 23       	and	r24, r24
     a20:	54 f7       	brge	.-44     	; 0x9f6 <__stack+0xf7>
     a22:	da cf       	rjmp	.-76     	; 0x9d8 <__stack+0xd9>
     a24:	2b 9a       	sbi	0x05, 3	; 5
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	40 e8       	ldi	r20, 0x80	; 128
     a2c:	5f e3       	ldi	r21, 0x3F	; 63
     a2e:	c7 01       	movw	r24, r14
     a30:	b6 01       	movw	r22, r12
     a32:	0e 94 f5 07 	call	0xfea	; 0xfea <__cmpsf2>
     a36:	88 23       	and	r24, r24
     a38:	b4 f6       	brge	.-84     	; 0x9e6 <__stack+0xe7>
     a3a:	d1 cf       	rjmp	.-94     	; 0x9de <__stack+0xdf>
		_delay_ms(frequency);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
	}
	
	
}
     a3c:	0f 90       	pop	r0
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	bf 90       	pop	r11
     a50:	af 90       	pop	r10
     a52:	9f 90       	pop	r9
     a54:	8f 90       	pop	r8
     a56:	7f 90       	pop	r7
     a58:	6f 90       	pop	r6
     a5a:	5f 90       	pop	r5
     a5c:	4f 90       	pop	r4
     a5e:	3f 90       	pop	r3
     a60:	2f 90       	pop	r2
     a62:	08 95       	ret

00000a64 <stop_sound>:


void stop_sound(void)
{
	// Stop sound
	BUZZER_PORT &= ~(1 << BUZZER_PIN);
     a64:	2b 98       	cbi	0x05, 3	; 5
     a66:	08 95       	ret

00000a68 <readInput1>:
/*74HC165 read function*/
volatile uint8_t readInput1(void){
	uint8_t reader = 0;

	/* Set PINC2 (PC2) as input */
	DDRC &= ~(1 << PC2);
     a68:	3a 98       	cbi	0x07, 2	; 7

	/* Raise LD pin */
	PORTC |= (1 << PC1);
     a6a:	41 9a       	sbi	0x08, 1	; 8
     a6c:	28 e0       	ldi	r18, 0x08	; 8
     a6e:	30 e0       	ldi	r19, 0x00	; 0
}


/*74HC165 read function*/
volatile uint8_t readInput1(void){
	uint8_t reader = 0;
     a70:	80 e0       	ldi	r24, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a72:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PINC & (1 << PC2)) ? 1 : 0);
     a74:	96 b1       	in	r25, 0x06	; 6
     a76:	92 fb       	bst	r25, 2
     a78:	99 27       	eor	r25, r25
     a7a:	90 f9       	bld	r25, 0
     a7c:	88 0f       	add	r24, r24
     a7e:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
     a80:	40 98       	cbi	0x08, 0	; 8
     a82:	94 2f       	mov	r25, r20
     a84:	9a 95       	dec	r25
     a86:	f1 f7       	brne	.-4      	; 0xa84 <readInput1+0x1c>
		_delay_us(1);
		PORTC |= (1 << PC0);
     a88:	40 9a       	sbi	0x08, 0	; 8
     a8a:	21 50       	subi	r18, 0x01	; 1
     a8c:	31 09       	sbc	r19, r1
	DDRC &= ~(1 << PC2);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
     a8e:	91 f7       	brne	.-28     	; 0xa74 <readInput1+0xc>
		_delay_us(1);
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
     a90:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
     a92:	08 95       	ret

00000a94 <readInput2>:

volatile uint8_t readInput2(void){
	uint8_t reader = 0;

	/* Set PIND3 (PD3) as input */
	DDRB &= ~(1 << PB4);
     a94:	24 98       	cbi	0x04, 4	; 4

	/* Raise LD pin */
	PORTC |= (1 << PC1);
     a96:	41 9a       	sbi	0x08, 1	; 8
     a98:	28 e0       	ldi	r18, 0x08	; 8
     a9a:	30 e0       	ldi	r19, 0x00	; 0

	return reader;
}

volatile uint8_t readInput2(void){
	uint8_t reader = 0;
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PINB & (1 << PB4)) ? 1 : 0);
     aa0:	93 b1       	in	r25, 0x03	; 3
     aa2:	92 95       	swap	r25
     aa4:	91 70       	andi	r25, 0x01	; 1
     aa6:	88 0f       	add	r24, r24
     aa8:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
     aaa:	40 98       	cbi	0x08, 0	; 8
     aac:	94 2f       	mov	r25, r20
     aae:	9a 95       	dec	r25
     ab0:	f1 f7       	brne	.-4      	; 0xaae <readInput2+0x1a>
		_delay_us(1);
		PORTC |= (1 << PC0);
     ab2:	40 9a       	sbi	0x08, 0	; 8
     ab4:	21 50       	subi	r18, 0x01	; 1
     ab6:	31 09       	sbc	r19, r1
	DDRB &= ~(1 << PB4);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
     ab8:	99 f7       	brne	.-26     	; 0xaa0 <readInput2+0xc>
		_delay_us(1);
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
     aba:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
     abc:	08 95       	ret

00000abe <readInput3>:

volatile uint8_t readInput3(void){
	uint8_t reader = 0;

	/* Set PIND2 (PD2) as input */
	DDRB &= ~(1 << PB5);
     abe:	25 98       	cbi	0x04, 5	; 4

	/* Raise LD pin */
	PORTC |= (1 << PC1);
     ac0:	41 9a       	sbi	0x08, 1	; 8
     ac2:	28 e0       	ldi	r18, 0x08	; 8
     ac4:	30 e0       	ldi	r19, 0x00	; 0
	return reader;
}


volatile uint8_t readInput3(void){
	uint8_t reader = 0;
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PINB & (1 << PB5 )) ? 1 : 0);
     aca:	93 b1       	in	r25, 0x03	; 3
     acc:	95 fb       	bst	r25, 5
     ace:	99 27       	eor	r25, r25
     ad0:	90 f9       	bld	r25, 0
     ad2:	88 0f       	add	r24, r24
     ad4:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
     ad6:	40 98       	cbi	0x08, 0	; 8
     ad8:	94 2f       	mov	r25, r20
     ada:	9a 95       	dec	r25
     adc:	f1 f7       	brne	.-4      	; 0xada <readInput3+0x1c>
		_delay_us(1); // You can use delay functions for a more accurate timing
		PORTC |= (1 << PC0);
     ade:	40 9a       	sbi	0x08, 0	; 8
     ae0:	21 50       	subi	r18, 0x01	; 1
     ae2:	31 09       	sbc	r19, r1
	DDRB &= ~(1 << PB5);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
     ae4:	91 f7       	brne	.-28     	; 0xaca <readInput3+0xc>
		_delay_us(1); // You can use delay functions for a more accurate timing
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
     ae6:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
     ae8:	08 95       	ret

00000aea <calculateFrequency>:


volatile float calculateFrequency(void){
     aea:	cf 92       	push	r12
     aec:	df 92       	push	r13
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
	float freq = 0;
/* Read the input value */
uint8_t switchNo = readInput1();
     af8:	0e 94 34 05 	call	0xa68	; 0xa68 <readInput1>
     afc:	c8 2e       	mov	r12, r24
uint8_t switchNo2 = readInput2();
     afe:	0e 94 4a 05 	call	0xa94	; 0xa94 <readInput2>
     b02:	08 2f       	mov	r16, r24
uint8_t switchNo3 = readInput3();
     b04:	0e 94 5f 05 	call	0xabe	; 0xabe <readInput3>
     b08:	f8 2e       	mov	r15, r24
     b0a:	c1 e0       	ldi	r28, 0x01	; 1
     b0c:	d0 e0       	ldi	r29, 0x00	; 0
	return reader;
}


volatile float calculateFrequency(void){
	float freq = 0;
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	cb 01       	movw	r24, r22
uint8_t switchNo3 = readInput3();

	/* Iterate through each bit of switchNo */
	for (int i = 0; i < 8; i++) {
		/* Check if the i-th bit of switchNo is set */
		if (switchNo & (1 << i)) {
     b14:	d1 2c       	mov	r13, r1
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <calculateFrequency+0x30>
     b18:	21 96       	adiw	r28, 0x01	; 1
     b1a:	fe 01       	movw	r30, r28
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	96 01       	movw	r18, r12
     b20:	0e 2e       	mov	r0, r30
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <calculateFrequency+0x3e>
     b24:	35 95       	asr	r19
     b26:	27 95       	ror	r18
     b28:	0a 94       	dec	r0
     b2a:	e2 f7       	brpl	.-8      	; 0xb24 <calculateFrequency+0x3a>
     b2c:	20 ff       	sbrs	r18, 0
     b2e:	3f c0       	rjmp	.+126    	; 0xbae <calculateFrequency+0xc4>
			/* Set frequency based on which button is pressed */
			switch (i) {
     b30:	e8 30       	cpi	r30, 0x08	; 8
     b32:	f1 05       	cpc	r31, r1
     b34:	e0 f5       	brcc	.+120    	; 0xbae <calculateFrequency+0xc4>
     b36:	ec 5c       	subi	r30, 0xCC	; 204
     b38:	ff 4f       	sbci	r31, 0xFF	; 255
     b3a:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__tablejump2__>
				case 0:freq += F3;break;
     b3e:	2a e6       	ldi	r18, 0x6A	; 106
     b40:	3d e4       	ldi	r19, 0x4D	; 77
     b42:	47 e3       	ldi	r20, 0x37	; 55
     b44:	50 e4       	ldi	r21, 0x40	; 64
     b46:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     b4a:	e6 cf       	rjmp	.-52     	; 0xb18 <calculateFrequency+0x2e>
				case 1:freq += Gb3;break;
     b4c:	29 e0       	ldi	r18, 0x09	; 9
     b4e:	39 ef       	ldi	r19, 0xF9	; 249
     b50:	4c e2       	ldi	r20, 0x2C	; 44
     b52:	50 e4       	ldi	r21, 0x40	; 64
     b54:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     b58:	df cf       	rjmp	.-66     	; 0xb18 <calculateFrequency+0x2e>
				case 2:freq += G3;break;
     b5a:	26 e9       	ldi	r18, 0x96	; 150
     b5c:	33 e4       	ldi	r19, 0x43	; 67
     b5e:	43 e2       	ldi	r20, 0x23	; 35
     b60:	50 e4       	ldi	r21, 0x40	; 64
     b62:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     b66:	d8 cf       	rjmp	.-80     	; 0xb18 <calculateFrequency+0x2e>
				case 3:freq += Ab3;break;
     b68:	24 e2       	ldi	r18, 0x24	; 36
     b6a:	38 e2       	ldi	r19, 0x28	; 40
     b6c:	4a e1       	ldi	r20, 0x1A	; 26
     b6e:	50 e4       	ldi	r21, 0x40	; 64
     b70:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     b74:	d1 cf       	rjmp	.-94     	; 0xb18 <calculateFrequency+0x2e>
				case 4:freq += A3;break;
     b76:	2b ee       	ldi	r18, 0xEB	; 235
     b78:	33 e7       	ldi	r19, 0x73	; 115
     b7a:	41 e1       	ldi	r20, 0x11	; 17
     b7c:	50 e4       	ldi	r21, 0x40	; 64
     b7e:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     b82:	ca cf       	rjmp	.-108    	; 0xb18 <calculateFrequency+0x2e>
				case 5:freq += Bb3;break;
     b84:	2b e1       	ldi	r18, 0x1B	; 27
     b86:	3f e2       	ldi	r19, 0x2F	; 47
     b88:	49 e0       	ldi	r20, 0x09	; 9
     b8a:	50 e4       	ldi	r21, 0x40	; 64
     b8c:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     b90:	c3 cf       	rjmp	.-122    	; 0xb18 <calculateFrequency+0x2e>
				case 6:freq += B3;break;
     b92:	23 e5       	ldi	r18, 0x53	; 83
     b94:	36 e9       	ldi	r19, 0x96	; 150
     b96:	41 e0       	ldi	r20, 0x01	; 1
     b98:	50 e4       	ldi	r21, 0x40	; 64
     b9a:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     b9e:	bc cf       	rjmp	.-136    	; 0xb18 <calculateFrequency+0x2e>
				case 7:freq += C4;break;
     ba0:	2d e0       	ldi	r18, 0x0D	; 13
     ba2:	31 e7       	ldi	r19, 0x71	; 113
     ba4:	44 ef       	ldi	r20, 0xF4	; 244
     ba6:	5f e3       	ldi	r21, 0x3F	; 63
     ba8:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     bac:	04 c0       	rjmp	.+8      	; 0xbb6 <calculateFrequency+0xcc>
uint8_t switchNo = readInput1();
uint8_t switchNo2 = readInput2();
uint8_t switchNo3 = readInput3();

	/* Iterate through each bit of switchNo */
	for (int i = 0; i < 8; i++) {
     bae:	c8 30       	cpi	r28, 0x08	; 8
     bb0:	d1 05       	cpc	r29, r1
     bb2:	0c f4       	brge	.+2      	; 0xbb6 <calculateFrequency+0xcc>
     bb4:	b1 cf       	rjmp	.-158    	; 0xb18 <calculateFrequency+0x2e>
	return reader;
}


volatile float calculateFrequency(void){
	float freq = 0;
     bb6:	c1 e0       	ldi	r28, 0x01	; 1
     bb8:	d0 e0       	ldi	r29, 0x00	; 0
	
	
	
	for (int i = 0; i < 8; i++) {
		/* Check if the i-th bit of switchNo is set */
		if (switchNo2 & (1 << i)) {
     bba:	10 e0       	ldi	r17, 0x00	; 0
     bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <calculateFrequency+0xd6>
     bbe:	21 96       	adiw	r28, 0x01	; 1
     bc0:	fe 01       	movw	r30, r28
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	98 01       	movw	r18, r16
     bc6:	0e 2e       	mov	r0, r30
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <calculateFrequency+0xe4>
     bca:	35 95       	asr	r19
     bcc:	27 95       	ror	r18
     bce:	0a 94       	dec	r0
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <calculateFrequency+0xe0>
     bd2:	20 ff       	sbrs	r18, 0
     bd4:	3f c0       	rjmp	.+126    	; 0xc54 <calculateFrequency+0x16a>
			/* Set frequency based on which button is pressed */
			switch (i) {
     bd6:	e8 30       	cpi	r30, 0x08	; 8
     bd8:	f1 05       	cpc	r31, r1
     bda:	e0 f5       	brcc	.+120    	; 0xc54 <calculateFrequency+0x16a>
     bdc:	e4 5c       	subi	r30, 0xC4	; 196
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__tablejump2__>
				case 0:freq += Db4;break;
     be4:	2b ec       	ldi	r18, 0xCB	; 203
     be6:	30 e1       	ldi	r19, 0x10	; 16
     be8:	47 ee       	ldi	r20, 0xE7	; 231
     bea:	5f e3       	ldi	r21, 0x3F	; 63
     bec:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     bf0:	e6 cf       	rjmp	.-52     	; 0xbbe <calculateFrequency+0xd4>
				case 1:freq += D4;break;
     bf2:	2e e3       	ldi	r18, 0x3E	; 62
     bf4:	38 ee       	ldi	r19, 0xE8	; 232
     bf6:	49 ed       	ldi	r20, 0xD9	; 217
     bf8:	5f e3       	ldi	r21, 0x3F	; 63
     bfa:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     bfe:	df cf       	rjmp	.-66     	; 0xbbe <calculateFrequency+0xd4>
				case 2:freq += Eb4;break;
     c00:	2b ea       	ldi	r18, 0xAB	; 171
     c02:	3f ec       	ldi	r19, 0xCF	; 207
     c04:	4d ec       	ldi	r20, 0xCD	; 205
     c06:	5f e3       	ldi	r21, 0x3F	; 63
     c08:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     c0c:	d8 cf       	rjmp	.-80     	; 0xbbe <calculateFrequency+0xd4>
				case 3:freq += E4;break;
     c0e:	2a e1       	ldi	r18, 0x1A	; 26
     c10:	31 e5       	ldi	r19, 0x51	; 81
     c12:	42 ec       	ldi	r20, 0xC2	; 194
     c14:	5f e3       	ldi	r21, 0x3F	; 63
     c16:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     c1a:	d1 cf       	rjmp	.-94     	; 0xbbe <calculateFrequency+0xd4>
				case 4:freq += F4;break;
     c1c:	2b e9       	ldi	r18, 0x9B	; 155
     c1e:	35 e5       	ldi	r19, 0x55	; 85
     c20:	47 eb       	ldi	r20, 0xB7	; 183
     c22:	5f e3       	ldi	r21, 0x3F	; 63
     c24:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     c28:	ca cf       	rjmp	.-108    	; 0xbbe <calculateFrequency+0xd4>
				case 5:freq += Gb4;break;
     c2a:	2d ea       	ldi	r18, 0xAD	; 173
     c2c:	3a ef       	ldi	r19, 0xFA	; 250
     c2e:	4c ea       	ldi	r20, 0xAC	; 172
     c30:	5f e3       	ldi	r21, 0x3F	; 63
     c32:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     c36:	c3 cf       	rjmp	.-122    	; 0xbbe <calculateFrequency+0xd4>
				case 6:freq += G4;break;
     c38:	26 e9       	ldi	r18, 0x96	; 150
     c3a:	33 e4       	ldi	r19, 0x43	; 67
     c3c:	43 ea       	ldi	r20, 0xA3	; 163
     c3e:	5f e3       	ldi	r21, 0x3F	; 63
     c40:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     c44:	bc cf       	rjmp	.-136    	; 0xbbe <calculateFrequency+0xd4>
				case 7:freq += Ab4;break;
     c46:	21 e9       	ldi	r18, 0x91	; 145
     c48:	3f e0       	ldi	r19, 0x0F	; 15
     c4a:	4a e9       	ldi	r20, 0x9A	; 154
     c4c:	5f e3       	ldi	r21, 0x3F	; 63
     c4e:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     c52:	04 c0       	rjmp	.+8      	; 0xc5c <calculateFrequency+0x172>
		}
	}
	
	
	
	for (int i = 0; i < 8; i++) {
     c54:	c8 30       	cpi	r28, 0x08	; 8
     c56:	d1 05       	cpc	r29, r1
     c58:	0c f4       	brge	.+2      	; 0xc5c <calculateFrequency+0x172>
     c5a:	b1 cf       	rjmp	.-158    	; 0xbbe <calculateFrequency+0xd4>
	return reader;
}


volatile float calculateFrequency(void){
	float freq = 0;
     c5c:	c1 e0       	ldi	r28, 0x01	; 1
     c5e:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	
	for (int i = 0; i < 8; i++) {
		/* Check if the i-th bit of switchNo is set */
		if (switchNo3 & (1 << i)) {
     c60:	0f 2d       	mov	r16, r15
     c62:	10 e0       	ldi	r17, 0x00	; 0
     c64:	01 c0       	rjmp	.+2      	; 0xc68 <calculateFrequency+0x17e>
     c66:	21 96       	adiw	r28, 0x01	; 1
     c68:	fe 01       	movw	r30, r28
     c6a:	31 97       	sbiw	r30, 0x01	; 1
     c6c:	98 01       	movw	r18, r16
     c6e:	0e 2e       	mov	r0, r30
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <calculateFrequency+0x18c>
     c72:	35 95       	asr	r19
     c74:	27 95       	ror	r18
     c76:	0a 94       	dec	r0
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <calculateFrequency+0x188>
     c7a:	20 ff       	sbrs	r18, 0
     c7c:	3f c0       	rjmp	.+126    	; 0xcfc <calculateFrequency+0x212>
			/* Set frequency based on which button is pressed */
			switch (i) {
     c7e:	e8 30       	cpi	r30, 0x08	; 8
     c80:	f1 05       	cpc	r31, r1
     c82:	e0 f5       	brcc	.+120    	; 0xcfc <calculateFrequency+0x212>
     c84:	ec 5b       	subi	r30, 0xBC	; 188
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__tablejump2__>
				case 0:freq += A4;break;
     c8c:	2e e8       	ldi	r18, 0x8E	; 142
     c8e:	35 e7       	ldi	r19, 0x75	; 117
     c90:	41 e9       	ldi	r20, 0x91	; 145
     c92:	5f e3       	ldi	r21, 0x3F	; 63
     c94:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     c98:	e6 cf       	rjmp	.-52     	; 0xc66 <calculateFrequency+0x17c>
				case 1:freq += Bb4;break;
     c9a:	27 e6       	ldi	r18, 0x67	; 103
     c9c:	34 e4       	ldi	r19, 0x44	; 68
     c9e:	49 e8       	ldi	r20, 0x89	; 137
     ca0:	5f e3       	ldi	r21, 0x3F	; 63
     ca2:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     ca6:	df cf       	rjmp	.-66     	; 0xc66 <calculateFrequency+0x17c>
				case 2:freq += B4;break;
     ca8:	20 ee       	ldi	r18, 0xE0	; 224
     caa:	3c e9       	ldi	r19, 0x9C	; 156
     cac:	41 e8       	ldi	r20, 0x81	; 129
     cae:	5f e3       	ldi	r21, 0x3F	; 63
     cb0:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     cb4:	d8 cf       	rjmp	.-80     	; 0xc66 <calculateFrequency+0x17c>
				case 3:freq += C5;break;
     cb6:	27 ee       	ldi	r18, 0xE7	; 231
     cb8:	3d e1       	ldi	r19, 0x1D	; 29
     cba:	47 e6       	ldi	r20, 0x67	; 103
     cbc:	5f e3       	ldi	r21, 0x3F	; 63
     cbe:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     cc2:	d1 cf       	rjmp	.-94     	; 0xc66 <calculateFrequency+0x17c>
				case 4:freq += Db5;break;
     cc4:	2a e5       	ldi	r18, 0x5A	; 90
     cc6:	35 ef       	ldi	r19, 0xF5	; 245
     cc8:	49 e5       	ldi	r20, 0x59	; 89
     cca:	5f e3       	ldi	r21, 0x3F	; 63
     ccc:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     cd0:	ca cf       	rjmp	.-108    	; 0xc66 <calculateFrequency+0x17c>
				case 5:freq += D5;break;
     cd2:	28 e4       	ldi	r18, 0x48	; 72
     cd4:	3f eb       	ldi	r19, 0xBF	; 191
     cd6:	4d e4       	ldi	r20, 0x4D	; 77
     cd8:	5f e3       	ldi	r21, 0x3F	; 63
     cda:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     cde:	c3 cf       	rjmp	.-122    	; 0xc66 <calculateFrequency+0x17c>
				case 6:freq += Eb5;break;
     ce0:	25 e4       	ldi	r18, 0x45	; 69
     ce2:	37 e4       	ldi	r19, 0x47	; 71
     ce4:	42 e4       	ldi	r20, 0x42	; 66
     ce6:	5f e3       	ldi	r21, 0x3F	; 63
     ce8:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     cec:	bc cf       	rjmp	.-136    	; 0xc66 <calculateFrequency+0x17c>
				case 7:freq += E5;break;
     cee:	20 e7       	ldi	r18, 0x70	; 112
     cf0:	3f e5       	ldi	r19, 0x5F	; 95
     cf2:	47 e3       	ldi	r20, 0x37	; 55
     cf4:	5f e3       	ldi	r21, 0x3F	; 63
     cf6:	0e 94 89 07 	call	0xf12	; 0xf12 <__addsf3>
     cfa:	04 c0       	rjmp	.+8      	; 0xd04 <calculateFrequency+0x21a>
			}
		}
	}
	
	
	for (int i = 0; i < 8; i++) {
     cfc:	c8 30       	cpi	r28, 0x08	; 8
     cfe:	d1 05       	cpc	r29, r1
     d00:	0c f4       	brge	.+2      	; 0xd04 <calculateFrequency+0x21a>
     d02:	b1 cf       	rjmp	.-158    	; 0xc66 <calculateFrequency+0x17c>
		}
	}


	return freq;
}
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	ff 90       	pop	r15
     d0e:	df 90       	pop	r13
     d10:	cf 90       	pop	r12
     d12:	08 95       	ret

00000d14 <__vector_1>:

uint8_t instrument = -1;
uint8_t bluetooth = -1;

ISR( INT0_vect )
{
     d14:	1f 92       	push	r1
     d16:	0f 92       	push	r0
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	0f 92       	push	r0
     d1c:	11 24       	eor	r1, r1
     d1e:	2f 93       	push	r18
     d20:	3f 93       	push	r19
     d22:	4f 93       	push	r20
     d24:	5f 93       	push	r21
     d26:	6f 93       	push	r22
     d28:	7f 93       	push	r23
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
     d2e:	af 93       	push	r26
     d30:	bf 93       	push	r27
     d32:	ef 93       	push	r30
     d34:	ff 93       	push	r31
	if (PIND & (1 << PD2)) {
     d36:	4a 9b       	sbis	0x09, 2	; 9
     d38:	0b c0       	rjmp	.+22     	; 0xd50 <__vector_1+0x3c>
		instrument=0;
     d3a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <instrument>
		lcd_goto_xy(1, 0);
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Play Piano......");
     d46:	85 e0       	ldi	r24, 0x05	; 5
     d48:	91 e0       	ldi	r25, 0x01	; 1
     d4a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
     d4e:	0a c0       	rjmp	.+20     	; 0xd64 <__vector_1+0x50>
	}else{
		instrument=1;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <instrument>
		lcd_goto_xy(1, 0);
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Play Violin.....");
     d5c:	86 e1       	ldi	r24, 0x16	; 22
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		
	}
	
}
     d64:	ff 91       	pop	r31
     d66:	ef 91       	pop	r30
     d68:	bf 91       	pop	r27
     d6a:	af 91       	pop	r26
     d6c:	9f 91       	pop	r25
     d6e:	8f 91       	pop	r24
     d70:	7f 91       	pop	r23
     d72:	6f 91       	pop	r22
     d74:	5f 91       	pop	r21
     d76:	4f 91       	pop	r20
     d78:	3f 91       	pop	r19
     d7a:	2f 91       	pop	r18
     d7c:	0f 90       	pop	r0
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	0f 90       	pop	r0
     d82:	1f 90       	pop	r1
     d84:	18 95       	reti

00000d86 <__vector_2>:

ISR( INT1_vect )
{
     d86:	1f 92       	push	r1
     d88:	0f 92       	push	r0
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	0f 92       	push	r0
     d8e:	11 24       	eor	r1, r1
     d90:	2f 93       	push	r18
     d92:	3f 93       	push	r19
     d94:	4f 93       	push	r20
     d96:	5f 93       	push	r21
     d98:	6f 93       	push	r22
     d9a:	7f 93       	push	r23
     d9c:	8f 93       	push	r24
     d9e:	9f 93       	push	r25
     da0:	af 93       	push	r26
     da2:	bf 93       	push	r27
     da4:	ef 93       	push	r30
     da6:	ff 93       	push	r31
	if (PIND & (1 << PD3)) {
     da8:	4b 9b       	sbis	0x09, 3	; 9
     daa:	0e c0       	rjmp	.+28     	; 0xdc8 <__vector_2+0x42>
		lcd_goto_xy(0, 0);
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Bluetooth.......");
     db4:	87 e2       	ldi	r24, 0x27	; 39
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		USART_Init();
     dbc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <USART_Init>
		bluetooth=1;
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     dc6:	0a c0       	rjmp	.+20     	; 0xddc <__vector_2+0x56>
	}else{
		lcd_goto_xy(0, 0);
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Toy Piano Music!");
     dd0:	88 e3       	ldi	r24, 0x38	; 56
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		bluetooth=0;
     dd8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	}
}
     ddc:	ff 91       	pop	r31
     dde:	ef 91       	pop	r30
     de0:	bf 91       	pop	r27
     de2:	af 91       	pop	r26
     de4:	9f 91       	pop	r25
     de6:	8f 91       	pop	r24
     de8:	7f 91       	pop	r23
     dea:	6f 91       	pop	r22
     dec:	5f 91       	pop	r21
     dee:	4f 91       	pop	r20
     df0:	3f 91       	pop	r19
     df2:	2f 91       	pop	r18
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	0f 90       	pop	r0
     dfa:	1f 90       	pop	r1
     dfc:	18 95       	reti

00000dfe <main>:

int main(void)
{
lcd_init();
     dfe:	0e 94 89 00 	call	0x112	; 0x112 <lcd_init>
lcd_clear();
     e02:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_clear>
     e06:	84 ef       	ldi	r24, 0xF4	; 244
     e08:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e0a:	20 e9       	ldi	r18, 0x90	; 144
     e0c:	31 e0       	ldi	r19, 0x01	; 1
     e0e:	f9 01       	movw	r30, r18
     e10:	31 97       	sbiw	r30, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <main+0x12>
     e14:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e16:	d9 f7       	brne	.-10     	; 0xe0e <main+0x10>
_delay_ms (50);

	

	/* Initialize PORTC and set PC0, PC1, PC2 as output */
	DDRC |= 0b11111111;
     e18:	87 b1       	in	r24, 0x07	; 7
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b11111111;
     e1e:	9a b1       	in	r25, 0x0a	; 10
     e20:	8a b9       	out	0x0a, r24	; 10
	
	  EICRA |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
     e22:	e9 e6       	ldi	r30, 0x69	; 105
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	81 60       	ori	r24, 0x01	; 1
     e2a:	80 83       	st	Z, r24
	  EIMSK |= (1 << INT0);     // Turns on INT0
     e2c:	e8 9a       	sbi	0x1d, 0	; 29
	
	EICRA |= (1 << ISC10);    // set INT1 to trigger on ANY logic change
     e2e:	80 81       	ld	r24, Z
     e30:	84 60       	ori	r24, 0x04	; 4
     e32:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);     // Turns on INT1
     e34:	e9 9a       	sbi	0x1d, 1	; 29
	
	if (PIND & (1 << PD2)) {
     e36:	4a 9b       	sbis	0x09, 2	; 9
     e38:	0b c0       	rjmp	.+22     	; 0xe50 <main+0x52>
		instrument=0;
     e3a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <instrument>
		lcd_goto_xy(1, 0);
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Play Piano......");
     e46:	85 e0       	ldi	r24, 0x05	; 5
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
     e4e:	0a c0       	rjmp	.+20     	; 0xe64 <main+0x66>
		}else{
		instrument=1;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <instrument>
		lcd_goto_xy(1, 0);
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Play Violin.....");
     e5c:	86 e1       	ldi	r24, 0x16	; 22
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		
	}
	if (PIND & (1 << PD3)) {
     e64:	4b 9b       	sbis	0x09, 3	; 9
     e66:	0e c0       	rjmp	.+28     	; 0xe84 <main+0x86>
		lcd_goto_xy(0, 0);
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Bluetooth.......");
     e70:	87 e2       	ldi	r24, 0x27	; 39
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		USART_Init();
     e78:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <USART_Init>
		bluetooth=1;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     e82:	0a c0       	rjmp	.+20     	; 0xe98 <main+0x9a>
	}else{
		lcd_goto_xy(0, 0);
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Toy Piano Music!");
     e8c:	88 e3       	ldi	r24, 0x38	; 56
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		bluetooth=0;
     e94:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	}
	sei();			/* Enable Global Interrupt */
     e98:	78 94       	sei
	float frequecy=0;
	
	
	while (1){
		float frequecy = calculateFrequency();
     e9a:	0e 94 75 05 	call	0xaea	; 0xaea <calculateFrequency>
     e9e:	6b 01       	movw	r12, r22
     ea0:	7c 01       	movw	r14, r24
		
			if (frequecy > 0) {
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	a9 01       	movw	r20, r18
     ea8:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__gesf2>
     eac:	18 16       	cp	r1, r24
     eae:	6c f5       	brge	.+90     	; 0xf0a <main+0x10c>
				
				if(instrument==0 && bluetooth==0){
     eb0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <instrument>
     eb4:	81 11       	cpse	r24, r1
     eb6:	09 c0       	rjmp	.+18     	; 0xeca <main+0xcc>
     eb8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     ebc:	91 11       	cpse	r25, r1
     ebe:	10 c0       	rjmp	.+32     	; 0xee0 <main+0xe2>
					Play_Sound_piano(frequecy);
     ec0:	c7 01       	movw	r24, r14
     ec2:	b6 01       	movw	r22, r12
     ec4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <Play_Sound_piano>
     ec8:	e8 cf       	rjmp	.-48     	; 0xe9a <main+0x9c>
				}
				else if(instrument==1 && bluetooth==0){
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	49 f4       	brne	.+18     	; 0xee0 <main+0xe2>
     ece:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     ed2:	91 11       	cpse	r25, r1
     ed4:	05 c0       	rjmp	.+10     	; 0xee0 <main+0xe2>
					Play_Sound_violin(frequecy);
     ed6:	c7 01       	movw	r24, r14
     ed8:	b6 01       	movw	r22, r12
     eda:	0e 94 80 01 	call	0x300	; 0x300 <Play_Sound_violin>
     ede:	dd cf       	rjmp	.-70     	; 0xe9a <main+0x9c>
				}
				else if(bluetooth==1){
     ee0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     ee4:	91 30       	cpi	r25, 0x01	; 1
     ee6:	c9 f6       	brne	.-78     	; 0xe9a <main+0x9c>
				USART_TransmitInteger(instrument); // Example integer
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 1f 01 	call	0x23e	; 0x23e <USART_TransmitInteger>
				USART_TransmitChar(' '); // Space separator
     eee:	80 e2       	ldi	r24, 0x20	; 32
     ef0:	0e 94 08 01 	call	0x210	; 0x210 <USART_TransmitChar>
				USART_TransmitFixedPoint(frequecy); // Example float
     ef4:	c7 01       	movw	r24, r14
     ef6:	b6 01       	movw	r22, r12
     ef8:	0e 94 4c 01 	call	0x298	; 0x298 <USART_TransmitFixedPoint>
				USART_TransmitChar('\r'); // Carriage return
     efc:	8d e0       	ldi	r24, 0x0D	; 13
     efe:	0e 94 08 01 	call	0x210	; 0x210 <USART_TransmitChar>
				USART_TransmitChar('\n'); // Newline
     f02:	8a e0       	ldi	r24, 0x0A	; 10
     f04:	0e 94 08 01 	call	0x210	; 0x210 <USART_TransmitChar>
     f08:	c8 cf       	rjmp	.-112    	; 0xe9a <main+0x9c>
			}
			}else{
			stop_sound();
     f0a:	0e 94 32 05 	call	0xa64	; 0xa64 <stop_sound>
     f0e:	c5 cf       	rjmp	.-118    	; 0xe9a <main+0x9c>

00000f10 <__subsf3>:
     f10:	50 58       	subi	r21, 0x80	; 128

00000f12 <__addsf3>:
     f12:	bb 27       	eor	r27, r27
     f14:	aa 27       	eor	r26, r26
     f16:	0e 94 a0 07 	call	0xf40	; 0xf40 <__addsf3x>
     f1a:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__fp_round>
     f1e:	0e 94 0c 09 	call	0x1218	; 0x1218 <__fp_pscA>
     f22:	38 f0       	brcs	.+14     	; 0xf32 <__addsf3+0x20>
     f24:	0e 94 13 09 	call	0x1226	; 0x1226 <__fp_pscB>
     f28:	20 f0       	brcs	.+8      	; 0xf32 <__addsf3+0x20>
     f2a:	39 f4       	brne	.+14     	; 0xf3a <__addsf3+0x28>
     f2c:	9f 3f       	cpi	r25, 0xFF	; 255
     f2e:	19 f4       	brne	.+6      	; 0xf36 <__addsf3+0x24>
     f30:	26 f4       	brtc	.+8      	; 0xf3a <__addsf3+0x28>
     f32:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__fp_nan>
     f36:	0e f4       	brtc	.+2      	; 0xf3a <__addsf3+0x28>
     f38:	e0 95       	com	r30
     f3a:	e7 fb       	bst	r30, 7
     f3c:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_inf>

00000f40 <__addsf3x>:
     f40:	e9 2f       	mov	r30, r25
     f42:	0e 94 2b 09 	call	0x1256	; 0x1256 <__fp_split3>
     f46:	58 f3       	brcs	.-42     	; 0xf1e <__addsf3+0xc>
     f48:	ba 17       	cp	r27, r26
     f4a:	62 07       	cpc	r22, r18
     f4c:	73 07       	cpc	r23, r19
     f4e:	84 07       	cpc	r24, r20
     f50:	95 07       	cpc	r25, r21
     f52:	20 f0       	brcs	.+8      	; 0xf5c <__addsf3x+0x1c>
     f54:	79 f4       	brne	.+30     	; 0xf74 <__addsf3x+0x34>
     f56:	a6 f5       	brtc	.+104    	; 0xfc0 <__addsf3x+0x80>
     f58:	0c 94 4d 09 	jmp	0x129a	; 0x129a <__fp_zero>
     f5c:	0e f4       	brtc	.+2      	; 0xf60 <__addsf3x+0x20>
     f5e:	e0 95       	com	r30
     f60:	0b 2e       	mov	r0, r27
     f62:	ba 2f       	mov	r27, r26
     f64:	a0 2d       	mov	r26, r0
     f66:	0b 01       	movw	r0, r22
     f68:	b9 01       	movw	r22, r18
     f6a:	90 01       	movw	r18, r0
     f6c:	0c 01       	movw	r0, r24
     f6e:	ca 01       	movw	r24, r20
     f70:	a0 01       	movw	r20, r0
     f72:	11 24       	eor	r1, r1
     f74:	ff 27       	eor	r31, r31
     f76:	59 1b       	sub	r21, r25
     f78:	99 f0       	breq	.+38     	; 0xfa0 <__addsf3x+0x60>
     f7a:	59 3f       	cpi	r21, 0xF9	; 249
     f7c:	50 f4       	brcc	.+20     	; 0xf92 <__addsf3x+0x52>
     f7e:	50 3e       	cpi	r21, 0xE0	; 224
     f80:	68 f1       	brcs	.+90     	; 0xfdc <__addsf3x+0x9c>
     f82:	1a 16       	cp	r1, r26
     f84:	f0 40       	sbci	r31, 0x00	; 0
     f86:	a2 2f       	mov	r26, r18
     f88:	23 2f       	mov	r18, r19
     f8a:	34 2f       	mov	r19, r20
     f8c:	44 27       	eor	r20, r20
     f8e:	58 5f       	subi	r21, 0xF8	; 248
     f90:	f3 cf       	rjmp	.-26     	; 0xf78 <__addsf3x+0x38>
     f92:	46 95       	lsr	r20
     f94:	37 95       	ror	r19
     f96:	27 95       	ror	r18
     f98:	a7 95       	ror	r26
     f9a:	f0 40       	sbci	r31, 0x00	; 0
     f9c:	53 95       	inc	r21
     f9e:	c9 f7       	brne	.-14     	; 0xf92 <__addsf3x+0x52>
     fa0:	7e f4       	brtc	.+30     	; 0xfc0 <__addsf3x+0x80>
     fa2:	1f 16       	cp	r1, r31
     fa4:	ba 0b       	sbc	r27, r26
     fa6:	62 0b       	sbc	r22, r18
     fa8:	73 0b       	sbc	r23, r19
     faa:	84 0b       	sbc	r24, r20
     fac:	ba f0       	brmi	.+46     	; 0xfdc <__addsf3x+0x9c>
     fae:	91 50       	subi	r25, 0x01	; 1
     fb0:	a1 f0       	breq	.+40     	; 0xfda <__addsf3x+0x9a>
     fb2:	ff 0f       	add	r31, r31
     fb4:	bb 1f       	adc	r27, r27
     fb6:	66 1f       	adc	r22, r22
     fb8:	77 1f       	adc	r23, r23
     fba:	88 1f       	adc	r24, r24
     fbc:	c2 f7       	brpl	.-16     	; 0xfae <__addsf3x+0x6e>
     fbe:	0e c0       	rjmp	.+28     	; 0xfdc <__addsf3x+0x9c>
     fc0:	ba 0f       	add	r27, r26
     fc2:	62 1f       	adc	r22, r18
     fc4:	73 1f       	adc	r23, r19
     fc6:	84 1f       	adc	r24, r20
     fc8:	48 f4       	brcc	.+18     	; 0xfdc <__addsf3x+0x9c>
     fca:	87 95       	ror	r24
     fcc:	77 95       	ror	r23
     fce:	67 95       	ror	r22
     fd0:	b7 95       	ror	r27
     fd2:	f7 95       	ror	r31
     fd4:	9e 3f       	cpi	r25, 0xFE	; 254
     fd6:	08 f0       	brcs	.+2      	; 0xfda <__addsf3x+0x9a>
     fd8:	b0 cf       	rjmp	.-160    	; 0xf3a <__addsf3+0x28>
     fda:	93 95       	inc	r25
     fdc:	88 0f       	add	r24, r24
     fde:	08 f0       	brcs	.+2      	; 0xfe2 <__addsf3x+0xa2>
     fe0:	99 27       	eor	r25, r25
     fe2:	ee 0f       	add	r30, r30
     fe4:	97 95       	ror	r25
     fe6:	87 95       	ror	r24
     fe8:	08 95       	ret

00000fea <__cmpsf2>:
     fea:	0e 94 df 08 	call	0x11be	; 0x11be <__fp_cmp>
     fee:	08 f4       	brcc	.+2      	; 0xff2 <__cmpsf2+0x8>
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	08 95       	ret

00000ff4 <__divsf3>:
     ff4:	0e 94 0e 08 	call	0x101c	; 0x101c <__divsf3x>
     ff8:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__fp_round>
     ffc:	0e 94 13 09 	call	0x1226	; 0x1226 <__fp_pscB>
    1000:	58 f0       	brcs	.+22     	; 0x1018 <__divsf3+0x24>
    1002:	0e 94 0c 09 	call	0x1218	; 0x1218 <__fp_pscA>
    1006:	40 f0       	brcs	.+16     	; 0x1018 <__divsf3+0x24>
    1008:	29 f4       	brne	.+10     	; 0x1014 <__divsf3+0x20>
    100a:	5f 3f       	cpi	r21, 0xFF	; 255
    100c:	29 f0       	breq	.+10     	; 0x1018 <__divsf3+0x24>
    100e:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_inf>
    1012:	51 11       	cpse	r21, r1
    1014:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__fp_szero>
    1018:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__fp_nan>

0000101c <__divsf3x>:
    101c:	0e 94 2b 09 	call	0x1256	; 0x1256 <__fp_split3>
    1020:	68 f3       	brcs	.-38     	; 0xffc <__divsf3+0x8>

00001022 <__divsf3_pse>:
    1022:	99 23       	and	r25, r25
    1024:	b1 f3       	breq	.-20     	; 0x1012 <__divsf3+0x1e>
    1026:	55 23       	and	r21, r21
    1028:	91 f3       	breq	.-28     	; 0x100e <__divsf3+0x1a>
    102a:	95 1b       	sub	r25, r21
    102c:	55 0b       	sbc	r21, r21
    102e:	bb 27       	eor	r27, r27
    1030:	aa 27       	eor	r26, r26
    1032:	62 17       	cp	r22, r18
    1034:	73 07       	cpc	r23, r19
    1036:	84 07       	cpc	r24, r20
    1038:	38 f0       	brcs	.+14     	; 0x1048 <__divsf3_pse+0x26>
    103a:	9f 5f       	subi	r25, 0xFF	; 255
    103c:	5f 4f       	sbci	r21, 0xFF	; 255
    103e:	22 0f       	add	r18, r18
    1040:	33 1f       	adc	r19, r19
    1042:	44 1f       	adc	r20, r20
    1044:	aa 1f       	adc	r26, r26
    1046:	a9 f3       	breq	.-22     	; 0x1032 <__divsf3_pse+0x10>
    1048:	35 d0       	rcall	.+106    	; 0x10b4 <__divsf3_pse+0x92>
    104a:	0e 2e       	mov	r0, r30
    104c:	3a f0       	brmi	.+14     	; 0x105c <__divsf3_pse+0x3a>
    104e:	e0 e8       	ldi	r30, 0x80	; 128
    1050:	32 d0       	rcall	.+100    	; 0x10b6 <__divsf3_pse+0x94>
    1052:	91 50       	subi	r25, 0x01	; 1
    1054:	50 40       	sbci	r21, 0x00	; 0
    1056:	e6 95       	lsr	r30
    1058:	00 1c       	adc	r0, r0
    105a:	ca f7       	brpl	.-14     	; 0x104e <__divsf3_pse+0x2c>
    105c:	2b d0       	rcall	.+86     	; 0x10b4 <__divsf3_pse+0x92>
    105e:	fe 2f       	mov	r31, r30
    1060:	29 d0       	rcall	.+82     	; 0x10b4 <__divsf3_pse+0x92>
    1062:	66 0f       	add	r22, r22
    1064:	77 1f       	adc	r23, r23
    1066:	88 1f       	adc	r24, r24
    1068:	bb 1f       	adc	r27, r27
    106a:	26 17       	cp	r18, r22
    106c:	37 07       	cpc	r19, r23
    106e:	48 07       	cpc	r20, r24
    1070:	ab 07       	cpc	r26, r27
    1072:	b0 e8       	ldi	r27, 0x80	; 128
    1074:	09 f0       	breq	.+2      	; 0x1078 <__divsf3_pse+0x56>
    1076:	bb 0b       	sbc	r27, r27
    1078:	80 2d       	mov	r24, r0
    107a:	bf 01       	movw	r22, r30
    107c:	ff 27       	eor	r31, r31
    107e:	93 58       	subi	r25, 0x83	; 131
    1080:	5f 4f       	sbci	r21, 0xFF	; 255
    1082:	3a f0       	brmi	.+14     	; 0x1092 <__divsf3_pse+0x70>
    1084:	9e 3f       	cpi	r25, 0xFE	; 254
    1086:	51 05       	cpc	r21, r1
    1088:	78 f0       	brcs	.+30     	; 0x10a8 <__divsf3_pse+0x86>
    108a:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_inf>
    108e:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__fp_szero>
    1092:	5f 3f       	cpi	r21, 0xFF	; 255
    1094:	e4 f3       	brlt	.-8      	; 0x108e <__divsf3_pse+0x6c>
    1096:	98 3e       	cpi	r25, 0xE8	; 232
    1098:	d4 f3       	brlt	.-12     	; 0x108e <__divsf3_pse+0x6c>
    109a:	86 95       	lsr	r24
    109c:	77 95       	ror	r23
    109e:	67 95       	ror	r22
    10a0:	b7 95       	ror	r27
    10a2:	f7 95       	ror	r31
    10a4:	9f 5f       	subi	r25, 0xFF	; 255
    10a6:	c9 f7       	brne	.-14     	; 0x109a <__divsf3_pse+0x78>
    10a8:	88 0f       	add	r24, r24
    10aa:	91 1d       	adc	r25, r1
    10ac:	96 95       	lsr	r25
    10ae:	87 95       	ror	r24
    10b0:	97 f9       	bld	r25, 7
    10b2:	08 95       	ret
    10b4:	e1 e0       	ldi	r30, 0x01	; 1
    10b6:	66 0f       	add	r22, r22
    10b8:	77 1f       	adc	r23, r23
    10ba:	88 1f       	adc	r24, r24
    10bc:	bb 1f       	adc	r27, r27
    10be:	62 17       	cp	r22, r18
    10c0:	73 07       	cpc	r23, r19
    10c2:	84 07       	cpc	r24, r20
    10c4:	ba 07       	cpc	r27, r26
    10c6:	20 f0       	brcs	.+8      	; 0x10d0 <__divsf3_pse+0xae>
    10c8:	62 1b       	sub	r22, r18
    10ca:	73 0b       	sbc	r23, r19
    10cc:	84 0b       	sbc	r24, r20
    10ce:	ba 0b       	sbc	r27, r26
    10d0:	ee 1f       	adc	r30, r30
    10d2:	88 f7       	brcc	.-30     	; 0x10b6 <__divsf3_pse+0x94>
    10d4:	e0 95       	com	r30
    10d6:	08 95       	ret

000010d8 <__fixsfsi>:
    10d8:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fixunssfsi>
    10dc:	68 94       	set
    10de:	b1 11       	cpse	r27, r1
    10e0:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__fp_szero>
    10e4:	08 95       	ret

000010e6 <__fixunssfsi>:
    10e6:	0e 94 33 09 	call	0x1266	; 0x1266 <__fp_splitA>
    10ea:	88 f0       	brcs	.+34     	; 0x110e <__fixunssfsi+0x28>
    10ec:	9f 57       	subi	r25, 0x7F	; 127
    10ee:	98 f0       	brcs	.+38     	; 0x1116 <__fixunssfsi+0x30>
    10f0:	b9 2f       	mov	r27, r25
    10f2:	99 27       	eor	r25, r25
    10f4:	b7 51       	subi	r27, 0x17	; 23
    10f6:	b0 f0       	brcs	.+44     	; 0x1124 <__fixunssfsi+0x3e>
    10f8:	e1 f0       	breq	.+56     	; 0x1132 <__fixunssfsi+0x4c>
    10fa:	66 0f       	add	r22, r22
    10fc:	77 1f       	adc	r23, r23
    10fe:	88 1f       	adc	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	1a f0       	brmi	.+6      	; 0x110a <__fixunssfsi+0x24>
    1104:	ba 95       	dec	r27
    1106:	c9 f7       	brne	.-14     	; 0x10fa <__fixunssfsi+0x14>
    1108:	14 c0       	rjmp	.+40     	; 0x1132 <__fixunssfsi+0x4c>
    110a:	b1 30       	cpi	r27, 0x01	; 1
    110c:	91 f0       	breq	.+36     	; 0x1132 <__fixunssfsi+0x4c>
    110e:	0e 94 4d 09 	call	0x129a	; 0x129a <__fp_zero>
    1112:	b1 e0       	ldi	r27, 0x01	; 1
    1114:	08 95       	ret
    1116:	0c 94 4d 09 	jmp	0x129a	; 0x129a <__fp_zero>
    111a:	67 2f       	mov	r22, r23
    111c:	78 2f       	mov	r23, r24
    111e:	88 27       	eor	r24, r24
    1120:	b8 5f       	subi	r27, 0xF8	; 248
    1122:	39 f0       	breq	.+14     	; 0x1132 <__fixunssfsi+0x4c>
    1124:	b9 3f       	cpi	r27, 0xF9	; 249
    1126:	cc f3       	brlt	.-14     	; 0x111a <__fixunssfsi+0x34>
    1128:	86 95       	lsr	r24
    112a:	77 95       	ror	r23
    112c:	67 95       	ror	r22
    112e:	b3 95       	inc	r27
    1130:	d9 f7       	brne	.-10     	; 0x1128 <__fixunssfsi+0x42>
    1132:	3e f4       	brtc	.+14     	; 0x1142 <__fixunssfsi+0x5c>
    1134:	90 95       	com	r25
    1136:	80 95       	com	r24
    1138:	70 95       	com	r23
    113a:	61 95       	neg	r22
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	8f 4f       	sbci	r24, 0xFF	; 255
    1140:	9f 4f       	sbci	r25, 0xFF	; 255
    1142:	08 95       	ret

00001144 <__floatunsisf>:
    1144:	e8 94       	clt
    1146:	09 c0       	rjmp	.+18     	; 0x115a <__floatsisf+0x12>

00001148 <__floatsisf>:
    1148:	97 fb       	bst	r25, 7
    114a:	3e f4       	brtc	.+14     	; 0x115a <__floatsisf+0x12>
    114c:	90 95       	com	r25
    114e:	80 95       	com	r24
    1150:	70 95       	com	r23
    1152:	61 95       	neg	r22
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	8f 4f       	sbci	r24, 0xFF	; 255
    1158:	9f 4f       	sbci	r25, 0xFF	; 255
    115a:	99 23       	and	r25, r25
    115c:	a9 f0       	breq	.+42     	; 0x1188 <__floatsisf+0x40>
    115e:	f9 2f       	mov	r31, r25
    1160:	96 e9       	ldi	r25, 0x96	; 150
    1162:	bb 27       	eor	r27, r27
    1164:	93 95       	inc	r25
    1166:	f6 95       	lsr	r31
    1168:	87 95       	ror	r24
    116a:	77 95       	ror	r23
    116c:	67 95       	ror	r22
    116e:	b7 95       	ror	r27
    1170:	f1 11       	cpse	r31, r1
    1172:	f8 cf       	rjmp	.-16     	; 0x1164 <__floatsisf+0x1c>
    1174:	fa f4       	brpl	.+62     	; 0x11b4 <__floatsisf+0x6c>
    1176:	bb 0f       	add	r27, r27
    1178:	11 f4       	brne	.+4      	; 0x117e <__floatsisf+0x36>
    117a:	60 ff       	sbrs	r22, 0
    117c:	1b c0       	rjmp	.+54     	; 0x11b4 <__floatsisf+0x6c>
    117e:	6f 5f       	subi	r22, 0xFF	; 255
    1180:	7f 4f       	sbci	r23, 0xFF	; 255
    1182:	8f 4f       	sbci	r24, 0xFF	; 255
    1184:	9f 4f       	sbci	r25, 0xFF	; 255
    1186:	16 c0       	rjmp	.+44     	; 0x11b4 <__floatsisf+0x6c>
    1188:	88 23       	and	r24, r24
    118a:	11 f0       	breq	.+4      	; 0x1190 <__floatsisf+0x48>
    118c:	96 e9       	ldi	r25, 0x96	; 150
    118e:	11 c0       	rjmp	.+34     	; 0x11b2 <__floatsisf+0x6a>
    1190:	77 23       	and	r23, r23
    1192:	21 f0       	breq	.+8      	; 0x119c <__floatsisf+0x54>
    1194:	9e e8       	ldi	r25, 0x8E	; 142
    1196:	87 2f       	mov	r24, r23
    1198:	76 2f       	mov	r23, r22
    119a:	05 c0       	rjmp	.+10     	; 0x11a6 <__floatsisf+0x5e>
    119c:	66 23       	and	r22, r22
    119e:	71 f0       	breq	.+28     	; 0x11bc <__floatsisf+0x74>
    11a0:	96 e8       	ldi	r25, 0x86	; 134
    11a2:	86 2f       	mov	r24, r22
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	2a f0       	brmi	.+10     	; 0x11b4 <__floatsisf+0x6c>
    11aa:	9a 95       	dec	r25
    11ac:	66 0f       	add	r22, r22
    11ae:	77 1f       	adc	r23, r23
    11b0:	88 1f       	adc	r24, r24
    11b2:	da f7       	brpl	.-10     	; 0x11aa <__floatsisf+0x62>
    11b4:	88 0f       	add	r24, r24
    11b6:	96 95       	lsr	r25
    11b8:	87 95       	ror	r24
    11ba:	97 f9       	bld	r25, 7
    11bc:	08 95       	ret

000011be <__fp_cmp>:
    11be:	99 0f       	add	r25, r25
    11c0:	00 08       	sbc	r0, r0
    11c2:	55 0f       	add	r21, r21
    11c4:	aa 0b       	sbc	r26, r26
    11c6:	e0 e8       	ldi	r30, 0x80	; 128
    11c8:	fe ef       	ldi	r31, 0xFE	; 254
    11ca:	16 16       	cp	r1, r22
    11cc:	17 06       	cpc	r1, r23
    11ce:	e8 07       	cpc	r30, r24
    11d0:	f9 07       	cpc	r31, r25
    11d2:	c0 f0       	brcs	.+48     	; 0x1204 <__fp_cmp+0x46>
    11d4:	12 16       	cp	r1, r18
    11d6:	13 06       	cpc	r1, r19
    11d8:	e4 07       	cpc	r30, r20
    11da:	f5 07       	cpc	r31, r21
    11dc:	98 f0       	brcs	.+38     	; 0x1204 <__fp_cmp+0x46>
    11de:	62 1b       	sub	r22, r18
    11e0:	73 0b       	sbc	r23, r19
    11e2:	84 0b       	sbc	r24, r20
    11e4:	95 0b       	sbc	r25, r21
    11e6:	39 f4       	brne	.+14     	; 0x11f6 <__fp_cmp+0x38>
    11e8:	0a 26       	eor	r0, r26
    11ea:	61 f0       	breq	.+24     	; 0x1204 <__fp_cmp+0x46>
    11ec:	23 2b       	or	r18, r19
    11ee:	24 2b       	or	r18, r20
    11f0:	25 2b       	or	r18, r21
    11f2:	21 f4       	brne	.+8      	; 0x11fc <__fp_cmp+0x3e>
    11f4:	08 95       	ret
    11f6:	0a 26       	eor	r0, r26
    11f8:	09 f4       	brne	.+2      	; 0x11fc <__fp_cmp+0x3e>
    11fa:	a1 40       	sbci	r26, 0x01	; 1
    11fc:	a6 95       	lsr	r26
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	81 1d       	adc	r24, r1
    1202:	81 1d       	adc	r24, r1
    1204:	08 95       	ret

00001206 <__fp_inf>:
    1206:	97 f9       	bld	r25, 7
    1208:	9f 67       	ori	r25, 0x7F	; 127
    120a:	80 e8       	ldi	r24, 0x80	; 128
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	08 95       	ret

00001212 <__fp_nan>:
    1212:	9f ef       	ldi	r25, 0xFF	; 255
    1214:	80 ec       	ldi	r24, 0xC0	; 192
    1216:	08 95       	ret

00001218 <__fp_pscA>:
    1218:	00 24       	eor	r0, r0
    121a:	0a 94       	dec	r0
    121c:	16 16       	cp	r1, r22
    121e:	17 06       	cpc	r1, r23
    1220:	18 06       	cpc	r1, r24
    1222:	09 06       	cpc	r0, r25
    1224:	08 95       	ret

00001226 <__fp_pscB>:
    1226:	00 24       	eor	r0, r0
    1228:	0a 94       	dec	r0
    122a:	12 16       	cp	r1, r18
    122c:	13 06       	cpc	r1, r19
    122e:	14 06       	cpc	r1, r20
    1230:	05 06       	cpc	r0, r21
    1232:	08 95       	ret

00001234 <__fp_round>:
    1234:	09 2e       	mov	r0, r25
    1236:	03 94       	inc	r0
    1238:	00 0c       	add	r0, r0
    123a:	11 f4       	brne	.+4      	; 0x1240 <__fp_round+0xc>
    123c:	88 23       	and	r24, r24
    123e:	52 f0       	brmi	.+20     	; 0x1254 <__fp_round+0x20>
    1240:	bb 0f       	add	r27, r27
    1242:	40 f4       	brcc	.+16     	; 0x1254 <__fp_round+0x20>
    1244:	bf 2b       	or	r27, r31
    1246:	11 f4       	brne	.+4      	; 0x124c <__fp_round+0x18>
    1248:	60 ff       	sbrs	r22, 0
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <__fp_round+0x20>
    124c:	6f 5f       	subi	r22, 0xFF	; 255
    124e:	7f 4f       	sbci	r23, 0xFF	; 255
    1250:	8f 4f       	sbci	r24, 0xFF	; 255
    1252:	9f 4f       	sbci	r25, 0xFF	; 255
    1254:	08 95       	ret

00001256 <__fp_split3>:
    1256:	57 fd       	sbrc	r21, 7
    1258:	90 58       	subi	r25, 0x80	; 128
    125a:	44 0f       	add	r20, r20
    125c:	55 1f       	adc	r21, r21
    125e:	59 f0       	breq	.+22     	; 0x1276 <__fp_splitA+0x10>
    1260:	5f 3f       	cpi	r21, 0xFF	; 255
    1262:	71 f0       	breq	.+28     	; 0x1280 <__fp_splitA+0x1a>
    1264:	47 95       	ror	r20

00001266 <__fp_splitA>:
    1266:	88 0f       	add	r24, r24
    1268:	97 fb       	bst	r25, 7
    126a:	99 1f       	adc	r25, r25
    126c:	61 f0       	breq	.+24     	; 0x1286 <__fp_splitA+0x20>
    126e:	9f 3f       	cpi	r25, 0xFF	; 255
    1270:	79 f0       	breq	.+30     	; 0x1290 <__fp_splitA+0x2a>
    1272:	87 95       	ror	r24
    1274:	08 95       	ret
    1276:	12 16       	cp	r1, r18
    1278:	13 06       	cpc	r1, r19
    127a:	14 06       	cpc	r1, r20
    127c:	55 1f       	adc	r21, r21
    127e:	f2 cf       	rjmp	.-28     	; 0x1264 <__fp_split3+0xe>
    1280:	46 95       	lsr	r20
    1282:	f1 df       	rcall	.-30     	; 0x1266 <__fp_splitA>
    1284:	08 c0       	rjmp	.+16     	; 0x1296 <__fp_splitA+0x30>
    1286:	16 16       	cp	r1, r22
    1288:	17 06       	cpc	r1, r23
    128a:	18 06       	cpc	r1, r24
    128c:	99 1f       	adc	r25, r25
    128e:	f1 cf       	rjmp	.-30     	; 0x1272 <__fp_splitA+0xc>
    1290:	86 95       	lsr	r24
    1292:	71 05       	cpc	r23, r1
    1294:	61 05       	cpc	r22, r1
    1296:	08 94       	sec
    1298:	08 95       	ret

0000129a <__fp_zero>:
    129a:	e8 94       	clt

0000129c <__fp_szero>:
    129c:	bb 27       	eor	r27, r27
    129e:	66 27       	eor	r22, r22
    12a0:	77 27       	eor	r23, r23
    12a2:	cb 01       	movw	r24, r22
    12a4:	97 f9       	bld	r25, 7
    12a6:	08 95       	ret

000012a8 <__gesf2>:
    12a8:	0e 94 df 08 	call	0x11be	; 0x11be <__fp_cmp>
    12ac:	08 f4       	brcc	.+2      	; 0x12b0 <__gesf2+0x8>
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	08 95       	ret

000012b2 <__mulsf3>:
    12b2:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3x>
    12b6:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__fp_round>
    12ba:	0e 94 0c 09 	call	0x1218	; 0x1218 <__fp_pscA>
    12be:	38 f0       	brcs	.+14     	; 0x12ce <__mulsf3+0x1c>
    12c0:	0e 94 13 09 	call	0x1226	; 0x1226 <__fp_pscB>
    12c4:	20 f0       	brcs	.+8      	; 0x12ce <__mulsf3+0x1c>
    12c6:	95 23       	and	r25, r21
    12c8:	11 f0       	breq	.+4      	; 0x12ce <__mulsf3+0x1c>
    12ca:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_inf>
    12ce:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__fp_nan>
    12d2:	11 24       	eor	r1, r1
    12d4:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__fp_szero>

000012d8 <__mulsf3x>:
    12d8:	0e 94 2b 09 	call	0x1256	; 0x1256 <__fp_split3>
    12dc:	70 f3       	brcs	.-36     	; 0x12ba <__mulsf3+0x8>

000012de <__mulsf3_pse>:
    12de:	95 9f       	mul	r25, r21
    12e0:	c1 f3       	breq	.-16     	; 0x12d2 <__mulsf3+0x20>
    12e2:	95 0f       	add	r25, r21
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	55 1f       	adc	r21, r21
    12e8:	62 9f       	mul	r22, r18
    12ea:	f0 01       	movw	r30, r0
    12ec:	72 9f       	mul	r23, r18
    12ee:	bb 27       	eor	r27, r27
    12f0:	f0 0d       	add	r31, r0
    12f2:	b1 1d       	adc	r27, r1
    12f4:	63 9f       	mul	r22, r19
    12f6:	aa 27       	eor	r26, r26
    12f8:	f0 0d       	add	r31, r0
    12fa:	b1 1d       	adc	r27, r1
    12fc:	aa 1f       	adc	r26, r26
    12fe:	64 9f       	mul	r22, r20
    1300:	66 27       	eor	r22, r22
    1302:	b0 0d       	add	r27, r0
    1304:	a1 1d       	adc	r26, r1
    1306:	66 1f       	adc	r22, r22
    1308:	82 9f       	mul	r24, r18
    130a:	22 27       	eor	r18, r18
    130c:	b0 0d       	add	r27, r0
    130e:	a1 1d       	adc	r26, r1
    1310:	62 1f       	adc	r22, r18
    1312:	73 9f       	mul	r23, r19
    1314:	b0 0d       	add	r27, r0
    1316:	a1 1d       	adc	r26, r1
    1318:	62 1f       	adc	r22, r18
    131a:	83 9f       	mul	r24, r19
    131c:	a0 0d       	add	r26, r0
    131e:	61 1d       	adc	r22, r1
    1320:	22 1f       	adc	r18, r18
    1322:	74 9f       	mul	r23, r20
    1324:	33 27       	eor	r19, r19
    1326:	a0 0d       	add	r26, r0
    1328:	61 1d       	adc	r22, r1
    132a:	23 1f       	adc	r18, r19
    132c:	84 9f       	mul	r24, r20
    132e:	60 0d       	add	r22, r0
    1330:	21 1d       	adc	r18, r1
    1332:	82 2f       	mov	r24, r18
    1334:	76 2f       	mov	r23, r22
    1336:	6a 2f       	mov	r22, r26
    1338:	11 24       	eor	r1, r1
    133a:	9f 57       	subi	r25, 0x7F	; 127
    133c:	50 40       	sbci	r21, 0x00	; 0
    133e:	9a f0       	brmi	.+38     	; 0x1366 <__mulsf3_pse+0x88>
    1340:	f1 f0       	breq	.+60     	; 0x137e <__mulsf3_pse+0xa0>
    1342:	88 23       	and	r24, r24
    1344:	4a f0       	brmi	.+18     	; 0x1358 <__mulsf3_pse+0x7a>
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	bb 1f       	adc	r27, r27
    134c:	66 1f       	adc	r22, r22
    134e:	77 1f       	adc	r23, r23
    1350:	88 1f       	adc	r24, r24
    1352:	91 50       	subi	r25, 0x01	; 1
    1354:	50 40       	sbci	r21, 0x00	; 0
    1356:	a9 f7       	brne	.-22     	; 0x1342 <__mulsf3_pse+0x64>
    1358:	9e 3f       	cpi	r25, 0xFE	; 254
    135a:	51 05       	cpc	r21, r1
    135c:	80 f0       	brcs	.+32     	; 0x137e <__mulsf3_pse+0xa0>
    135e:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_inf>
    1362:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__fp_szero>
    1366:	5f 3f       	cpi	r21, 0xFF	; 255
    1368:	e4 f3       	brlt	.-8      	; 0x1362 <__mulsf3_pse+0x84>
    136a:	98 3e       	cpi	r25, 0xE8	; 232
    136c:	d4 f3       	brlt	.-12     	; 0x1362 <__mulsf3_pse+0x84>
    136e:	86 95       	lsr	r24
    1370:	77 95       	ror	r23
    1372:	67 95       	ror	r22
    1374:	b7 95       	ror	r27
    1376:	f7 95       	ror	r31
    1378:	e7 95       	ror	r30
    137a:	9f 5f       	subi	r25, 0xFF	; 255
    137c:	c1 f7       	brne	.-16     	; 0x136e <__mulsf3_pse+0x90>
    137e:	fe 2b       	or	r31, r30
    1380:	88 0f       	add	r24, r24
    1382:	91 1d       	adc	r25, r1
    1384:	96 95       	lsr	r25
    1386:	87 95       	ror	r24
    1388:	97 f9       	bld	r25, 7
    138a:	08 95       	ret

0000138c <__tablejump2__>:
    138c:	ee 0f       	add	r30, r30
    138e:	ff 1f       	adc	r31, r31
    1390:	05 90       	lpm	r0, Z+
    1392:	f4 91       	lpm	r31, Z
    1394:	e0 2d       	mov	r30, r0
    1396:	09 94       	ijmp

00001398 <sprintf>:
    1398:	ae e0       	ldi	r26, 0x0E	; 14
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e2 ed       	ldi	r30, 0xD2	; 210
    139e:	f9 e0       	ldi	r31, 0x09	; 9
    13a0:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__prologue_saves__+0x1c>
    13a4:	0d 89       	ldd	r16, Y+21	; 0x15
    13a6:	1e 89       	ldd	r17, Y+22	; 0x16
    13a8:	86 e0       	ldi	r24, 0x06	; 6
    13aa:	8c 83       	std	Y+4, r24	; 0x04
    13ac:	1a 83       	std	Y+2, r17	; 0x02
    13ae:	09 83       	std	Y+1, r16	; 0x01
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
    13b2:	9f e7       	ldi	r25, 0x7F	; 127
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	ae 01       	movw	r20, r28
    13ba:	47 5e       	subi	r20, 0xE7	; 231
    13bc:	5f 4f       	sbci	r21, 0xFF	; 255
    13be:	6f 89       	ldd	r22, Y+23	; 0x17
    13c0:	78 8d       	ldd	r23, Y+24	; 0x18
    13c2:	ce 01       	movw	r24, r28
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <vfprintf>
    13ca:	ef 81       	ldd	r30, Y+7	; 0x07
    13cc:	f8 85       	ldd	r31, Y+8	; 0x08
    13ce:	e0 0f       	add	r30, r16
    13d0:	f1 1f       	adc	r31, r17
    13d2:	10 82       	st	Z, r1
    13d4:	2e 96       	adiw	r28, 0x0e	; 14
    13d6:	e4 e0       	ldi	r30, 0x04	; 4
    13d8:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__epilogue_restores__+0x1c>

000013dc <vfprintf>:
    13dc:	ab e0       	ldi	r26, 0x0B	; 11
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e4 ef       	ldi	r30, 0xF4	; 244
    13e2:	f9 e0       	ldi	r31, 0x09	; 9
    13e4:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__prologue_saves__>
    13e8:	6c 01       	movw	r12, r24
    13ea:	7b 01       	movw	r14, r22
    13ec:	8a 01       	movw	r16, r20
    13ee:	fc 01       	movw	r30, r24
    13f0:	17 82       	std	Z+7, r1	; 0x07
    13f2:	16 82       	std	Z+6, r1	; 0x06
    13f4:	83 81       	ldd	r24, Z+3	; 0x03
    13f6:	81 ff       	sbrs	r24, 1
    13f8:	cc c1       	rjmp	.+920    	; 0x1792 <vfprintf+0x3b6>
    13fa:	ce 01       	movw	r24, r28
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	3c 01       	movw	r6, r24
    1400:	f6 01       	movw	r30, r12
    1402:	93 81       	ldd	r25, Z+3	; 0x03
    1404:	f7 01       	movw	r30, r14
    1406:	93 fd       	sbrc	r25, 3
    1408:	85 91       	lpm	r24, Z+
    140a:	93 ff       	sbrs	r25, 3
    140c:	81 91       	ld	r24, Z+
    140e:	7f 01       	movw	r14, r30
    1410:	88 23       	and	r24, r24
    1412:	09 f4       	brne	.+2      	; 0x1416 <vfprintf+0x3a>
    1414:	ba c1       	rjmp	.+884    	; 0x178a <vfprintf+0x3ae>
    1416:	85 32       	cpi	r24, 0x25	; 37
    1418:	39 f4       	brne	.+14     	; 0x1428 <vfprintf+0x4c>
    141a:	93 fd       	sbrc	r25, 3
    141c:	85 91       	lpm	r24, Z+
    141e:	93 ff       	sbrs	r25, 3
    1420:	81 91       	ld	r24, Z+
    1422:	7f 01       	movw	r14, r30
    1424:	85 32       	cpi	r24, 0x25	; 37
    1426:	29 f4       	brne	.+10     	; 0x1432 <vfprintf+0x56>
    1428:	b6 01       	movw	r22, r12
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <fputc>
    1430:	e7 cf       	rjmp	.-50     	; 0x1400 <vfprintf+0x24>
    1432:	91 2c       	mov	r9, r1
    1434:	21 2c       	mov	r2, r1
    1436:	31 2c       	mov	r3, r1
    1438:	ff e1       	ldi	r31, 0x1F	; 31
    143a:	f3 15       	cp	r31, r3
    143c:	d8 f0       	brcs	.+54     	; 0x1474 <vfprintf+0x98>
    143e:	8b 32       	cpi	r24, 0x2B	; 43
    1440:	79 f0       	breq	.+30     	; 0x1460 <vfprintf+0x84>
    1442:	38 f4       	brcc	.+14     	; 0x1452 <vfprintf+0x76>
    1444:	80 32       	cpi	r24, 0x20	; 32
    1446:	79 f0       	breq	.+30     	; 0x1466 <vfprintf+0x8a>
    1448:	83 32       	cpi	r24, 0x23	; 35
    144a:	a1 f4       	brne	.+40     	; 0x1474 <vfprintf+0x98>
    144c:	23 2d       	mov	r18, r3
    144e:	20 61       	ori	r18, 0x10	; 16
    1450:	1d c0       	rjmp	.+58     	; 0x148c <vfprintf+0xb0>
    1452:	8d 32       	cpi	r24, 0x2D	; 45
    1454:	61 f0       	breq	.+24     	; 0x146e <vfprintf+0x92>
    1456:	80 33       	cpi	r24, 0x30	; 48
    1458:	69 f4       	brne	.+26     	; 0x1474 <vfprintf+0x98>
    145a:	23 2d       	mov	r18, r3
    145c:	21 60       	ori	r18, 0x01	; 1
    145e:	16 c0       	rjmp	.+44     	; 0x148c <vfprintf+0xb0>
    1460:	83 2d       	mov	r24, r3
    1462:	82 60       	ori	r24, 0x02	; 2
    1464:	38 2e       	mov	r3, r24
    1466:	e3 2d       	mov	r30, r3
    1468:	e4 60       	ori	r30, 0x04	; 4
    146a:	3e 2e       	mov	r3, r30
    146c:	2a c0       	rjmp	.+84     	; 0x14c2 <vfprintf+0xe6>
    146e:	f3 2d       	mov	r31, r3
    1470:	f8 60       	ori	r31, 0x08	; 8
    1472:	1d c0       	rjmp	.+58     	; 0x14ae <vfprintf+0xd2>
    1474:	37 fc       	sbrc	r3, 7
    1476:	2d c0       	rjmp	.+90     	; 0x14d2 <vfprintf+0xf6>
    1478:	20 ed       	ldi	r18, 0xD0	; 208
    147a:	28 0f       	add	r18, r24
    147c:	2a 30       	cpi	r18, 0x0A	; 10
    147e:	40 f0       	brcs	.+16     	; 0x1490 <vfprintf+0xb4>
    1480:	8e 32       	cpi	r24, 0x2E	; 46
    1482:	b9 f4       	brne	.+46     	; 0x14b2 <vfprintf+0xd6>
    1484:	36 fc       	sbrc	r3, 6
    1486:	81 c1       	rjmp	.+770    	; 0x178a <vfprintf+0x3ae>
    1488:	23 2d       	mov	r18, r3
    148a:	20 64       	ori	r18, 0x40	; 64
    148c:	32 2e       	mov	r3, r18
    148e:	19 c0       	rjmp	.+50     	; 0x14c2 <vfprintf+0xe6>
    1490:	36 fe       	sbrs	r3, 6
    1492:	06 c0       	rjmp	.+12     	; 0x14a0 <vfprintf+0xc4>
    1494:	8a e0       	ldi	r24, 0x0A	; 10
    1496:	98 9e       	mul	r9, r24
    1498:	20 0d       	add	r18, r0
    149a:	11 24       	eor	r1, r1
    149c:	92 2e       	mov	r9, r18
    149e:	11 c0       	rjmp	.+34     	; 0x14c2 <vfprintf+0xe6>
    14a0:	ea e0       	ldi	r30, 0x0A	; 10
    14a2:	2e 9e       	mul	r2, r30
    14a4:	20 0d       	add	r18, r0
    14a6:	11 24       	eor	r1, r1
    14a8:	22 2e       	mov	r2, r18
    14aa:	f3 2d       	mov	r31, r3
    14ac:	f0 62       	ori	r31, 0x20	; 32
    14ae:	3f 2e       	mov	r3, r31
    14b0:	08 c0       	rjmp	.+16     	; 0x14c2 <vfprintf+0xe6>
    14b2:	8c 36       	cpi	r24, 0x6C	; 108
    14b4:	21 f4       	brne	.+8      	; 0x14be <vfprintf+0xe2>
    14b6:	83 2d       	mov	r24, r3
    14b8:	80 68       	ori	r24, 0x80	; 128
    14ba:	38 2e       	mov	r3, r24
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <vfprintf+0xe6>
    14be:	88 36       	cpi	r24, 0x68	; 104
    14c0:	41 f4       	brne	.+16     	; 0x14d2 <vfprintf+0xf6>
    14c2:	f7 01       	movw	r30, r14
    14c4:	93 fd       	sbrc	r25, 3
    14c6:	85 91       	lpm	r24, Z+
    14c8:	93 ff       	sbrs	r25, 3
    14ca:	81 91       	ld	r24, Z+
    14cc:	7f 01       	movw	r14, r30
    14ce:	81 11       	cpse	r24, r1
    14d0:	b3 cf       	rjmp	.-154    	; 0x1438 <vfprintf+0x5c>
    14d2:	98 2f       	mov	r25, r24
    14d4:	9f 7d       	andi	r25, 0xDF	; 223
    14d6:	95 54       	subi	r25, 0x45	; 69
    14d8:	93 30       	cpi	r25, 0x03	; 3
    14da:	28 f4       	brcc	.+10     	; 0x14e6 <vfprintf+0x10a>
    14dc:	0c 5f       	subi	r16, 0xFC	; 252
    14de:	1f 4f       	sbci	r17, 0xFF	; 255
    14e0:	9f e3       	ldi	r25, 0x3F	; 63
    14e2:	99 83       	std	Y+1, r25	; 0x01
    14e4:	0d c0       	rjmp	.+26     	; 0x1500 <vfprintf+0x124>
    14e6:	83 36       	cpi	r24, 0x63	; 99
    14e8:	31 f0       	breq	.+12     	; 0x14f6 <vfprintf+0x11a>
    14ea:	83 37       	cpi	r24, 0x73	; 115
    14ec:	71 f0       	breq	.+28     	; 0x150a <vfprintf+0x12e>
    14ee:	83 35       	cpi	r24, 0x53	; 83
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <vfprintf+0x118>
    14f2:	59 c0       	rjmp	.+178    	; 0x15a6 <vfprintf+0x1ca>
    14f4:	21 c0       	rjmp	.+66     	; 0x1538 <vfprintf+0x15c>
    14f6:	f8 01       	movw	r30, r16
    14f8:	80 81       	ld	r24, Z
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	0e 5f       	subi	r16, 0xFE	; 254
    14fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1500:	88 24       	eor	r8, r8
    1502:	83 94       	inc	r8
    1504:	91 2c       	mov	r9, r1
    1506:	53 01       	movw	r10, r6
    1508:	13 c0       	rjmp	.+38     	; 0x1530 <vfprintf+0x154>
    150a:	28 01       	movw	r4, r16
    150c:	f2 e0       	ldi	r31, 0x02	; 2
    150e:	4f 0e       	add	r4, r31
    1510:	51 1c       	adc	r5, r1
    1512:	f8 01       	movw	r30, r16
    1514:	a0 80       	ld	r10, Z
    1516:	b1 80       	ldd	r11, Z+1	; 0x01
    1518:	36 fe       	sbrs	r3, 6
    151a:	03 c0       	rjmp	.+6      	; 0x1522 <vfprintf+0x146>
    151c:	69 2d       	mov	r22, r9
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <vfprintf+0x14a>
    1522:	6f ef       	ldi	r22, 0xFF	; 255
    1524:	7f ef       	ldi	r23, 0xFF	; 255
    1526:	c5 01       	movw	r24, r10
    1528:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <strnlen>
    152c:	4c 01       	movw	r8, r24
    152e:	82 01       	movw	r16, r4
    1530:	f3 2d       	mov	r31, r3
    1532:	ff 77       	andi	r31, 0x7F	; 127
    1534:	3f 2e       	mov	r3, r31
    1536:	16 c0       	rjmp	.+44     	; 0x1564 <vfprintf+0x188>
    1538:	28 01       	movw	r4, r16
    153a:	22 e0       	ldi	r18, 0x02	; 2
    153c:	42 0e       	add	r4, r18
    153e:	51 1c       	adc	r5, r1
    1540:	f8 01       	movw	r30, r16
    1542:	a0 80       	ld	r10, Z
    1544:	b1 80       	ldd	r11, Z+1	; 0x01
    1546:	36 fe       	sbrs	r3, 6
    1548:	03 c0       	rjmp	.+6      	; 0x1550 <vfprintf+0x174>
    154a:	69 2d       	mov	r22, r9
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <vfprintf+0x178>
    1550:	6f ef       	ldi	r22, 0xFF	; 255
    1552:	7f ef       	ldi	r23, 0xFF	; 255
    1554:	c5 01       	movw	r24, r10
    1556:	0e 94 cf 0b 	call	0x179e	; 0x179e <strnlen_P>
    155a:	4c 01       	movw	r8, r24
    155c:	f3 2d       	mov	r31, r3
    155e:	f0 68       	ori	r31, 0x80	; 128
    1560:	3f 2e       	mov	r3, r31
    1562:	82 01       	movw	r16, r4
    1564:	33 fc       	sbrc	r3, 3
    1566:	1b c0       	rjmp	.+54     	; 0x159e <vfprintf+0x1c2>
    1568:	82 2d       	mov	r24, r2
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	88 16       	cp	r8, r24
    156e:	99 06       	cpc	r9, r25
    1570:	b0 f4       	brcc	.+44     	; 0x159e <vfprintf+0x1c2>
    1572:	b6 01       	movw	r22, r12
    1574:	80 e2       	ldi	r24, 0x20	; 32
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <fputc>
    157c:	2a 94       	dec	r2
    157e:	f4 cf       	rjmp	.-24     	; 0x1568 <vfprintf+0x18c>
    1580:	f5 01       	movw	r30, r10
    1582:	37 fc       	sbrc	r3, 7
    1584:	85 91       	lpm	r24, Z+
    1586:	37 fe       	sbrs	r3, 7
    1588:	81 91       	ld	r24, Z+
    158a:	5f 01       	movw	r10, r30
    158c:	b6 01       	movw	r22, r12
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <fputc>
    1594:	21 10       	cpse	r2, r1
    1596:	2a 94       	dec	r2
    1598:	21 e0       	ldi	r18, 0x01	; 1
    159a:	82 1a       	sub	r8, r18
    159c:	91 08       	sbc	r9, r1
    159e:	81 14       	cp	r8, r1
    15a0:	91 04       	cpc	r9, r1
    15a2:	71 f7       	brne	.-36     	; 0x1580 <vfprintf+0x1a4>
    15a4:	e8 c0       	rjmp	.+464    	; 0x1776 <vfprintf+0x39a>
    15a6:	84 36       	cpi	r24, 0x64	; 100
    15a8:	11 f0       	breq	.+4      	; 0x15ae <vfprintf+0x1d2>
    15aa:	89 36       	cpi	r24, 0x69	; 105
    15ac:	41 f5       	brne	.+80     	; 0x15fe <vfprintf+0x222>
    15ae:	f8 01       	movw	r30, r16
    15b0:	37 fe       	sbrs	r3, 7
    15b2:	07 c0       	rjmp	.+14     	; 0x15c2 <vfprintf+0x1e6>
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	0c 5f       	subi	r16, 0xFC	; 252
    15be:	1f 4f       	sbci	r17, 0xFF	; 255
    15c0:	08 c0       	rjmp	.+16     	; 0x15d2 <vfprintf+0x1f6>
    15c2:	60 81       	ld	r22, Z
    15c4:	71 81       	ldd	r23, Z+1	; 0x01
    15c6:	07 2e       	mov	r0, r23
    15c8:	00 0c       	add	r0, r0
    15ca:	88 0b       	sbc	r24, r24
    15cc:	99 0b       	sbc	r25, r25
    15ce:	0e 5f       	subi	r16, 0xFE	; 254
    15d0:	1f 4f       	sbci	r17, 0xFF	; 255
    15d2:	f3 2d       	mov	r31, r3
    15d4:	ff 76       	andi	r31, 0x6F	; 111
    15d6:	3f 2e       	mov	r3, r31
    15d8:	97 ff       	sbrs	r25, 7
    15da:	09 c0       	rjmp	.+18     	; 0x15ee <vfprintf+0x212>
    15dc:	90 95       	com	r25
    15de:	80 95       	com	r24
    15e0:	70 95       	com	r23
    15e2:	61 95       	neg	r22
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255
    15e6:	8f 4f       	sbci	r24, 0xFF	; 255
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ea:	f0 68       	ori	r31, 0x80	; 128
    15ec:	3f 2e       	mov	r3, r31
    15ee:	2a e0       	ldi	r18, 0x0A	; 10
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	a3 01       	movw	r20, r6
    15f4:	0e 94 21 0c 	call	0x1842	; 0x1842 <__ultoa_invert>
    15f8:	88 2e       	mov	r8, r24
    15fa:	86 18       	sub	r8, r6
    15fc:	45 c0       	rjmp	.+138    	; 0x1688 <vfprintf+0x2ac>
    15fe:	85 37       	cpi	r24, 0x75	; 117
    1600:	31 f4       	brne	.+12     	; 0x160e <vfprintf+0x232>
    1602:	23 2d       	mov	r18, r3
    1604:	2f 7e       	andi	r18, 0xEF	; 239
    1606:	b2 2e       	mov	r11, r18
    1608:	2a e0       	ldi	r18, 0x0A	; 10
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	25 c0       	rjmp	.+74     	; 0x1658 <vfprintf+0x27c>
    160e:	93 2d       	mov	r25, r3
    1610:	99 7f       	andi	r25, 0xF9	; 249
    1612:	b9 2e       	mov	r11, r25
    1614:	8f 36       	cpi	r24, 0x6F	; 111
    1616:	c1 f0       	breq	.+48     	; 0x1648 <vfprintf+0x26c>
    1618:	18 f4       	brcc	.+6      	; 0x1620 <vfprintf+0x244>
    161a:	88 35       	cpi	r24, 0x58	; 88
    161c:	79 f0       	breq	.+30     	; 0x163c <vfprintf+0x260>
    161e:	b5 c0       	rjmp	.+362    	; 0x178a <vfprintf+0x3ae>
    1620:	80 37       	cpi	r24, 0x70	; 112
    1622:	19 f0       	breq	.+6      	; 0x162a <vfprintf+0x24e>
    1624:	88 37       	cpi	r24, 0x78	; 120
    1626:	21 f0       	breq	.+8      	; 0x1630 <vfprintf+0x254>
    1628:	b0 c0       	rjmp	.+352    	; 0x178a <vfprintf+0x3ae>
    162a:	e9 2f       	mov	r30, r25
    162c:	e0 61       	ori	r30, 0x10	; 16
    162e:	be 2e       	mov	r11, r30
    1630:	b4 fe       	sbrs	r11, 4
    1632:	0d c0       	rjmp	.+26     	; 0x164e <vfprintf+0x272>
    1634:	fb 2d       	mov	r31, r11
    1636:	f4 60       	ori	r31, 0x04	; 4
    1638:	bf 2e       	mov	r11, r31
    163a:	09 c0       	rjmp	.+18     	; 0x164e <vfprintf+0x272>
    163c:	34 fe       	sbrs	r3, 4
    163e:	0a c0       	rjmp	.+20     	; 0x1654 <vfprintf+0x278>
    1640:	29 2f       	mov	r18, r25
    1642:	26 60       	ori	r18, 0x06	; 6
    1644:	b2 2e       	mov	r11, r18
    1646:	06 c0       	rjmp	.+12     	; 0x1654 <vfprintf+0x278>
    1648:	28 e0       	ldi	r18, 0x08	; 8
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	05 c0       	rjmp	.+10     	; 0x1658 <vfprintf+0x27c>
    164e:	20 e1       	ldi	r18, 0x10	; 16
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <vfprintf+0x27c>
    1654:	20 e1       	ldi	r18, 0x10	; 16
    1656:	32 e0       	ldi	r19, 0x02	; 2
    1658:	f8 01       	movw	r30, r16
    165a:	b7 fe       	sbrs	r11, 7
    165c:	07 c0       	rjmp	.+14     	; 0x166c <vfprintf+0x290>
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	0c 5f       	subi	r16, 0xFC	; 252
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	06 c0       	rjmp	.+12     	; 0x1678 <vfprintf+0x29c>
    166c:	60 81       	ld	r22, Z
    166e:	71 81       	ldd	r23, Z+1	; 0x01
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 5f       	subi	r16, 0xFE	; 254
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	a3 01       	movw	r20, r6
    167a:	0e 94 21 0c 	call	0x1842	; 0x1842 <__ultoa_invert>
    167e:	88 2e       	mov	r8, r24
    1680:	86 18       	sub	r8, r6
    1682:	fb 2d       	mov	r31, r11
    1684:	ff 77       	andi	r31, 0x7F	; 127
    1686:	3f 2e       	mov	r3, r31
    1688:	36 fe       	sbrs	r3, 6
    168a:	0d c0       	rjmp	.+26     	; 0x16a6 <vfprintf+0x2ca>
    168c:	23 2d       	mov	r18, r3
    168e:	2e 7f       	andi	r18, 0xFE	; 254
    1690:	a2 2e       	mov	r10, r18
    1692:	89 14       	cp	r8, r9
    1694:	58 f4       	brcc	.+22     	; 0x16ac <vfprintf+0x2d0>
    1696:	34 fe       	sbrs	r3, 4
    1698:	0b c0       	rjmp	.+22     	; 0x16b0 <vfprintf+0x2d4>
    169a:	32 fc       	sbrc	r3, 2
    169c:	09 c0       	rjmp	.+18     	; 0x16b0 <vfprintf+0x2d4>
    169e:	83 2d       	mov	r24, r3
    16a0:	8e 7e       	andi	r24, 0xEE	; 238
    16a2:	a8 2e       	mov	r10, r24
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <vfprintf+0x2d4>
    16a6:	b8 2c       	mov	r11, r8
    16a8:	a3 2c       	mov	r10, r3
    16aa:	03 c0       	rjmp	.+6      	; 0x16b2 <vfprintf+0x2d6>
    16ac:	b8 2c       	mov	r11, r8
    16ae:	01 c0       	rjmp	.+2      	; 0x16b2 <vfprintf+0x2d6>
    16b0:	b9 2c       	mov	r11, r9
    16b2:	a4 fe       	sbrs	r10, 4
    16b4:	0f c0       	rjmp	.+30     	; 0x16d4 <vfprintf+0x2f8>
    16b6:	fe 01       	movw	r30, r28
    16b8:	e8 0d       	add	r30, r8
    16ba:	f1 1d       	adc	r31, r1
    16bc:	80 81       	ld	r24, Z
    16be:	80 33       	cpi	r24, 0x30	; 48
    16c0:	21 f4       	brne	.+8      	; 0x16ca <vfprintf+0x2ee>
    16c2:	9a 2d       	mov	r25, r10
    16c4:	99 7e       	andi	r25, 0xE9	; 233
    16c6:	a9 2e       	mov	r10, r25
    16c8:	09 c0       	rjmp	.+18     	; 0x16dc <vfprintf+0x300>
    16ca:	a2 fe       	sbrs	r10, 2
    16cc:	06 c0       	rjmp	.+12     	; 0x16da <vfprintf+0x2fe>
    16ce:	b3 94       	inc	r11
    16d0:	b3 94       	inc	r11
    16d2:	04 c0       	rjmp	.+8      	; 0x16dc <vfprintf+0x300>
    16d4:	8a 2d       	mov	r24, r10
    16d6:	86 78       	andi	r24, 0x86	; 134
    16d8:	09 f0       	breq	.+2      	; 0x16dc <vfprintf+0x300>
    16da:	b3 94       	inc	r11
    16dc:	a3 fc       	sbrc	r10, 3
    16de:	11 c0       	rjmp	.+34     	; 0x1702 <vfprintf+0x326>
    16e0:	a0 fe       	sbrs	r10, 0
    16e2:	06 c0       	rjmp	.+12     	; 0x16f0 <vfprintf+0x314>
    16e4:	b2 14       	cp	r11, r2
    16e6:	88 f4       	brcc	.+34     	; 0x170a <vfprintf+0x32e>
    16e8:	28 0c       	add	r2, r8
    16ea:	92 2c       	mov	r9, r2
    16ec:	9b 18       	sub	r9, r11
    16ee:	0e c0       	rjmp	.+28     	; 0x170c <vfprintf+0x330>
    16f0:	b2 14       	cp	r11, r2
    16f2:	60 f4       	brcc	.+24     	; 0x170c <vfprintf+0x330>
    16f4:	b6 01       	movw	r22, r12
    16f6:	80 e2       	ldi	r24, 0x20	; 32
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <fputc>
    16fe:	b3 94       	inc	r11
    1700:	f7 cf       	rjmp	.-18     	; 0x16f0 <vfprintf+0x314>
    1702:	b2 14       	cp	r11, r2
    1704:	18 f4       	brcc	.+6      	; 0x170c <vfprintf+0x330>
    1706:	2b 18       	sub	r2, r11
    1708:	02 c0       	rjmp	.+4      	; 0x170e <vfprintf+0x332>
    170a:	98 2c       	mov	r9, r8
    170c:	21 2c       	mov	r2, r1
    170e:	a4 fe       	sbrs	r10, 4
    1710:	10 c0       	rjmp	.+32     	; 0x1732 <vfprintf+0x356>
    1712:	b6 01       	movw	r22, r12
    1714:	80 e3       	ldi	r24, 0x30	; 48
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <fputc>
    171c:	a2 fe       	sbrs	r10, 2
    171e:	17 c0       	rjmp	.+46     	; 0x174e <vfprintf+0x372>
    1720:	a1 fc       	sbrc	r10, 1
    1722:	03 c0       	rjmp	.+6      	; 0x172a <vfprintf+0x34e>
    1724:	88 e7       	ldi	r24, 0x78	; 120
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 c0       	rjmp	.+4      	; 0x172e <vfprintf+0x352>
    172a:	88 e5       	ldi	r24, 0x58	; 88
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	b6 01       	movw	r22, r12
    1730:	0c c0       	rjmp	.+24     	; 0x174a <vfprintf+0x36e>
    1732:	8a 2d       	mov	r24, r10
    1734:	86 78       	andi	r24, 0x86	; 134
    1736:	59 f0       	breq	.+22     	; 0x174e <vfprintf+0x372>
    1738:	a1 fe       	sbrs	r10, 1
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <vfprintf+0x364>
    173c:	8b e2       	ldi	r24, 0x2B	; 43
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <vfprintf+0x366>
    1740:	80 e2       	ldi	r24, 0x20	; 32
    1742:	a7 fc       	sbrc	r10, 7
    1744:	8d e2       	ldi	r24, 0x2D	; 45
    1746:	b6 01       	movw	r22, r12
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <fputc>
    174e:	89 14       	cp	r8, r9
    1750:	38 f4       	brcc	.+14     	; 0x1760 <vfprintf+0x384>
    1752:	b6 01       	movw	r22, r12
    1754:	80 e3       	ldi	r24, 0x30	; 48
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <fputc>
    175c:	9a 94       	dec	r9
    175e:	f7 cf       	rjmp	.-18     	; 0x174e <vfprintf+0x372>
    1760:	8a 94       	dec	r8
    1762:	f3 01       	movw	r30, r6
    1764:	e8 0d       	add	r30, r8
    1766:	f1 1d       	adc	r31, r1
    1768:	80 81       	ld	r24, Z
    176a:	b6 01       	movw	r22, r12
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <fputc>
    1772:	81 10       	cpse	r8, r1
    1774:	f5 cf       	rjmp	.-22     	; 0x1760 <vfprintf+0x384>
    1776:	22 20       	and	r2, r2
    1778:	09 f4       	brne	.+2      	; 0x177c <vfprintf+0x3a0>
    177a:	42 ce       	rjmp	.-892    	; 0x1400 <vfprintf+0x24>
    177c:	b6 01       	movw	r22, r12
    177e:	80 e2       	ldi	r24, 0x20	; 32
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <fputc>
    1786:	2a 94       	dec	r2
    1788:	f6 cf       	rjmp	.-20     	; 0x1776 <vfprintf+0x39a>
    178a:	f6 01       	movw	r30, r12
    178c:	86 81       	ldd	r24, Z+6	; 0x06
    178e:	97 81       	ldd	r25, Z+7	; 0x07
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <vfprintf+0x3ba>
    1792:	8f ef       	ldi	r24, 0xFF	; 255
    1794:	9f ef       	ldi	r25, 0xFF	; 255
    1796:	2b 96       	adiw	r28, 0x0b	; 11
    1798:	e2 e1       	ldi	r30, 0x12	; 18
    179a:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <__epilogue_restores__>

0000179e <strnlen_P>:
    179e:	fc 01       	movw	r30, r24
    17a0:	05 90       	lpm	r0, Z+
    17a2:	61 50       	subi	r22, 0x01	; 1
    17a4:	70 40       	sbci	r23, 0x00	; 0
    17a6:	01 10       	cpse	r0, r1
    17a8:	d8 f7       	brcc	.-10     	; 0x17a0 <strnlen_P+0x2>
    17aa:	80 95       	com	r24
    17ac:	90 95       	com	r25
    17ae:	8e 0f       	add	r24, r30
    17b0:	9f 1f       	adc	r25, r31
    17b2:	08 95       	ret

000017b4 <strnlen>:
    17b4:	fc 01       	movw	r30, r24
    17b6:	61 50       	subi	r22, 0x01	; 1
    17b8:	70 40       	sbci	r23, 0x00	; 0
    17ba:	01 90       	ld	r0, Z+
    17bc:	01 10       	cpse	r0, r1
    17be:	d8 f7       	brcc	.-10     	; 0x17b6 <strnlen+0x2>
    17c0:	80 95       	com	r24
    17c2:	90 95       	com	r25
    17c4:	8e 0f       	add	r24, r30
    17c6:	9f 1f       	adc	r25, r31
    17c8:	08 95       	ret

000017ca <fputc>:
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	fb 01       	movw	r30, r22
    17d4:	23 81       	ldd	r18, Z+3	; 0x03
    17d6:	21 fd       	sbrc	r18, 1
    17d8:	03 c0       	rjmp	.+6      	; 0x17e0 <fputc+0x16>
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	9f ef       	ldi	r25, 0xFF	; 255
    17de:	2c c0       	rjmp	.+88     	; 0x1838 <fputc+0x6e>
    17e0:	22 ff       	sbrs	r18, 2
    17e2:	16 c0       	rjmp	.+44     	; 0x1810 <fputc+0x46>
    17e4:	46 81       	ldd	r20, Z+6	; 0x06
    17e6:	57 81       	ldd	r21, Z+7	; 0x07
    17e8:	24 81       	ldd	r18, Z+4	; 0x04
    17ea:	35 81       	ldd	r19, Z+5	; 0x05
    17ec:	42 17       	cp	r20, r18
    17ee:	53 07       	cpc	r21, r19
    17f0:	44 f4       	brge	.+16     	; 0x1802 <fputc+0x38>
    17f2:	a0 81       	ld	r26, Z
    17f4:	b1 81       	ldd	r27, Z+1	; 0x01
    17f6:	9d 01       	movw	r18, r26
    17f8:	2f 5f       	subi	r18, 0xFF	; 255
    17fa:	3f 4f       	sbci	r19, 0xFF	; 255
    17fc:	31 83       	std	Z+1, r19	; 0x01
    17fe:	20 83       	st	Z, r18
    1800:	8c 93       	st	X, r24
    1802:	26 81       	ldd	r18, Z+6	; 0x06
    1804:	37 81       	ldd	r19, Z+7	; 0x07
    1806:	2f 5f       	subi	r18, 0xFF	; 255
    1808:	3f 4f       	sbci	r19, 0xFF	; 255
    180a:	37 83       	std	Z+7, r19	; 0x07
    180c:	26 83       	std	Z+6, r18	; 0x06
    180e:	14 c0       	rjmp	.+40     	; 0x1838 <fputc+0x6e>
    1810:	8b 01       	movw	r16, r22
    1812:	ec 01       	movw	r28, r24
    1814:	fb 01       	movw	r30, r22
    1816:	00 84       	ldd	r0, Z+8	; 0x08
    1818:	f1 85       	ldd	r31, Z+9	; 0x09
    181a:	e0 2d       	mov	r30, r0
    181c:	09 95       	icall
    181e:	89 2b       	or	r24, r25
    1820:	e1 f6       	brne	.-72     	; 0x17da <fputc+0x10>
    1822:	d8 01       	movw	r26, r16
    1824:	16 96       	adiw	r26, 0x06	; 6
    1826:	8d 91       	ld	r24, X+
    1828:	9c 91       	ld	r25, X
    182a:	17 97       	sbiw	r26, 0x07	; 7
    182c:	01 96       	adiw	r24, 0x01	; 1
    182e:	17 96       	adiw	r26, 0x07	; 7
    1830:	9c 93       	st	X, r25
    1832:	8e 93       	st	-X, r24
    1834:	16 97       	sbiw	r26, 0x06	; 6
    1836:	ce 01       	movw	r24, r28
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	08 95       	ret

00001842 <__ultoa_invert>:
    1842:	fa 01       	movw	r30, r20
    1844:	aa 27       	eor	r26, r26
    1846:	28 30       	cpi	r18, 0x08	; 8
    1848:	51 f1       	breq	.+84     	; 0x189e <__ultoa_invert+0x5c>
    184a:	20 31       	cpi	r18, 0x10	; 16
    184c:	81 f1       	breq	.+96     	; 0x18ae <__ultoa_invert+0x6c>
    184e:	e8 94       	clt
    1850:	6f 93       	push	r22
    1852:	6e 7f       	andi	r22, 0xFE	; 254
    1854:	6e 5f       	subi	r22, 0xFE	; 254
    1856:	7f 4f       	sbci	r23, 0xFF	; 255
    1858:	8f 4f       	sbci	r24, 0xFF	; 255
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
    185c:	af 4f       	sbci	r26, 0xFF	; 255
    185e:	b1 e0       	ldi	r27, 0x01	; 1
    1860:	3e d0       	rcall	.+124    	; 0x18de <__ultoa_invert+0x9c>
    1862:	b4 e0       	ldi	r27, 0x04	; 4
    1864:	3c d0       	rcall	.+120    	; 0x18de <__ultoa_invert+0x9c>
    1866:	67 0f       	add	r22, r23
    1868:	78 1f       	adc	r23, r24
    186a:	89 1f       	adc	r24, r25
    186c:	9a 1f       	adc	r25, r26
    186e:	a1 1d       	adc	r26, r1
    1870:	68 0f       	add	r22, r24
    1872:	79 1f       	adc	r23, r25
    1874:	8a 1f       	adc	r24, r26
    1876:	91 1d       	adc	r25, r1
    1878:	a1 1d       	adc	r26, r1
    187a:	6a 0f       	add	r22, r26
    187c:	71 1d       	adc	r23, r1
    187e:	81 1d       	adc	r24, r1
    1880:	91 1d       	adc	r25, r1
    1882:	a1 1d       	adc	r26, r1
    1884:	20 d0       	rcall	.+64     	; 0x18c6 <__ultoa_invert+0x84>
    1886:	09 f4       	brne	.+2      	; 0x188a <__ultoa_invert+0x48>
    1888:	68 94       	set
    188a:	3f 91       	pop	r19
    188c:	2a e0       	ldi	r18, 0x0A	; 10
    188e:	26 9f       	mul	r18, r22
    1890:	11 24       	eor	r1, r1
    1892:	30 19       	sub	r19, r0
    1894:	30 5d       	subi	r19, 0xD0	; 208
    1896:	31 93       	st	Z+, r19
    1898:	de f6       	brtc	.-74     	; 0x1850 <__ultoa_invert+0xe>
    189a:	cf 01       	movw	r24, r30
    189c:	08 95       	ret
    189e:	46 2f       	mov	r20, r22
    18a0:	47 70       	andi	r20, 0x07	; 7
    18a2:	40 5d       	subi	r20, 0xD0	; 208
    18a4:	41 93       	st	Z+, r20
    18a6:	b3 e0       	ldi	r27, 0x03	; 3
    18a8:	0f d0       	rcall	.+30     	; 0x18c8 <__ultoa_invert+0x86>
    18aa:	c9 f7       	brne	.-14     	; 0x189e <__ultoa_invert+0x5c>
    18ac:	f6 cf       	rjmp	.-20     	; 0x189a <__ultoa_invert+0x58>
    18ae:	46 2f       	mov	r20, r22
    18b0:	4f 70       	andi	r20, 0x0F	; 15
    18b2:	40 5d       	subi	r20, 0xD0	; 208
    18b4:	4a 33       	cpi	r20, 0x3A	; 58
    18b6:	18 f0       	brcs	.+6      	; 0x18be <__ultoa_invert+0x7c>
    18b8:	49 5d       	subi	r20, 0xD9	; 217
    18ba:	31 fd       	sbrc	r19, 1
    18bc:	40 52       	subi	r20, 0x20	; 32
    18be:	41 93       	st	Z+, r20
    18c0:	02 d0       	rcall	.+4      	; 0x18c6 <__ultoa_invert+0x84>
    18c2:	a9 f7       	brne	.-22     	; 0x18ae <__ultoa_invert+0x6c>
    18c4:	ea cf       	rjmp	.-44     	; 0x189a <__ultoa_invert+0x58>
    18c6:	b4 e0       	ldi	r27, 0x04	; 4
    18c8:	a6 95       	lsr	r26
    18ca:	97 95       	ror	r25
    18cc:	87 95       	ror	r24
    18ce:	77 95       	ror	r23
    18d0:	67 95       	ror	r22
    18d2:	ba 95       	dec	r27
    18d4:	c9 f7       	brne	.-14     	; 0x18c8 <__ultoa_invert+0x86>
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	61 05       	cpc	r22, r1
    18da:	71 05       	cpc	r23, r1
    18dc:	08 95       	ret
    18de:	9b 01       	movw	r18, r22
    18e0:	ac 01       	movw	r20, r24
    18e2:	0a 2e       	mov	r0, r26
    18e4:	06 94       	lsr	r0
    18e6:	57 95       	ror	r21
    18e8:	47 95       	ror	r20
    18ea:	37 95       	ror	r19
    18ec:	27 95       	ror	r18
    18ee:	ba 95       	dec	r27
    18f0:	c9 f7       	brne	.-14     	; 0x18e4 <__ultoa_invert+0xa2>
    18f2:	62 0f       	add	r22, r18
    18f4:	73 1f       	adc	r23, r19
    18f6:	84 1f       	adc	r24, r20
    18f8:	95 1f       	adc	r25, r21
    18fa:	a0 1d       	adc	r26, r0
    18fc:	08 95       	ret

000018fe <__prologue_saves__>:
    18fe:	2f 92       	push	r2
    1900:	3f 92       	push	r3
    1902:	4f 92       	push	r4
    1904:	5f 92       	push	r5
    1906:	6f 92       	push	r6
    1908:	7f 92       	push	r7
    190a:	8f 92       	push	r8
    190c:	9f 92       	push	r9
    190e:	af 92       	push	r10
    1910:	bf 92       	push	r11
    1912:	cf 92       	push	r12
    1914:	df 92       	push	r13
    1916:	ef 92       	push	r14
    1918:	ff 92       	push	r15
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	ca 1b       	sub	r28, r26
    1928:	db 0b       	sbc	r29, r27
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	09 94       	ijmp

00001936 <__epilogue_restores__>:
    1936:	2a 88       	ldd	r2, Y+18	; 0x12
    1938:	39 88       	ldd	r3, Y+17	; 0x11
    193a:	48 88       	ldd	r4, Y+16	; 0x10
    193c:	5f 84       	ldd	r5, Y+15	; 0x0f
    193e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1940:	7d 84       	ldd	r7, Y+13	; 0x0d
    1942:	8c 84       	ldd	r8, Y+12	; 0x0c
    1944:	9b 84       	ldd	r9, Y+11	; 0x0b
    1946:	aa 84       	ldd	r10, Y+10	; 0x0a
    1948:	b9 84       	ldd	r11, Y+9	; 0x09
    194a:	c8 84       	ldd	r12, Y+8	; 0x08
    194c:	df 80       	ldd	r13, Y+7	; 0x07
    194e:	ee 80       	ldd	r14, Y+6	; 0x06
    1950:	fd 80       	ldd	r15, Y+5	; 0x05
    1952:	0c 81       	ldd	r16, Y+4	; 0x04
    1954:	1b 81       	ldd	r17, Y+3	; 0x03
    1956:	aa 81       	ldd	r26, Y+2	; 0x02
    1958:	b9 81       	ldd	r27, Y+1	; 0x01
    195a:	ce 0f       	add	r28, r30
    195c:	d1 1d       	adc	r29, r1
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	ed 01       	movw	r28, r26
    196a:	08 95       	ret

0000196c <_exit>:
    196c:	f8 94       	cli

0000196e <__stop_program>:
    196e:	ff cf       	rjmp	.-2      	; 0x196e <__stop_program>
