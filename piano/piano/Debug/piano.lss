
piano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00001b5c  00001bd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b5c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00001c24  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c80  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000020d8  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c24  00000000  00000000  00003f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011f6  00000000  00000000  00004b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004d8  00000000  00000000  00005d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000829  00000000  00000000  0000620c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f34  00000000  00000000  00006a35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002d0  00000000  00000000  00008969  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__vector_1>
       8:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__vector_2>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	fd 05       	cpc	r31, r13
      6a:	04 06       	cpc	r0, r20
      6c:	0b 06       	cpc	r0, r27
      6e:	12 06       	cpc	r1, r18
      70:	19 06       	cpc	r1, r25
      72:	20 06       	cpc	r2, r16
      74:	27 06       	cpc	r2, r23
      76:	2e 06       	cpc	r2, r30
      78:	50 06       	cpc	r5, r16
      7a:	57 06       	cpc	r5, r23
      7c:	5e 06       	cpc	r5, r30
      7e:	65 06       	cpc	r6, r21
      80:	6c 06       	cpc	r6, r28
      82:	73 06       	cpc	r7, r19
      84:	7a 06       	cpc	r7, r26
      86:	81 06       	cpc	r8, r17
      88:	a4 06       	cpc	r10, r20
      8a:	ab 06       	cpc	r10, r27
      8c:	b2 06       	cpc	r11, r18
      8e:	b9 06       	cpc	r11, r25
      90:	c0 06       	cpc	r12, r16
      92:	c7 06       	cpc	r12, r23
      94:	ce 06       	cpc	r12, r30
      96:	d5 06       	cpc	r13, r21

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ec e5       	ldi	r30, 0x5C	; 92
      ac:	fb e1       	ldi	r31, 0x1B	; 27
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a4 35       	cpi	r26, 0x54	; 84
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
      ba:	21 e0       	ldi	r18, 0x01	; 1
      bc:	a4 e5       	ldi	r26, 0x54	; 84
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a4 35       	cpi	r26, 0x54	; 84
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 86 07 	call	0xf0c	; 0xf0c <main>
      ce:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__vector_default>

000000d6 <HD44780_PCF8574_E_pulse>:
 * @return  void
 */
void HD44780_PCF8574_DrawChar (char addr, char character)
{
  // Draw character
  HD44780_PCF8574_SendData(addr, character);
      d6:	cf 93       	push	r28
      d8:	c8 2f       	mov	r28, r24
      da:	84 60       	ori	r24, 0x04	; 4
      dc:	0e 94 6d 08 	call	0x10da	; 0x10da <TWI_Transmit_Byte>
      e0:	00 00       	nop
      e2:	8c 2f       	mov	r24, r28
      e4:	8b 7f       	andi	r24, 0xFB	; 251
      e6:	0e 94 6d 08 	call	0x10da	; 0x10da <TWI_Transmit_Byte>
      ea:	00 00       	nop
      ec:	cf 91       	pop	r28
      ee:	08 95       	ret

000000f0 <HD44780_PCF8574_Send_4bits_M4b_I>:
      f0:	cf 93       	push	r28
      f2:	c8 2f       	mov	r28, r24
      f4:	0e 94 6d 08 	call	0x10da	; 0x10da <TWI_Transmit_Byte>
      f8:	8c 2f       	mov	r24, r28
      fa:	0e 94 6b 00 	call	0xd6	; 0xd6 <HD44780_PCF8574_E_pulse>
      fe:	cf 91       	pop	r28
     100:	08 95       	ret

00000102 <HD44780_PCF8574_Send_8bits_M4b_I>:
     102:	1f 93       	push	r17
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
     108:	18 2f       	mov	r17, r24
     10a:	d6 2f       	mov	r29, r22
     10c:	d0 7f       	andi	r29, 0xF0	; 240
     10e:	d4 2b       	or	r29, r20
     110:	80 e1       	ldi	r24, 0x10	; 16
     112:	68 9f       	mul	r22, r24
     114:	b0 01       	movw	r22, r0
     116:	11 24       	eor	r1, r1
     118:	c4 2f       	mov	r28, r20
     11a:	c6 2b       	or	r28, r22
     11c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <TWI_MT_Start>
     120:	81 2f       	mov	r24, r17
     122:	0e 94 5f 08 	call	0x10be	; 0x10be <TWI_Transmit_SLAW>
     126:	8d 2f       	mov	r24, r29
     128:	0e 94 6d 08 	call	0x10da	; 0x10da <TWI_Transmit_Byte>
     12c:	8d 2f       	mov	r24, r29
     12e:	0e 94 6b 00 	call	0xd6	; 0xd6 <HD44780_PCF8574_E_pulse>
     132:	8c 2f       	mov	r24, r28
     134:	0e 94 6d 08 	call	0x10da	; 0x10da <TWI_Transmit_Byte>
     138:	8c 2f       	mov	r24, r28
     13a:	0e 94 6b 00 	call	0xd6	; 0xd6 <HD44780_PCF8574_E_pulse>
     13e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <TWI_Stop>
     142:	df 91       	pop	r29
     144:	cf 91       	pop	r28
     146:	1f 91       	pop	r17
     148:	08 95       	ret

0000014a <HD44780_PCF8574_SendInstruction>:
     14a:	48 e0       	ldi	r20, 0x08	; 8
     14c:	0e 94 81 00 	call	0x102	; 0x102 <HD44780_PCF8574_Send_8bits_M4b_I>
     150:	83 ed       	ldi	r24, 0xD3	; 211
     152:	90 e3       	ldi	r25, 0x30	; 48
     154:	01 97       	sbiw	r24, 0x01	; 1
     156:	f1 f7       	brne	.-4      	; 0x154 <HD44780_PCF8574_SendInstruction+0xa>
     158:	00 c0       	rjmp	.+0      	; 0x15a <HD44780_PCF8574_SendInstruction+0x10>
     15a:	00 00       	nop
     15c:	08 95       	ret

0000015e <HD44780_PCF8574_Init>:
     15e:	cf 93       	push	r28
     160:	c8 2f       	mov	r28, r24
     162:	8f e9       	ldi	r24, 0x9F	; 159
     164:	9f e0       	ldi	r25, 0x0F	; 15
     166:	01 97       	sbiw	r24, 0x01	; 1
     168:	f1 f7       	brne	.-4      	; 0x166 <HD44780_PCF8574_Init+0x8>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <HD44780_PCF8574_Init+0xe>
     16c:	00 00       	nop
     16e:	0e 94 48 08 	call	0x1090	; 0x1090 <TWI_Init>
     172:	0e 94 54 08 	call	0x10a8	; 0x10a8 <TWI_MT_Start>
     176:	8c 2f       	mov	r24, r28
     178:	0e 94 5f 08 	call	0x10be	; 0x10be <TWI_Transmit_SLAW>
     17c:	80 e3       	ldi	r24, 0x30	; 48
     17e:	0e 94 78 00 	call	0xf0	; 0xf0 <HD44780_PCF8574_Send_4bits_M4b_I>
     182:	81 ee       	ldi	r24, 0xE1	; 225
     184:	94 e0       	ldi	r25, 0x04	; 4
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <HD44780_PCF8574_Init+0x28>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <HD44780_PCF8574_Init+0x2e>
     18c:	00 00       	nop
     18e:	80 e3       	ldi	r24, 0x30	; 48
     190:	0e 94 78 00 	call	0xf0	; 0xf0 <HD44780_PCF8574_Send_4bits_M4b_I>
     194:	94 e2       	ldi	r25, 0x24	; 36
     196:	9a 95       	dec	r25
     198:	f1 f7       	brne	.-4      	; 0x196 <HD44780_PCF8574_Init+0x38>
     19a:	00 c0       	rjmp	.+0      	; 0x19c <HD44780_PCF8574_Init+0x3e>
     19c:	80 e3       	ldi	r24, 0x30	; 48
     19e:	0e 94 78 00 	call	0xf0	; 0xf0 <HD44780_PCF8574_Send_4bits_M4b_I>
     1a2:	80 e1       	ldi	r24, 0x10	; 16
     1a4:	8a 95       	dec	r24
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <HD44780_PCF8574_Init+0x46>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <HD44780_PCF8574_Init+0x4c>
     1aa:	80 e2       	ldi	r24, 0x20	; 32
     1ac:	0e 94 78 00 	call	0xf0	; 0xf0 <HD44780_PCF8574_Send_4bits_M4b_I>
     1b0:	90 e1       	ldi	r25, 0x10	; 16
     1b2:	9a 95       	dec	r25
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <HD44780_PCF8574_Init+0x54>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <HD44780_PCF8574_Init+0x5a>
     1b8:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <TWI_Stop>
     1bc:	68 e2       	ldi	r22, 0x28	; 40
     1be:	8c 2f       	mov	r24, r28
     1c0:	0e 94 a5 00 	call	0x14a	; 0x14a <HD44780_PCF8574_SendInstruction>
     1c4:	68 e0       	ldi	r22, 0x08	; 8
     1c6:	8c 2f       	mov	r24, r28
     1c8:	0e 94 a5 00 	call	0x14a	; 0x14a <HD44780_PCF8574_SendInstruction>
     1cc:	61 e0       	ldi	r22, 0x01	; 1
     1ce:	8c 2f       	mov	r24, r28
     1d0:	0e 94 a5 00 	call	0x14a	; 0x14a <HD44780_PCF8574_SendInstruction>
     1d4:	66 e0       	ldi	r22, 0x06	; 6
     1d6:	8c 2f       	mov	r24, r28
     1d8:	0e 94 a5 00 	call	0x14a	; 0x14a <HD44780_PCF8574_SendInstruction>
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	cf 91       	pop	r28
     1e0:	08 95       	ret

000001e2 <HD44780_PCF8574_SendData>:
     1e2:	49 e0       	ldi	r20, 0x09	; 9
     1e4:	0e 94 81 00 	call	0x102	; 0x102 <HD44780_PCF8574_Send_8bits_M4b_I>
     1e8:	08 95       	ret

000001ea <HD44780_PCF8574_PositionXY>:
     1ea:	61 31       	cpi	r22, 0x11	; 17
     1ec:	88 f4       	brcc	.+34     	; 0x210 <HD44780_PCF8574_PositionXY+0x26>
     1ee:	43 30       	cpi	r20, 0x03	; 3
     1f0:	88 f4       	brcc	.+34     	; 0x214 <HD44780_PCF8574_PositionXY+0x2a>
     1f2:	41 11       	cpse	r20, r1
     1f4:	05 c0       	rjmp	.+10     	; 0x200 <HD44780_PCF8574_PositionXY+0x16>
     1f6:	60 68       	ori	r22, 0x80	; 128
     1f8:	0e 94 a5 00 	call	0x14a	; 0x14a <HD44780_PCF8574_SendInstruction>
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	08 95       	ret
     200:	41 30       	cpi	r20, 0x01	; 1
     202:	51 f4       	brne	.+20     	; 0x218 <HD44780_PCF8574_PositionXY+0x2e>
     204:	60 5c       	subi	r22, 0xC0	; 192
     206:	60 68       	ori	r22, 0x80	; 128
     208:	0e 94 a5 00 	call	0x14a	; 0x14a <HD44780_PCF8574_SendInstruction>
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	08 95       	ret
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	08 95       	ret
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	08 95       	ret
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	08 95       	ret

0000021c <HD44780_PCF8574_DisplayClear>:
     21c:	61 e0       	ldi	r22, 0x01	; 1
     21e:	0e 94 a5 00 	call	0x14a	; 0x14a <HD44780_PCF8574_SendInstruction>
     222:	08 95       	ret

00000224 <HD44780_PCF8574_DisplayOn>:
     224:	6c e0       	ldi	r22, 0x0C	; 12
     226:	0e 94 a5 00 	call	0x14a	; 0x14a <HD44780_PCF8574_SendInstruction>
     22a:	08 95       	ret

0000022c <HD44780_PCF8574_DrawString>:
 * @param   char *
 *
 * @return  void
 */
void HD44780_PCF8574_DrawString (char addr, char *str)
{
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	eb 01       	movw	r28, r22
  unsigned short int i = 0;
  // loop through chars
  while (str[i] != '\0') {
     234:	68 81       	ld	r22, Y
     236:	66 23       	and	r22, r22
     238:	41 f0       	breq	.+16     	; 0x24a <HD44780_PCF8574_DrawString+0x1e>
     23a:	18 2f       	mov	r17, r24
     23c:	21 96       	adiw	r28, 0x01	; 1
 * @return  void
 */
void HD44780_PCF8574_DrawChar (char addr, char character)
{
  // Draw character
  HD44780_PCF8574_SendData(addr, character);
     23e:	81 2f       	mov	r24, r17
     240:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <HD44780_PCF8574_SendData>
 */
void HD44780_PCF8574_DrawString (char addr, char *str)
{
  unsigned short int i = 0;
  // loop through chars
  while (str[i] != '\0') {
     244:	69 91       	ld	r22, Y+
     246:	61 11       	cpse	r22, r1
     248:	fa cf       	rjmp	.-12     	; 0x23e <HD44780_PCF8574_DrawString+0x12>
    // draw individual chars
    HD44780_PCF8574_DrawChar(addr, str[i++]);
  }
}
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	08 95       	ret

00000252 <USART_Init>:
char addr = PCF8574_ADDRESS;

void USART_Init()
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
     252:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALER;
     256:	87 e6       	ldi	r24, 0x67	; 103
     258:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     262:	88 e1       	ldi	r24, 0x18	; 24
     264:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     268:	08 95       	ret

0000026a <USART_TransmitChar>:
}


void USART_TransmitChar(uint8_t DataByte) {
	while (!(UCSR0A & (1<<UDRE0))); // Wait until UDR is ready
     26a:	e0 ec       	ldi	r30, 0xC0	; 192
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	90 81       	ld	r25, Z
     270:	95 ff       	sbrs	r25, 5
     272:	fd cf       	rjmp	.-6      	; 0x26e <USART_TransmitChar+0x4>
	UDR0 = DataByte;
     274:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     278:	08 95       	ret

0000027a <USART_TransmitString>:
}

void USART_TransmitString(char *str) {
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	ec 01       	movw	r28, r24
	while (*str) {
     280:	88 81       	ld	r24, Y
     282:	88 23       	and	r24, r24
     284:	31 f0       	breq	.+12     	; 0x292 <USART_TransmitString+0x18>
     286:	21 96       	adiw	r28, 0x01	; 1
		USART_TransmitChar(*str);
     288:	0e 94 35 01 	call	0x26a	; 0x26a <USART_TransmitChar>
	while (!(UCSR0A & (1<<UDRE0))); // Wait until UDR is ready
	UDR0 = DataByte;
}

void USART_TransmitString(char *str) {
	while (*str) {
     28c:	89 91       	ld	r24, Y+
     28e:	81 11       	cpse	r24, r1
     290:	fb cf       	rjmp	.-10     	; 0x288 <USART_TransmitString+0xe>
		USART_TransmitChar(*str);
		str++;
	}
}
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <USART_TransmitInteger>:

void USART_TransmitInteger(int value) {
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	2a 97       	sbiw	r28, 0x0a	; 10
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
	char buffer[10]; // Assuming a maximum of 10 digits for the integer
	sprintf(buffer, "%d", value);
     2b0:	9f 93       	push	r25
     2b2:	8f 93       	push	r24
     2b4:	83 e0       	ldi	r24, 0x03	; 3
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	9f 93       	push	r25
     2ba:	8f 93       	push	r24
     2bc:	8e 01       	movw	r16, r28
     2be:	0f 5f       	subi	r16, 0xFF	; 255
     2c0:	1f 4f       	sbci	r17, 0xFF	; 255
     2c2:	1f 93       	push	r17
     2c4:	0f 93       	push	r16
     2c6:	0e 94 c2 0a 	call	0x1584	; 0x1584 <sprintf>
	USART_TransmitString(buffer);
     2ca:	c8 01       	movw	r24, r16
     2cc:	0e 94 3d 01 	call	0x27a	; 0x27a <USART_TransmitString>
}
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	2a 96       	adiw	r28, 0x0a	; 10
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	f8 94       	cli
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	cd bf       	out	0x3d, r28	; 61
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	1f 91       	pop	r17
     2ee:	0f 91       	pop	r16
     2f0:	08 95       	ret

000002f2 <USART_TransmitFixedPoint>:

void USART_TransmitFixedPoint(float value) {
     2f2:	8f 92       	push	r8
     2f4:	9f 92       	push	r9
     2f6:	af 92       	push	r10
     2f8:	bf 92       	push	r11
     2fa:	cf 92       	push	r12
     2fc:	df 92       	push	r13
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	2a 97       	sbiw	r28, 0x0a	; 10
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	f8 94       	cli
     314:	de bf       	out	0x3e, r29	; 62
     316:	0f be       	out	0x3f, r0	; 63
     318:	cd bf       	out	0x3d, r28	; 61
     31a:	4b 01       	movw	r8, r22
     31c:	5c 01       	movw	r10, r24
	char buffer[10]; // Assuming a maximum of 10 digits for the integer
	sprintf(buffer, "%d.%04u ", (int)value , (int) ((value*10000)-(int)value*10000) );
     31e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__fixsfsi>
     322:	6b 01       	movw	r12, r22
     324:	7c 01       	movw	r14, r24
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e4       	ldi	r19, 0x40	; 64
     32a:	4c e1       	ldi	r20, 0x1C	; 28
     32c:	56 e4       	ldi	r21, 0x46	; 70
     32e:	c5 01       	movw	r24, r10
     330:	b4 01       	movw	r22, r8
     332:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     336:	4b 01       	movw	r8, r22
     338:	5c 01       	movw	r10, r24
     33a:	80 e1       	ldi	r24, 0x10	; 16
     33c:	97 e2       	ldi	r25, 0x27	; 39
     33e:	8c 9d       	mul	r24, r12
     340:	b0 01       	movw	r22, r0
     342:	8d 9d       	mul	r24, r13
     344:	70 0d       	add	r23, r0
     346:	9c 9d       	mul	r25, r12
     348:	70 0d       	add	r23, r0
     34a:	11 24       	eor	r1, r1
     34c:	07 2e       	mov	r0, r23
     34e:	00 0c       	add	r0, r0
     350:	88 0b       	sbc	r24, r24
     352:	99 0b       	sbc	r25, r25
     354:	0e 94 9a 09 	call	0x1334	; 0x1334 <__floatsisf>
     358:	9b 01       	movw	r18, r22
     35a:	ac 01       	movw	r20, r24
     35c:	c5 01       	movw	r24, r10
     35e:	b4 01       	movw	r22, r8
     360:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__subsf3>
     364:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__fixsfsi>
     368:	7f 93       	push	r23
     36a:	6f 93       	push	r22
     36c:	df 92       	push	r13
     36e:	cf 92       	push	r12
     370:	86 e0       	ldi	r24, 0x06	; 6
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	9f 93       	push	r25
     376:	8f 93       	push	r24
     378:	8e 01       	movw	r16, r28
     37a:	0f 5f       	subi	r16, 0xFF	; 255
     37c:	1f 4f       	sbci	r17, 0xFF	; 255
     37e:	1f 93       	push	r17
     380:	0f 93       	push	r16
     382:	0e 94 c2 0a 	call	0x1584	; 0x1584 <sprintf>
	USART_TransmitString(buffer);
     386:	c8 01       	movw	r24, r16
     388:	0e 94 3d 01 	call	0x27a	; 0x27a <USART_TransmitString>
}
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	de bf       	out	0x3e, r29	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	cd bf       	out	0x3d, r28	; 61
     396:	2a 96       	adiw	r28, 0x0a	; 10
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	cd bf       	out	0x3d, r28	; 61
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	bf 90       	pop	r11
     3b4:	af 90       	pop	r10
     3b6:	9f 90       	pop	r9
     3b8:	8f 90       	pop	r8
     3ba:	08 95       	ret

000003bc <Play_Sound_violin>:


void Play_Sound_violin(float frequency)
{
     3bc:	2f 92       	push	r2
     3be:	3f 92       	push	r3
     3c0:	4f 92       	push	r4
     3c2:	5f 92       	push	r5
     3c4:	6f 92       	push	r6
     3c6:	7f 92       	push	r7
     3c8:	8f 92       	push	r8
     3ca:	9f 92       	push	r9
     3cc:	af 92       	push	r10
     3ce:	bf 92       	push	r11
     3d0:	cf 92       	push	r12
     3d2:	df 92       	push	r13
     3d4:	ef 92       	push	r14
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	6c 97       	sbiw	r28, 0x1c	; 28
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
	long int i,cycles;
	float wavelength = 1.25;

	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);
     3f8:	23 9a       	sbi	0x04, 3	; 4


	for(int j=0;j<20;j++){
		_delay_ms(frequency / 10.5);
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	48 e2       	ldi	r20, 0x28	; 40
     400:	51 e4       	ldi	r21, 0x41	; 65
     402:	69 81       	ldd	r22, Y+1	; 0x01
     404:	7a 81       	ldd	r23, Y+2	; 0x02
     406:	8b 81       	ldd	r24, Y+3	; 0x03
     408:	9c 81       	ldd	r25, Y+4	; 0x04
     40a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__divsf3>
     40e:	6d 83       	std	Y+5, r22	; 0x05
     410:	7e 83       	std	Y+6, r23	; 0x06
     412:	8f 83       	std	Y+7, r24	; 0x07
     414:	98 87       	std	Y+8, r25	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	4a e7       	ldi	r20, 0x7A	; 122
     41c:	55 e4       	ldi	r21, 0x45	; 69
     41e:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     422:	2b 01       	movw	r4, r22
     424:	3c 01       	movw	r6, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     426:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
     42a:	6b 01       	movw	r12, r22
     42c:	7c 01       	movw	r14, r24
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	40 e8       	ldi	r20, 0x80	; 128
     434:	5f e3       	ldi	r21, 0x3F	; 63
     436:	c3 01       	movw	r24, r6
     438:	b2 01       	movw	r22, r4
     43a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__cmpsf2>
     43e:	88 23       	and	r24, r24
     440:	1c f4       	brge	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	02 c0       	rjmp	.+4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     448:	9c 2d       	mov	r25, r12
     44a:	8d 2d       	mov	r24, r13
     44c:	29 2e       	mov	r2, r25
     44e:	38 2e       	mov	r3, r24
     450:	84 e1       	ldi	r24, 0x14	; 20
     452:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     454:	00 e9       	ldi	r16, 0x90	; 144
     456:	11 e0       	ldi	r17, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     458:	9a 87       	std	Y+10, r25	; 0x0a
     45a:	89 87       	std	Y+9, r24	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	40 e8       	ldi	r20, 0x80	; 128
     462:	5f e3       	ldi	r21, 0x3F	; 63
     464:	c3 01       	movw	r24, r6
     466:	b2 01       	movw	r22, r4
     468:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__cmpsf2>
     46c:	88 23       	and	r24, r24
     46e:	04 f1       	brlt	.+64     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		__ticks = 1;
	else if (__tmp > 65535)
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	3f ef       	ldi	r19, 0xFF	; 255
     474:	4f e7       	ldi	r20, 0x7F	; 127
     476:	57 e4       	ldi	r21, 0x47	; 71
     478:	c3 01       	movw	r24, r6
     47a:	b2 01       	movw	r22, r4
     47c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__gesf2>
     480:	18 16       	cp	r1, r24
     482:	b4 f4       	brge	.+44     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	40 e2       	ldi	r20, 0x20	; 32
     48a:	51 e4       	ldi	r21, 0x41	; 65
     48c:	6d 81       	ldd	r22, Y+5	; 0x05
     48e:	7e 81       	ldd	r23, Y+6	; 0x06
     490:	8f 81       	ldd	r24, Y+7	; 0x07
     492:	98 85       	ldd	r25, Y+8	; 0x08
     494:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     498:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
		while(__ticks)
     49c:	61 15       	cp	r22, r1
     49e:	71 05       	cpc	r23, r1
     4a0:	51 f0       	breq	.+20     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4a2:	c8 01       	movw	r24, r16
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a8:	61 50       	subi	r22, 0x01	; 1
     4aa:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ac:	d1 f7       	brne	.-12     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b0:	c1 01       	movw	r24, r2
     4b2:	01 97       	sbiw	r24, 0x01	; 1
     4b4:	f1 f7       	brne	.-4      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		BUZZER_PORT |= (1 << BUZZER_PIN);
     4b6:	2b 9a       	sbi	0x05, 3	; 5
		_delay_ms(22 * frequency / 10.5);
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	40 eb       	ldi	r20, 0xB0	; 176
     4be:	51 e4       	ldi	r21, 0x41	; 65
     4c0:	69 81       	ldd	r22, Y+1	; 0x01
     4c2:	7a 81       	ldd	r23, Y+2	; 0x02
     4c4:	8b 81       	ldd	r24, Y+3	; 0x03
     4c6:	9c 81       	ldd	r25, Y+4	; 0x04
     4c8:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	48 e2       	ldi	r20, 0x28	; 40
     4d2:	51 e4       	ldi	r21, 0x41	; 65
     4d4:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__divsf3>
     4d8:	6b 01       	movw	r12, r22
     4da:	7c 01       	movw	r14, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	4a e7       	ldi	r20, 0x7A	; 122
     4e2:	55 e4       	ldi	r21, 0x45	; 69
     4e4:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     4e8:	4b 01       	movw	r8, r22
     4ea:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	40 e8       	ldi	r20, 0x80	; 128
     4f2:	5f e3       	ldi	r21, 0x3F	; 63
     4f4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__cmpsf2>
     4f8:	88 23       	and	r24, r24
     4fa:	1c f1       	brlt	.+70     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
		__ticks = 1;
	else if (__tmp > 65535)
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	3f ef       	ldi	r19, 0xFF	; 255
     500:	4f e7       	ldi	r20, 0x7F	; 127
     502:	57 e4       	ldi	r21, 0x47	; 71
     504:	c5 01       	movw	r24, r10
     506:	b4 01       	movw	r22, r8
     508:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__gesf2>
     50c:	18 16       	cp	r1, r24
     50e:	a4 f4       	brge	.+40     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	40 e2       	ldi	r20, 0x20	; 32
     516:	51 e4       	ldi	r21, 0x41	; 65
     518:	c7 01       	movw	r24, r14
     51a:	b6 01       	movw	r22, r12
     51c:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     520:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
		while(__ticks)
     524:	61 15       	cp	r22, r1
     526:	71 05       	cpc	r23, r1
     528:	89 f0       	breq	.+34     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
     52a:	c8 01       	movw	r24, r16
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	f1 f7       	brne	.-4      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     530:	61 50       	subi	r22, 0x01	; 1
     532:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     534:	d1 f7       	brne	.-12     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     536:	0a c0       	rjmp	.+20     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     538:	c5 01       	movw	r24, r10
     53a:	b4 01       	movw	r22, r8
     53c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
     540:	02 c0       	rjmp	.+4      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	cb 01       	movw	r24, r22
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
     54c:	2b 98       	cbi	0x05, 3	; 5
     54e:	89 85       	ldd	r24, Y+9	; 0x09
     550:	9a 85       	ldd	r25, Y+10	; 0x0a
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	9a 87       	std	Y+10, r25	; 0x0a
     556:	89 87       	std	Y+9, r24	; 0x09
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);


	for(int j=0;j<20;j++){
     558:	89 2b       	or	r24, r25
     55a:	09 f0       	breq	.+2      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     55c:	7f cf       	rjmp	.-258    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		BUZZER_PORT |= (1 << BUZZER_PIN);
		_delay_ms(22 * frequency / 10.5);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
	}
	for(int j=0;j<10;j++){
		_delay_ms(frequency / 10.55);
     55e:	2d ec       	ldi	r18, 0xCD	; 205
     560:	3c ec       	ldi	r19, 0xCC	; 204
     562:	48 e2       	ldi	r20, 0x28	; 40
     564:	51 e4       	ldi	r21, 0x41	; 65
     566:	69 81       	ldd	r22, Y+1	; 0x01
     568:	7a 81       	ldd	r23, Y+2	; 0x02
     56a:	8b 81       	ldd	r24, Y+3	; 0x03
     56c:	9c 81       	ldd	r25, Y+4	; 0x04
     56e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__divsf3>
     572:	6d 87       	std	Y+13, r22	; 0x0d
     574:	7e 87       	std	Y+14, r23	; 0x0e
     576:	8f 87       	std	Y+15, r24	; 0x0f
     578:	98 8b       	std	Y+16, r25	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	4a e7       	ldi	r20, 0x7A	; 122
     580:	55 e4       	ldi	r21, 0x45	; 69
     582:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     586:	2b 01       	movw	r4, r22
     588:	3c 01       	movw	r6, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     58a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
     58e:	6b 01       	movw	r12, r22
     590:	7c 01       	movw	r14, r24
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	40 e8       	ldi	r20, 0x80	; 128
     598:	5f e3       	ldi	r21, 0x3F	; 63
     59a:	c3 01       	movw	r24, r6
     59c:	b2 01       	movw	r22, r4
     59e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__cmpsf2>
     5a2:	88 23       	and	r24, r24
     5a4:	1c f4       	brge	.+6      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     5ac:	9c 2d       	mov	r25, r12
     5ae:	8d 2d       	mov	r24, r13
     5b0:	29 2e       	mov	r2, r25
     5b2:	38 2e       	mov	r3, r24
     5b4:	8a e0       	ldi	r24, 0x0A	; 10
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	00 e9       	ldi	r16, 0x90	; 144
     5ba:	11 e0       	ldi	r17, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     5bc:	bb 24       	eor	r11, r11
     5be:	b3 94       	inc	r11
     5c0:	a1 2c       	mov	r10, r1
     5c2:	9a 8b       	std	Y+18, r25	; 0x12
     5c4:	89 8b       	std	Y+17, r24	; 0x11
     5c6:	bd 82       	std	Y+5, r11	; 0x05
     5c8:	a9 86       	std	Y+9, r10	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	40 e8       	ldi	r20, 0x80	; 128
     5d0:	5f e3       	ldi	r21, 0x3F	; 63
     5d2:	c3 01       	movw	r24, r6
     5d4:	b2 01       	movw	r22, r4
     5d6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__cmpsf2>
     5da:	88 23       	and	r24, r24
     5dc:	04 f1       	brlt	.+64     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
		__ticks = 1;
	else if (__tmp > 65535)
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	3f ef       	ldi	r19, 0xFF	; 255
     5e2:	4f e7       	ldi	r20, 0x7F	; 127
     5e4:	57 e4       	ldi	r21, 0x47	; 71
     5e6:	c3 01       	movw	r24, r6
     5e8:	b2 01       	movw	r22, r4
     5ea:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__gesf2>
     5ee:	18 16       	cp	r1, r24
     5f0:	b4 f4       	brge	.+44     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	40 e2       	ldi	r20, 0x20	; 32
     5f8:	51 e4       	ldi	r21, 0x41	; 65
     5fa:	6d 85       	ldd	r22, Y+13	; 0x0d
     5fc:	7e 85       	ldd	r23, Y+14	; 0x0e
     5fe:	8f 85       	ldd	r24, Y+15	; 0x0f
     600:	98 89       	ldd	r25, Y+16	; 0x10
     602:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     606:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
		while(__ticks)
     60a:	61 15       	cp	r22, r1
     60c:	71 05       	cpc	r23, r1
     60e:	51 f0       	breq	.+20     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
     610:	c8 01       	movw	r24, r16
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     616:	61 50       	subi	r22, 0x01	; 1
     618:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     61a:	d1 f7       	brne	.-12     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
     61c:	03 c0       	rjmp	.+6      	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
     61e:	c1 01       	movw	r24, r2
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
		BUZZER_PORT |= (1 << BUZZER_PIN);
     624:	2b 9a       	sbi	0x05, 3	; 5
		_delay_ms(22.1 * frequency / 10.55);
     626:	2d ec       	ldi	r18, 0xCD	; 205
     628:	3c ec       	ldi	r19, 0xCC	; 204
     62a:	40 eb       	ldi	r20, 0xB0	; 176
     62c:	51 e4       	ldi	r21, 0x41	; 65
     62e:	69 81       	ldd	r22, Y+1	; 0x01
     630:	7a 81       	ldd	r23, Y+2	; 0x02
     632:	8b 81       	ldd	r24, Y+3	; 0x03
     634:	9c 81       	ldd	r25, Y+4	; 0x04
     636:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     63a:	2d ec       	ldi	r18, 0xCD	; 205
     63c:	3c ec       	ldi	r19, 0xCC	; 204
     63e:	48 e2       	ldi	r20, 0x28	; 40
     640:	51 e4       	ldi	r21, 0x41	; 65
     642:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__divsf3>
     646:	4b 01       	movw	r8, r22
     648:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	4a e7       	ldi	r20, 0x7A	; 122
     650:	55 e4       	ldi	r21, 0x45	; 69
     652:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     656:	6b 01       	movw	r12, r22
     658:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e8       	ldi	r20, 0x80	; 128
     660:	5f e3       	ldi	r21, 0x3F	; 63
     662:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__cmpsf2>
     666:	88 23       	and	r24, r24
     668:	1c f1       	brlt	.+70     	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
		__ticks = 1;
	else if (__tmp > 65535)
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	3f ef       	ldi	r19, 0xFF	; 255
     66e:	4f e7       	ldi	r20, 0x7F	; 127
     670:	57 e4       	ldi	r21, 0x47	; 71
     672:	c7 01       	movw	r24, r14
     674:	b6 01       	movw	r22, r12
     676:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__gesf2>
     67a:	18 16       	cp	r1, r24
     67c:	a4 f4       	brge	.+40     	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e2       	ldi	r20, 0x20	; 32
     684:	51 e4       	ldi	r21, 0x41	; 65
     686:	c5 01       	movw	r24, r10
     688:	b4 01       	movw	r22, r8
     68a:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     68e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
		while(__ticks)
     692:	61 15       	cp	r22, r1
     694:	71 05       	cpc	r23, r1
     696:	89 f0       	breq	.+34     	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
     698:	c8 01       	movw	r24, r16
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     69e:	61 50       	subi	r22, 0x01	; 1
     6a0:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6a2:	d1 f7       	brne	.-12     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
     6a4:	0a c0       	rjmp	.+20     	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6a6:	c7 01       	movw	r24, r14
     6a8:	b6 01       	movw	r22, r12
     6aa:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     6b0:	6d 81       	ldd	r22, Y+5	; 0x05
     6b2:	79 85       	ldd	r23, Y+9	; 0x09
     6b4:	cb 01       	movw	r24, r22
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
     6ba:	2b 98       	cbi	0x05, 3	; 5
     6bc:	89 89       	ldd	r24, Y+17	; 0x11
     6be:	9a 89       	ldd	r25, Y+18	; 0x12
     6c0:	01 97       	sbiw	r24, 0x01	; 1
     6c2:	9a 8b       	std	Y+18, r25	; 0x12
     6c4:	89 8b       	std	Y+17, r24	; 0x11
		_delay_ms(frequency / 10.5);
		BUZZER_PORT |= (1 << BUZZER_PIN);
		_delay_ms(22 * frequency / 10.5);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
	}
	for(int j=0;j<10;j++){
     6c6:	89 2b       	or	r24, r25
     6c8:	09 f0       	breq	.+2      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
     6ca:	7f cf       	rjmp	.-258    	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
     6cc:	8b 8a       	std	Y+19, r8	; 0x13
     6ce:	9c 8a       	std	Y+20, r9	; 0x14
     6d0:	ad 8a       	std	Y+21, r10	; 0x15
     6d2:	be 8a       	std	Y+22, r11	; 0x16
		_delay_ms(22.1 * frequency / 10.55);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
	}
	
	for(int j=0;j<5;j++){
		_delay_ms(frequency / 10.6);
     6d4:	2a e9       	ldi	r18, 0x9A	; 154
     6d6:	39 e9       	ldi	r19, 0x99	; 153
     6d8:	49 e2       	ldi	r20, 0x29	; 41
     6da:	51 e4       	ldi	r21, 0x41	; 65
     6dc:	69 81       	ldd	r22, Y+1	; 0x01
     6de:	7a 81       	ldd	r23, Y+2	; 0x02
     6e0:	8b 81       	ldd	r24, Y+3	; 0x03
     6e2:	9c 81       	ldd	r25, Y+4	; 0x04
     6e4:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__divsf3>
     6e8:	6f 8b       	std	Y+23, r22	; 0x17
     6ea:	78 8f       	std	Y+24, r23	; 0x18
     6ec:	89 8f       	std	Y+25, r24	; 0x19
     6ee:	9a 8f       	std	Y+26, r25	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	4a e7       	ldi	r20, 0x7A	; 122
     6f6:	55 e4       	ldi	r21, 0x45	; 69
     6f8:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     6fc:	69 87       	std	Y+9, r22	; 0x09
     6fe:	7a 87       	std	Y+10, r23	; 0x0a
     700:	8b 87       	std	Y+11, r24	; 0x0b
     702:	9c 87       	std	Y+12, r25	; 0x0c
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     704:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
     708:	4b 01       	movw	r8, r22
     70a:	5c 01       	movw	r10, r24
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e8       	ldi	r20, 0x80	; 128
     712:	5f e3       	ldi	r21, 0x3F	; 63
     714:	69 85       	ldd	r22, Y+9	; 0x09
     716:	7a 85       	ldd	r23, Y+10	; 0x0a
     718:	8b 85       	ldd	r24, Y+11	; 0x0b
     71a:	9c 85       	ldd	r25, Y+12	; 0x0c
     71c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__cmpsf2>
     720:	88 23       	and	r24, r24
     722:	1c f4       	brge	.+6      	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	02 c0       	rjmp	.+4      	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
     72a:	98 2d       	mov	r25, r8
     72c:	89 2d       	mov	r24, r9
     72e:	99 8b       	std	Y+17, r25	; 0x11
     730:	8a 8b       	std	Y+18, r24	; 0x12
     732:	85 e0       	ldi	r24, 0x05	; 5
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	00 e9       	ldi	r16, 0x90	; 144
     738:	11 e0       	ldi	r17, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     73a:	9c 8f       	std	Y+28, r25	; 0x1c
     73c:	8b 8f       	std	Y+27, r24	; 0x1b
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	40 e8       	ldi	r20, 0x80	; 128
     744:	5f e3       	ldi	r21, 0x3F	; 63
     746:	69 85       	ldd	r22, Y+9	; 0x09
     748:	7a 85       	ldd	r23, Y+10	; 0x0a
     74a:	8b 85       	ldd	r24, Y+11	; 0x0b
     74c:	9c 85       	ldd	r25, Y+12	; 0x0c
     74e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__cmpsf2>
     752:	88 23       	and	r24, r24
     754:	14 f1       	brlt	.+68     	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
		__ticks = 1;
	else if (__tmp > 65535)
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	3f ef       	ldi	r19, 0xFF	; 255
     75a:	4f e7       	ldi	r20, 0x7F	; 127
     75c:	57 e4       	ldi	r21, 0x47	; 71
     75e:	69 85       	ldd	r22, Y+9	; 0x09
     760:	7a 85       	ldd	r23, Y+10	; 0x0a
     762:	8b 85       	ldd	r24, Y+11	; 0x0b
     764:	9c 85       	ldd	r25, Y+12	; 0x0c
     766:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__gesf2>
     76a:	18 16       	cp	r1, r24
     76c:	b4 f4       	brge	.+44     	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	40 e2       	ldi	r20, 0x20	; 32
     774:	51 e4       	ldi	r21, 0x41	; 65
     776:	6f 89       	ldd	r22, Y+23	; 0x17
     778:	78 8d       	ldd	r23, Y+24	; 0x18
     77a:	89 8d       	ldd	r24, Y+25	; 0x19
     77c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     77e:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     782:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
		while(__ticks)
     786:	61 15       	cp	r22, r1
     788:	71 05       	cpc	r23, r1
     78a:	59 f0       	breq	.+22     	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>
     78c:	c8 01       	movw	r24, r16
     78e:	01 97       	sbiw	r24, 0x01	; 1
     790:	f1 f7       	brne	.-4      	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     792:	61 50       	subi	r22, 0x01	; 1
     794:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     796:	d1 f7       	brne	.-12     	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
     798:	04 c0       	rjmp	.+8      	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>
     79a:	89 89       	ldd	r24, Y+17	; 0x11
     79c:	9a 89       	ldd	r25, Y+18	; 0x12
     79e:	01 97       	sbiw	r24, 0x01	; 1
     7a0:	f1 f7       	brne	.-4      	; 0x79e <__LOCK_REGION_LENGTH__+0x39e>
		BUZZER_PORT |= (1 << BUZZER_PIN);
     7a2:	2b 9a       	sbi	0x05, 3	; 5
		_delay_ms(22.2 * frequency / 10.6);
     7a4:	2a e9       	ldi	r18, 0x9A	; 154
     7a6:	39 e9       	ldi	r19, 0x99	; 153
     7a8:	41 eb       	ldi	r20, 0xB1	; 177
     7aa:	51 e4       	ldi	r21, 0x41	; 65
     7ac:	69 81       	ldd	r22, Y+1	; 0x01
     7ae:	7a 81       	ldd	r23, Y+2	; 0x02
     7b0:	8b 81       	ldd	r24, Y+3	; 0x03
     7b2:	9c 81       	ldd	r25, Y+4	; 0x04
     7b4:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     7b8:	2a e9       	ldi	r18, 0x9A	; 154
     7ba:	39 e9       	ldi	r19, 0x99	; 153
     7bc:	49 e2       	ldi	r20, 0x29	; 41
     7be:	51 e4       	ldi	r21, 0x41	; 65
     7c0:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__divsf3>
     7c4:	6d 83       	std	Y+5, r22	; 0x05
     7c6:	7e 83       	std	Y+6, r23	; 0x06
     7c8:	8f 83       	std	Y+7, r24	; 0x07
     7ca:	98 87       	std	Y+8, r25	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	4a e7       	ldi	r20, 0x7A	; 122
     7d2:	55 e4       	ldi	r21, 0x45	; 69
     7d4:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     7d8:	4b 01       	movw	r8, r22
     7da:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e8       	ldi	r20, 0x80	; 128
     7e2:	5f e3       	ldi	r21, 0x3F	; 63
     7e4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__cmpsf2>
     7e8:	88 23       	and	r24, r24
     7ea:	2c f1       	brlt	.+74     	; 0x836 <__LOCK_REGION_LENGTH__+0x436>
		__ticks = 1;
	else if (__tmp > 65535)
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	3f ef       	ldi	r19, 0xFF	; 255
     7f0:	4f e7       	ldi	r20, 0x7F	; 127
     7f2:	57 e4       	ldi	r21, 0x47	; 71
     7f4:	c5 01       	movw	r24, r10
     7f6:	b4 01       	movw	r22, r8
     7f8:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__gesf2>
     7fc:	18 16       	cp	r1, r24
     7fe:	b4 f4       	brge	.+44     	; 0x82c <__LOCK_REGION_LENGTH__+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	40 e2       	ldi	r20, 0x20	; 32
     806:	51 e4       	ldi	r21, 0x41	; 65
     808:	6d 81       	ldd	r22, Y+5	; 0x05
     80a:	7e 81       	ldd	r23, Y+6	; 0x06
     80c:	8f 81       	ldd	r24, Y+7	; 0x07
     80e:	98 85       	ldd	r25, Y+8	; 0x08
     810:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     814:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
		while(__ticks)
     818:	61 15       	cp	r22, r1
     81a:	71 05       	cpc	r23, r1
     81c:	89 f0       	breq	.+34     	; 0x840 <__LOCK_REGION_LENGTH__+0x440>
     81e:	c8 01       	movw	r24, r16
     820:	01 97       	sbiw	r24, 0x01	; 1
     822:	f1 f7       	brne	.-4      	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     824:	61 50       	subi	r22, 0x01	; 1
     826:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     828:	d1 f7       	brne	.-12     	; 0x81e <__LOCK_REGION_LENGTH__+0x41e>
     82a:	0a c0       	rjmp	.+20     	; 0x840 <__LOCK_REGION_LENGTH__+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     82c:	c5 01       	movw	r24, r10
     82e:	b4 01       	movw	r22, r8
     830:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
     834:	02 c0       	rjmp	.+4      	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     836:	61 e0       	ldi	r22, 0x01	; 1
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	cb 01       	movw	r24, r22
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <__LOCK_REGION_LENGTH__+0x43c>
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
     840:	2b 98       	cbi	0x05, 3	; 5
     842:	8b 8d       	ldd	r24, Y+27	; 0x1b
     844:	9c 8d       	ldd	r25, Y+28	; 0x1c
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	9c 8f       	std	Y+28, r25	; 0x1c
     84a:	8b 8f       	std	Y+27, r24	; 0x1b
		BUZZER_PORT |= (1 << BUZZER_PIN);
		_delay_ms(22.1 * frequency / 10.55);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
	}
	
	for(int j=0;j<5;j++){
     84c:	89 2b       	or	r24, r25
     84e:	09 f0       	breq	.+2      	; 0x852 <__LOCK_REGION_LENGTH__+0x452>
     850:	76 cf       	rjmp	.-276    	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
     852:	0a e0       	ldi	r16, 0x0A	; 10
     854:	10 e0       	ldi	r17, 0x00	; 0
     856:	bb 24       	eor	r11, r11
     858:	b3 94       	inc	r11
     85a:	a1 2c       	mov	r10, r1
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	40 e8       	ldi	r20, 0x80	; 128
     862:	5f e3       	ldi	r21, 0x3F	; 63
     864:	c3 01       	movw	r24, r6
     866:	b2 01       	movw	r22, r4
     868:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__cmpsf2>
     86c:	88 23       	and	r24, r24
     86e:	0c f1       	brlt	.+66     	; 0x8b2 <__LOCK_REGION_LENGTH__+0x4b2>
		__ticks = 1;
	else if (__tmp > 65535)
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	c3 01       	movw	r24, r6
     87a:	b2 01       	movw	r22, r4
     87c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__gesf2>
     880:	18 16       	cp	r1, r24
     882:	bc f4       	brge	.+46     	; 0x8b2 <__LOCK_REGION_LENGTH__+0x4b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	40 e2       	ldi	r20, 0x20	; 32
     88a:	51 e4       	ldi	r21, 0x41	; 65
     88c:	6d 85       	ldd	r22, Y+13	; 0x0d
     88e:	7e 85       	ldd	r23, Y+14	; 0x0e
     890:	8f 85       	ldd	r24, Y+15	; 0x0f
     892:	98 89       	ldd	r25, Y+16	; 0x10
     894:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     898:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
		while(__ticks)
     89c:	61 15       	cp	r22, r1
     89e:	71 05       	cpc	r23, r1
     8a0:	59 f0       	breq	.+22     	; 0x8b8 <__LOCK_REGION_LENGTH__+0x4b8>
     8a2:	80 e9       	ldi	r24, 0x90	; 144
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	01 97       	sbiw	r24, 0x01	; 1
     8a8:	f1 f7       	brne	.-4      	; 0x8a6 <__LOCK_REGION_LENGTH__+0x4a6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8aa:	61 50       	subi	r22, 0x01	; 1
     8ac:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ae:	c9 f7       	brne	.-14     	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
     8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <__LOCK_REGION_LENGTH__+0x4b8>
     8b2:	c1 01       	movw	r24, r2
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <__LOCK_REGION_LENGTH__+0x4b4>
		_delay_ms(22.2 * frequency / 10.6);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
	}
	for(int j=0;j<10;j++){
		_delay_ms(frequency / 10.55);
		BUZZER_PORT |= (1 << BUZZER_PIN);
     8b8:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	40 e8       	ldi	r20, 0x80	; 128
     8c0:	5f e3       	ldi	r21, 0x3F	; 63
     8c2:	c7 01       	movw	r24, r14
     8c4:	b6 01       	movw	r22, r12
     8c6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__cmpsf2>
     8ca:	88 23       	and	r24, r24
     8cc:	34 f1       	brlt	.+76     	; 0x91a <__stack+0x1b>
		__ticks = 1;
	else if (__tmp > 65535)
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	3f ef       	ldi	r19, 0xFF	; 255
     8d2:	4f e7       	ldi	r20, 0x7F	; 127
     8d4:	57 e4       	ldi	r21, 0x47	; 71
     8d6:	c7 01       	movw	r24, r14
     8d8:	b6 01       	movw	r22, r12
     8da:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__gesf2>
     8de:	18 16       	cp	r1, r24
     8e0:	bc f4       	brge	.+46     	; 0x910 <__stack+0x11>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	40 e2       	ldi	r20, 0x20	; 32
     8e8:	51 e4       	ldi	r21, 0x41	; 65
     8ea:	6b 89       	ldd	r22, Y+19	; 0x13
     8ec:	7c 89       	ldd	r23, Y+20	; 0x14
     8ee:	8d 89       	ldd	r24, Y+21	; 0x15
     8f0:	9e 89       	ldd	r25, Y+22	; 0x16
     8f2:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     8f6:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
		while(__ticks)
     8fa:	61 15       	cp	r22, r1
     8fc:	71 05       	cpc	r23, r1
     8fe:	91 f0       	breq	.+36     	; 0x924 <__stack+0x25>
     900:	80 e9       	ldi	r24, 0x90	; 144
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	f1 f7       	brne	.-4      	; 0x904 <__stack+0x5>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     908:	61 50       	subi	r22, 0x01	; 1
     90a:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     90c:	c9 f7       	brne	.-14     	; 0x900 <__stack+0x1>
     90e:	0a c0       	rjmp	.+20     	; 0x924 <__stack+0x25>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     910:	c7 01       	movw	r24, r14
     912:	b6 01       	movw	r22, r12
     914:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
     918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0x1f>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     91a:	6b 2d       	mov	r22, r11
     91c:	7a 2d       	mov	r23, r10
     91e:	cb 01       	movw	r24, r22
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	f1 f7       	brne	.-4      	; 0x920 <__stack+0x21>
		_delay_ms(22.1 * frequency / 10.55);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
     924:	2b 98       	cbi	0x05, 3	; 5
     926:	01 50       	subi	r16, 0x01	; 1
     928:	11 09       	sbc	r17, r1
		_delay_ms(frequency / 10.6);
		BUZZER_PORT |= (1 << BUZZER_PIN);
		_delay_ms(22.2 * frequency / 10.6);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
	}
	for(int j=0;j<10;j++){
     92a:	09 f0       	breq	.+2      	; 0x92e <__stack+0x2f>
     92c:	97 cf       	rjmp	.-210    	; 0x85c <__LOCK_REGION_LENGTH__+0x45c>
		_delay_ms(22.1 * frequency / 10.55);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
	}

	
}
     92e:	6c 96       	adiw	r28, 0x1c	; 28
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	ff 90       	pop	r15
     944:	ef 90       	pop	r14
     946:	df 90       	pop	r13
     948:	cf 90       	pop	r12
     94a:	bf 90       	pop	r11
     94c:	af 90       	pop	r10
     94e:	9f 90       	pop	r9
     950:	8f 90       	pop	r8
     952:	7f 90       	pop	r7
     954:	6f 90       	pop	r6
     956:	5f 90       	pop	r5
     958:	4f 90       	pop	r4
     95a:	3f 90       	pop	r3
     95c:	2f 90       	pop	r2
     95e:	08 95       	ret

00000960 <Play_Sound_piano>:

void Play_Sound_piano(float frequency)
{
     960:	2f 92       	push	r2
     962:	3f 92       	push	r3
     964:	4f 92       	push	r4
     966:	5f 92       	push	r5
     968:	6f 92       	push	r6
     96a:	7f 92       	push	r7
     96c:	8f 92       	push	r8
     96e:	9f 92       	push	r9
     970:	af 92       	push	r10
     972:	bf 92       	push	r11
     974:	cf 92       	push	r12
     976:	df 92       	push	r13
     978:	ef 92       	push	r14
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	1f 92       	push	r1
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	4b 01       	movw	r8, r22
     98c:	5c 01       	movw	r10, r24
	long int i,cycles;
	float wavelength = 1.25;
	
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);
     98e:	23 9a       	sbi	0x04, 3	; 4

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	4a e7       	ldi	r20, 0x7A	; 122
     996:	55 e4       	ldi	r21, 0x45	; 69
     998:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     99c:	6b 01       	movw	r12, r22
     99e:	7c 01       	movw	r14, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9a0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
     9a4:	2b 01       	movw	r4, r22
     9a6:	3c 01       	movw	r6, r24
     9a8:	69 83       	std	Y+1, r22	; 0x01
     9aa:	35 2c       	mov	r3, r5
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	40 e8       	ldi	r20, 0x80	; 128
     9b2:	5f e3       	ldi	r21, 0x3F	; 63
     9b4:	c7 01       	movw	r24, r14
     9b6:	b6 01       	movw	r22, r12
     9b8:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__cmpsf2>
     9bc:	88 23       	and	r24, r24
     9be:	1c f4       	brge	.+6      	; 0x9c6 <Play_Sound_piano+0x66>
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <Play_Sound_piano+0x6a>
     9c6:	94 2d       	mov	r25, r4
     9c8:	85 2d       	mov	r24, r5
     9ca:	69 2e       	mov	r6, r25
     9cc:	78 2e       	mov	r7, r24
     9ce:	00 e0       	ldi	r16, 0x00	; 0
     9d0:	10 e0       	ldi	r17, 0x00	; 0

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     9d2:	55 24       	eor	r5, r5
     9d4:	53 94       	inc	r5
     9d6:	21 2c       	mov	r2, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9d8:	49 80       	ldd	r4, Y+1	; 0x01
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	40 e8       	ldi	r20, 0x80	; 128
     9e0:	5f e3       	ldi	r21, 0x3F	; 63
     9e2:	c7 01       	movw	r24, r14
     9e4:	b6 01       	movw	r22, r12
     9e6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__cmpsf2>
     9ea:	88 23       	and	r24, r24
     9ec:	04 f1       	brlt	.+64     	; 0xa2e <Play_Sound_piano+0xce>
		__ticks = 1;
	else if (__tmp > 65535)
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	3f ef       	ldi	r19, 0xFF	; 255
     9f2:	4f e7       	ldi	r20, 0x7F	; 127
     9f4:	57 e4       	ldi	r21, 0x47	; 71
     9f6:	c7 01       	movw	r24, r14
     9f8:	b6 01       	movw	r22, r12
     9fa:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__gesf2>
     9fe:	18 16       	cp	r1, r24
     a00:	b4 f4       	brge	.+44     	; 0xa2e <Play_Sound_piano+0xce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	40 e2       	ldi	r20, 0x20	; 32
     a08:	51 e4       	ldi	r21, 0x41	; 65
     a0a:	c5 01       	movw	r24, r10
     a0c:	b4 01       	movw	r22, r8
     a0e:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     a12:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
		while(__ticks)
     a16:	61 15       	cp	r22, r1
     a18:	71 05       	cpc	r23, r1
     a1a:	09 f4       	brne	.+2      	; 0xa1e <Play_Sound_piano+0xbe>
     a1c:	61 c0       	rjmp	.+194    	; 0xae0 <Play_Sound_piano+0x180>
     a1e:	80 e9       	ldi	r24, 0x90	; 144
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <Play_Sound_piano+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a26:	61 50       	subi	r22, 0x01	; 1
     a28:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a2a:	c9 f7       	brne	.-14     	; 0xa1e <Play_Sound_piano+0xbe>
     a2c:	4d c0       	rjmp	.+154    	; 0xac8 <Play_Sound_piano+0x168>
     a2e:	c3 01       	movw	r24, r6
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	f1 f7       	brne	.-4      	; 0xa30 <Play_Sound_piano+0xd0>

	for (i=0;i<cycles;i++)
	{
		_delay_ms(frequency);
		BUZZER_PORT |= (1 << BUZZER_PIN);
     a34:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e8       	ldi	r20, 0x80	; 128
     a3c:	5f e3       	ldi	r21, 0x3F	; 63
     a3e:	c7 01       	movw	r24, r14
     a40:	b6 01       	movw	r22, r12
     a42:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__cmpsf2>
     a46:	88 23       	and	r24, r24
     a48:	fc f0       	brlt	.+62     	; 0xa88 <Play_Sound_piano+0x128>
		__ticks = 1;
	else if (__tmp > 65535)
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	3f ef       	ldi	r19, 0xFF	; 255
     a4e:	4f e7       	ldi	r20, 0x7F	; 127
     a50:	57 e4       	ldi	r21, 0x47	; 71
     a52:	c7 01       	movw	r24, r14
     a54:	b6 01       	movw	r22, r12
     a56:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__gesf2>
     a5a:	18 16       	cp	r1, r24
     a5c:	c4 f4       	brge	.+48     	; 0xa8e <Play_Sound_piano+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	40 e2       	ldi	r20, 0x20	; 32
     a64:	51 e4       	ldi	r21, 0x41	; 65
     a66:	c5 01       	movw	r24, r10
     a68:	b4 01       	movw	r22, r8
     a6a:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     a6e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
		while(__ticks)
     a72:	61 15       	cp	r22, r1
     a74:	71 05       	cpc	r23, r1
     a76:	a9 f0       	breq	.+42     	; 0xaa2 <Play_Sound_piano+0x142>
     a78:	80 e9       	ldi	r24, 0x90	; 144
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	f1 f7       	brne	.-4      	; 0xa7c <Play_Sound_piano+0x11c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a80:	61 50       	subi	r22, 0x01	; 1
     a82:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a84:	c9 f7       	brne	.-14     	; 0xa78 <Play_Sound_piano+0x118>
     a86:	0d c0       	rjmp	.+26     	; 0xaa2 <Play_Sound_piano+0x142>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     a88:	85 2d       	mov	r24, r5
     a8a:	92 2d       	mov	r25, r2
     a8c:	08 c0       	rjmp	.+16     	; 0xa9e <Play_Sound_piano+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a8e:	84 2d       	mov	r24, r4
     a90:	93 2d       	mov	r25, r3
     a92:	05 c0       	rjmp	.+10     	; 0xa9e <Play_Sound_piano+0x13e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     a94:	85 2d       	mov	r24, r5
     a96:	92 2d       	mov	r25, r2
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <Play_Sound_piano+0x13e>
     a9a:	85 2d       	mov	r24, r5
     a9c:	92 2d       	mov	r25, r2
     a9e:	01 97       	sbiw	r24, 0x01	; 1
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <Play_Sound_piano+0x13e>
		_delay_ms(frequency);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
     aa2:	2b 98       	cbi	0x05, 3	; 5
     aa4:	0f 5f       	subi	r16, 0xFF	; 255
     aa6:	1f 4f       	sbci	r17, 0xFF	; 255
	
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);

	for (i=0;i<cycles;i++)
     aa8:	04 30       	cpi	r16, 0x04	; 4
     aaa:	11 05       	cpc	r17, r1
     aac:	09 f0       	breq	.+2      	; 0xab0 <Play_Sound_piano+0x150>
     aae:	95 cf       	rjmp	.-214    	; 0x9da <Play_Sound_piano+0x7a>
     ab0:	23 c0       	rjmp	.+70     	; 0xaf8 <Play_Sound_piano+0x198>
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e2       	ldi	r20, 0x20	; 32
     ab8:	51 e4       	ldi	r21, 0x41	; 65
     aba:	c5 01       	movw	r24, r10
     abc:	b4 01       	movw	r22, r8
     abe:	0e 94 4f 0a 	call	0x149e	; 0x149e <__mulsf3>
     ac2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
     ac6:	d8 cf       	rjmp	.-80     	; 0xa78 <Play_Sound_piano+0x118>
	{
		_delay_ms(frequency);
		BUZZER_PORT |= (1 << BUZZER_PIN);
     ac8:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 e8       	ldi	r20, 0x80	; 128
     ad0:	5f e3       	ldi	r21, 0x3F	; 63
     ad2:	c7 01       	movw	r24, r14
     ad4:	b6 01       	movw	r22, r12
     ad6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__cmpsf2>
     ada:	88 23       	and	r24, r24
     adc:	54 f7       	brge	.-44     	; 0xab2 <Play_Sound_piano+0x152>
     ade:	da cf       	rjmp	.-76     	; 0xa94 <Play_Sound_piano+0x134>
     ae0:	2b 9a       	sbi	0x05, 3	; 5
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	40 e8       	ldi	r20, 0x80	; 128
     ae8:	5f e3       	ldi	r21, 0x3F	; 63
     aea:	c7 01       	movw	r24, r14
     aec:	b6 01       	movw	r22, r12
     aee:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__cmpsf2>
     af2:	88 23       	and	r24, r24
     af4:	b4 f6       	brge	.-84     	; 0xaa2 <Play_Sound_piano+0x142>
     af6:	d1 cf       	rjmp	.-94     	; 0xa9a <Play_Sound_piano+0x13a>
		_delay_ms(frequency);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
	}
	
	
}
     af8:	0f 90       	pop	r0
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	df 90       	pop	r13
     b08:	cf 90       	pop	r12
     b0a:	bf 90       	pop	r11
     b0c:	af 90       	pop	r10
     b0e:	9f 90       	pop	r9
     b10:	8f 90       	pop	r8
     b12:	7f 90       	pop	r7
     b14:	6f 90       	pop	r6
     b16:	5f 90       	pop	r5
     b18:	4f 90       	pop	r4
     b1a:	3f 90       	pop	r3
     b1c:	2f 90       	pop	r2
     b1e:	08 95       	ret

00000b20 <stop_sound>:


void stop_sound(void)
{
	// Stop sound
	BUZZER_PORT &= ~(1 << BUZZER_PIN);
     b20:	2b 98       	cbi	0x05, 3	; 5
     b22:	08 95       	ret

00000b24 <readInput1>:
/*74HC165 read function*/
volatile uint8_t readInput1(void){
	uint8_t reader = 0;

	//Set PINC2 (PC2) as input 
	DDRC &= ~(1 << PC2);
     b24:	3a 98       	cbi	0x07, 2	; 7

	//Raise LD pin 
	PORTC |= (1 << PC1);
     b26:	41 9a       	sbi	0x08, 1	; 8
     b28:	28 e0       	ldi	r18, 0x08	; 8
     b2a:	30 e0       	ldi	r19, 0x00	; 0
}


/*74HC165 read function*/
volatile uint8_t readInput1(void){
	uint8_t reader = 0;
     b2c:	80 e0       	ldi	r24, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b2e:	45 e0       	ldi	r20, 0x05	; 5
	//Raise LD pin 
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;  // Get a one-bit digital input 
		reader |= ((PINC & (1 << PC2)) ? 1 : 0);
     b30:	96 b1       	in	r25, 0x06	; 6
     b32:	92 fb       	bst	r25, 2
     b34:	99 27       	eor	r25, r25
     b36:	90 f9       	bld	r25, 0
     b38:	88 0f       	add	r24, r24
     b3a:	89 2b       	or	r24, r25
		
		 //Clock the register 
		PORTC &= ~(1 << PC0);
     b3c:	40 98       	cbi	0x08, 0	; 8
     b3e:	94 2f       	mov	r25, r20
     b40:	9a 95       	dec	r25
     b42:	f1 f7       	brne	.-4      	; 0xb40 <readInput1+0x1c>
		_delay_us(1);
		PORTC |= (1 << PC0);
     b44:	40 9a       	sbi	0x08, 0	; 8
     b46:	21 50       	subi	r18, 0x01	; 1
     b48:	31 09       	sbc	r19, r1
	DDRC &= ~(1 << PC2);

	//Raise LD pin 
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
     b4a:	91 f7       	brne	.-28     	; 0xb30 <readInput1+0xc>
		_delay_us(1);
		PORTC |= (1 << PC0);
	} 

	//Lower the LD pin 
	PORTC &= ~(1 << PC1);
     b4c:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
     b4e:	08 95       	ret

00000b50 <readInput2>:

volatile uint8_t readInput2(void){
	uint8_t reader = 0;

	/* Set PINB4 (PB4) as input */
	DDRB &= ~(1 << PB4);
     b50:	24 98       	cbi	0x04, 4	; 4

	/* Raise LD pin */
	PORTC |= (1 << PC1);
     b52:	41 9a       	sbi	0x08, 1	; 8
     b54:	28 e0       	ldi	r18, 0x08	; 8
     b56:	30 e0       	ldi	r19, 0x00	; 0
	return reader;
}


volatile uint8_t readInput2(void){
	uint8_t reader = 0;
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PINB & (1 << PB4)) ? 1 : 0);
     b5c:	93 b1       	in	r25, 0x03	; 3
     b5e:	92 95       	swap	r25
     b60:	91 70       	andi	r25, 0x01	; 1
     b62:	88 0f       	add	r24, r24
     b64:	89 2b       	or	r24, r25

		/* Clock the register */
		PORTC &= ~(1 << PC0);
     b66:	40 98       	cbi	0x08, 0	; 8
     b68:	94 2f       	mov	r25, r20
     b6a:	9a 95       	dec	r25
     b6c:	f1 f7       	brne	.-4      	; 0xb6a <readInput2+0x1a>
		_delay_us(1);
		PORTC |= (1 << PC0);
     b6e:	40 9a       	sbi	0x08, 0	; 8
     b70:	21 50       	subi	r18, 0x01	; 1
     b72:	31 09       	sbc	r19, r1
	DDRB &= ~(1 << PB4);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
     b74:	99 f7       	brne	.-26     	; 0xb5c <readInput2+0xc>
		_delay_us(1);
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
     b76:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
     b78:	08 95       	ret

00000b7a <readInput3>:
volatile uint8_t readInput3(void){
	uint8_t reader = 0;

	/* Set PINB4 (PB5) as input */
	DDRB &= ~(1 << PB5);
     b7a:	25 98       	cbi	0x04, 5	; 4

	/* Raise LD pin */
	PORTC |= (1 << PC1);
     b7c:	41 9a       	sbi	0x08, 1	; 8
     b7e:	28 e0       	ldi	r18, 0x08	; 8
     b80:	30 e0       	ldi	r19, 0x00	; 0
	PORTC &= ~(1 << PC1);

	return reader;
}
volatile uint8_t readInput3(void){
	uint8_t reader = 0;
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PINB & (1 << PB5)) ? 1 : 0);
     b86:	93 b1       	in	r25, 0x03	; 3
     b88:	95 fb       	bst	r25, 5
     b8a:	99 27       	eor	r25, r25
     b8c:	90 f9       	bld	r25, 0
     b8e:	88 0f       	add	r24, r24
     b90:	89 2b       	or	r24, r25

		/* Clock the register */
		PORTC &= ~(1 << PC0);
     b92:	40 98       	cbi	0x08, 0	; 8
     b94:	94 2f       	mov	r25, r20
     b96:	9a 95       	dec	r25
     b98:	f1 f7       	brne	.-4      	; 0xb96 <readInput3+0x1c>
		_delay_us(1);
		PORTC |= (1 << PC0);
     b9a:	40 9a       	sbi	0x08, 0	; 8
     b9c:	21 50       	subi	r18, 0x01	; 1
     b9e:	31 09       	sbc	r19, r1
	DDRB &= ~(1 << PB5);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
     ba0:	91 f7       	brne	.-28     	; 0xb86 <readInput3+0xc>
		_delay_us(1);
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
     ba2:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
     ba4:	08 95       	ret

00000ba6 <calculateFrequency>:




volatile float calculateFrequency(void){
     ba6:	cf 92       	push	r12
     ba8:	df 92       	push	r13
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
	float freq = 0;
	/* Read the input value */
	uint8_t switchNo = readInput1();
     bb4:	0e 94 92 05 	call	0xb24	; 0xb24 <readInput1>
     bb8:	c8 2e       	mov	r12, r24
	uint8_t switchNo2 = readInput2();
     bba:	0e 94 a8 05 	call	0xb50	; 0xb50 <readInput2>
     bbe:	08 2f       	mov	r16, r24
	uint8_t switchNo3 = readInput3();
     bc0:	0e 94 bd 05 	call	0xb7a	; 0xb7a <readInput3>
     bc4:	f8 2e       	mov	r15, r24
     bc6:	c1 e0       	ldi	r28, 0x01	; 1
     bc8:	d0 e0       	ldi	r29, 0x00	; 0




volatile float calculateFrequency(void){
	float freq = 0;
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	cb 01       	movw	r24, r22
	uint8_t switchNo2 = readInput2();
	uint8_t switchNo3 = readInput3();

	for (int i = 0; i < 8; i++) {
		//Check if the i-th bit of switchNo is set
		if (switchNo & (1 << i)) {
     bd0:	d1 2c       	mov	r13, r1
     bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <calculateFrequency+0x30>
     bd4:	21 96       	adiw	r28, 0x01	; 1
     bd6:	fe 01       	movw	r30, r28
     bd8:	31 97       	sbiw	r30, 0x01	; 1
     bda:	96 01       	movw	r18, r12
     bdc:	0e 2e       	mov	r0, r30
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <calculateFrequency+0x3e>
     be0:	35 95       	asr	r19
     be2:	27 95       	ror	r18
     be4:	0a 94       	dec	r0
     be6:	e2 f7       	brpl	.-8      	; 0xbe0 <calculateFrequency+0x3a>
     be8:	20 ff       	sbrs	r18, 0
     bea:	3f c0       	rjmp	.+126    	; 0xc6a <calculateFrequency+0xc4>
			// Set frequency based on which button is pressed 
			switch (i) {
     bec:	e8 30       	cpi	r30, 0x08	; 8
     bee:	f1 05       	cpc	r31, r1
     bf0:	e0 f5       	brcc	.+120    	; 0xc6a <calculateFrequency+0xc4>
     bf2:	ec 5c       	subi	r30, 0xCC	; 204
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__tablejump2__>
				case 0:freq += F3;break;
     bfa:	2a e6       	ldi	r18, 0x6A	; 106
     bfc:	3d e4       	ldi	r19, 0x4D	; 77
     bfe:	47 e3       	ldi	r20, 0x37	; 55
     c00:	50 e4       	ldi	r21, 0x40	; 64
     c02:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     c06:	e6 cf       	rjmp	.-52     	; 0xbd4 <calculateFrequency+0x2e>
				case 1:freq += Gb3;break;
     c08:	29 e0       	ldi	r18, 0x09	; 9
     c0a:	39 ef       	ldi	r19, 0xF9	; 249
     c0c:	4c e2       	ldi	r20, 0x2C	; 44
     c0e:	50 e4       	ldi	r21, 0x40	; 64
     c10:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     c14:	df cf       	rjmp	.-66     	; 0xbd4 <calculateFrequency+0x2e>
				case 2:freq += G3;break;
     c16:	26 e9       	ldi	r18, 0x96	; 150
     c18:	33 e4       	ldi	r19, 0x43	; 67
     c1a:	43 e2       	ldi	r20, 0x23	; 35
     c1c:	50 e4       	ldi	r21, 0x40	; 64
     c1e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     c22:	d8 cf       	rjmp	.-80     	; 0xbd4 <calculateFrequency+0x2e>
				case 3:freq += Ab3;break;
     c24:	24 e2       	ldi	r18, 0x24	; 36
     c26:	38 e2       	ldi	r19, 0x28	; 40
     c28:	4a e1       	ldi	r20, 0x1A	; 26
     c2a:	50 e4       	ldi	r21, 0x40	; 64
     c2c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     c30:	d1 cf       	rjmp	.-94     	; 0xbd4 <calculateFrequency+0x2e>
				case 4:freq += A3;break;
     c32:	2b ee       	ldi	r18, 0xEB	; 235
     c34:	33 e7       	ldi	r19, 0x73	; 115
     c36:	41 e1       	ldi	r20, 0x11	; 17
     c38:	50 e4       	ldi	r21, 0x40	; 64
     c3a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     c3e:	ca cf       	rjmp	.-108    	; 0xbd4 <calculateFrequency+0x2e>
				case 5:freq += Bb3;break;
     c40:	2b e1       	ldi	r18, 0x1B	; 27
     c42:	3f e2       	ldi	r19, 0x2F	; 47
     c44:	49 e0       	ldi	r20, 0x09	; 9
     c46:	50 e4       	ldi	r21, 0x40	; 64
     c48:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     c4c:	c3 cf       	rjmp	.-122    	; 0xbd4 <calculateFrequency+0x2e>
				case 6:freq += B3;break;
     c4e:	23 e5       	ldi	r18, 0x53	; 83
     c50:	36 e9       	ldi	r19, 0x96	; 150
     c52:	41 e0       	ldi	r20, 0x01	; 1
     c54:	50 e4       	ldi	r21, 0x40	; 64
     c56:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     c5a:	bc cf       	rjmp	.-136    	; 0xbd4 <calculateFrequency+0x2e>
				case 7:freq += C4;break;
     c5c:	2d e0       	ldi	r18, 0x0D	; 13
     c5e:	31 e7       	ldi	r19, 0x71	; 113
     c60:	44 ef       	ldi	r20, 0xF4	; 244
     c62:	5f e3       	ldi	r21, 0x3F	; 63
     c64:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <calculateFrequency+0xcc>
	/* Read the input value */
	uint8_t switchNo = readInput1();
	uint8_t switchNo2 = readInput2();
	uint8_t switchNo3 = readInput3();

	for (int i = 0; i < 8; i++) {
     c6a:	c8 30       	cpi	r28, 0x08	; 8
     c6c:	d1 05       	cpc	r29, r1
     c6e:	0c f4       	brge	.+2      	; 0xc72 <calculateFrequency+0xcc>
     c70:	b1 cf       	rjmp	.-158    	; 0xbd4 <calculateFrequency+0x2e>




volatile float calculateFrequency(void){
	float freq = 0;
     c72:	c1 e0       	ldi	r28, 0x01	; 1
     c74:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	
	for (int i = 0; i < 8; i++) {
		//Check if the i-th bit of switchNo is set
		if (switchNo2 & (1 << i)) {
     c76:	10 e0       	ldi	r17, 0x00	; 0
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <calculateFrequency+0xd6>
     c7a:	21 96       	adiw	r28, 0x01	; 1
     c7c:	fe 01       	movw	r30, r28
     c7e:	31 97       	sbiw	r30, 0x01	; 1
     c80:	98 01       	movw	r18, r16
     c82:	0e 2e       	mov	r0, r30
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <calculateFrequency+0xe4>
     c86:	35 95       	asr	r19
     c88:	27 95       	ror	r18
     c8a:	0a 94       	dec	r0
     c8c:	e2 f7       	brpl	.-8      	; 0xc86 <calculateFrequency+0xe0>
     c8e:	20 ff       	sbrs	r18, 0
     c90:	3f c0       	rjmp	.+126    	; 0xd10 <calculateFrequency+0x16a>
			//Set frequency based on which button is pressed
			switch (i) {
     c92:	e8 30       	cpi	r30, 0x08	; 8
     c94:	f1 05       	cpc	r31, r1
     c96:	e0 f5       	brcc	.+120    	; 0xd10 <calculateFrequency+0x16a>
     c98:	e4 5c       	subi	r30, 0xC4	; 196
     c9a:	ff 4f       	sbci	r31, 0xFF	; 255
     c9c:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__tablejump2__>
				case 0:freq += Db4;break;
     ca0:	2b ec       	ldi	r18, 0xCB	; 203
     ca2:	30 e1       	ldi	r19, 0x10	; 16
     ca4:	47 ee       	ldi	r20, 0xE7	; 231
     ca6:	5f e3       	ldi	r21, 0x3F	; 63
     ca8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     cac:	e6 cf       	rjmp	.-52     	; 0xc7a <calculateFrequency+0xd4>
				case 1:freq += D4;break;
     cae:	2e e3       	ldi	r18, 0x3E	; 62
     cb0:	38 ee       	ldi	r19, 0xE8	; 232
     cb2:	49 ed       	ldi	r20, 0xD9	; 217
     cb4:	5f e3       	ldi	r21, 0x3F	; 63
     cb6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     cba:	df cf       	rjmp	.-66     	; 0xc7a <calculateFrequency+0xd4>
				case 2:freq += Eb4;break;
     cbc:	2b ea       	ldi	r18, 0xAB	; 171
     cbe:	3f ec       	ldi	r19, 0xCF	; 207
     cc0:	4d ec       	ldi	r20, 0xCD	; 205
     cc2:	5f e3       	ldi	r21, 0x3F	; 63
     cc4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     cc8:	d8 cf       	rjmp	.-80     	; 0xc7a <calculateFrequency+0xd4>
				case 3:freq += E4;break;
     cca:	2a e1       	ldi	r18, 0x1A	; 26
     ccc:	31 e5       	ldi	r19, 0x51	; 81
     cce:	42 ec       	ldi	r20, 0xC2	; 194
     cd0:	5f e3       	ldi	r21, 0x3F	; 63
     cd2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     cd6:	d1 cf       	rjmp	.-94     	; 0xc7a <calculateFrequency+0xd4>
				case 4:freq += F4;break;
     cd8:	2b e9       	ldi	r18, 0x9B	; 155
     cda:	35 e5       	ldi	r19, 0x55	; 85
     cdc:	47 eb       	ldi	r20, 0xB7	; 183
     cde:	5f e3       	ldi	r21, 0x3F	; 63
     ce0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     ce4:	ca cf       	rjmp	.-108    	; 0xc7a <calculateFrequency+0xd4>
				case 5:freq += Gb4;break;
     ce6:	2d ea       	ldi	r18, 0xAD	; 173
     ce8:	3a ef       	ldi	r19, 0xFA	; 250
     cea:	4c ea       	ldi	r20, 0xAC	; 172
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     cf2:	c3 cf       	rjmp	.-122    	; 0xc7a <calculateFrequency+0xd4>
				case 6:freq += G4;break;
     cf4:	26 e9       	ldi	r18, 0x96	; 150
     cf6:	33 e4       	ldi	r19, 0x43	; 67
     cf8:	43 ea       	ldi	r20, 0xA3	; 163
     cfa:	5f e3       	ldi	r21, 0x3F	; 63
     cfc:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     d00:	bc cf       	rjmp	.-136    	; 0xc7a <calculateFrequency+0xd4>
				case 7:freq += Ab4;break;
     d02:	21 e9       	ldi	r18, 0x91	; 145
     d04:	3f e0       	ldi	r19, 0x0F	; 15
     d06:	4a e9       	ldi	r20, 0x9A	; 154
     d08:	5f e3       	ldi	r21, 0x3F	; 63
     d0a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     d0e:	04 c0       	rjmp	.+8      	; 0xd18 <calculateFrequency+0x172>
			}
		}
	}
	
	
	for (int i = 0; i < 8; i++) {
     d10:	c8 30       	cpi	r28, 0x08	; 8
     d12:	d1 05       	cpc	r29, r1
     d14:	0c f4       	brge	.+2      	; 0xd18 <calculateFrequency+0x172>
     d16:	b1 cf       	rjmp	.-158    	; 0xc7a <calculateFrequency+0xd4>




volatile float calculateFrequency(void){
	float freq = 0;
     d18:	c1 e0       	ldi	r28, 0x01	; 1
     d1a:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	
for (int i = 0; i < 8; i++) {
		// Check if the i-th bit of switchNo is set
		if (switchNo3 & (1 << i)) {
     d1c:	0f 2d       	mov	r16, r15
     d1e:	10 e0       	ldi	r17, 0x00	; 0
     d20:	01 c0       	rjmp	.+2      	; 0xd24 <calculateFrequency+0x17e>
     d22:	21 96       	adiw	r28, 0x01	; 1
     d24:	fe 01       	movw	r30, r28
     d26:	31 97       	sbiw	r30, 0x01	; 1
     d28:	98 01       	movw	r18, r16
     d2a:	0e 2e       	mov	r0, r30
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <calculateFrequency+0x18c>
     d2e:	35 95       	asr	r19
     d30:	27 95       	ror	r18
     d32:	0a 94       	dec	r0
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <calculateFrequency+0x188>
     d36:	20 ff       	sbrs	r18, 0
     d38:	3f c0       	rjmp	.+126    	; 0xdb8 <calculateFrequency+0x212>
			//Set frequency based on which button is pressed
			switch (i) {
     d3a:	e8 30       	cpi	r30, 0x08	; 8
     d3c:	f1 05       	cpc	r31, r1
     d3e:	e0 f5       	brcc	.+120    	; 0xdb8 <calculateFrequency+0x212>
     d40:	ec 5b       	subi	r30, 0xBC	; 188
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__tablejump2__>
				case 0:freq += A4;break;
     d48:	2e e8       	ldi	r18, 0x8E	; 142
     d4a:	35 e7       	ldi	r19, 0x75	; 117
     d4c:	41 e9       	ldi	r20, 0x91	; 145
     d4e:	5f e3       	ldi	r21, 0x3F	; 63
     d50:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     d54:	e6 cf       	rjmp	.-52     	; 0xd22 <calculateFrequency+0x17c>
				case 1:freq += Bb4;break;
     d56:	27 e6       	ldi	r18, 0x67	; 103
     d58:	34 e4       	ldi	r19, 0x44	; 68
     d5a:	49 e8       	ldi	r20, 0x89	; 137
     d5c:	5f e3       	ldi	r21, 0x3F	; 63
     d5e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     d62:	df cf       	rjmp	.-66     	; 0xd22 <calculateFrequency+0x17c>
				case 2:freq += B4;break;
     d64:	20 ee       	ldi	r18, 0xE0	; 224
     d66:	3c e9       	ldi	r19, 0x9C	; 156
     d68:	41 e8       	ldi	r20, 0x81	; 129
     d6a:	5f e3       	ldi	r21, 0x3F	; 63
     d6c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     d70:	d8 cf       	rjmp	.-80     	; 0xd22 <calculateFrequency+0x17c>
				case 3:freq += C5;break;
     d72:	27 ee       	ldi	r18, 0xE7	; 231
     d74:	3d e1       	ldi	r19, 0x1D	; 29
     d76:	47 e6       	ldi	r20, 0x67	; 103
     d78:	5f e3       	ldi	r21, 0x3F	; 63
     d7a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     d7e:	d1 cf       	rjmp	.-94     	; 0xd22 <calculateFrequency+0x17c>
				case 4:freq += Db5;break;
     d80:	2a e5       	ldi	r18, 0x5A	; 90
     d82:	35 ef       	ldi	r19, 0xF5	; 245
     d84:	49 e5       	ldi	r20, 0x59	; 89
     d86:	5f e3       	ldi	r21, 0x3F	; 63
     d88:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     d8c:	ca cf       	rjmp	.-108    	; 0xd22 <calculateFrequency+0x17c>
				case 5:freq += D5;break;
     d8e:	28 e4       	ldi	r18, 0x48	; 72
     d90:	3f eb       	ldi	r19, 0xBF	; 191
     d92:	4d e4       	ldi	r20, 0x4D	; 77
     d94:	5f e3       	ldi	r21, 0x3F	; 63
     d96:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     d9a:	c3 cf       	rjmp	.-122    	; 0xd22 <calculateFrequency+0x17c>
				case 6:freq += Eb5;break;
     d9c:	25 e4       	ldi	r18, 0x45	; 69
     d9e:	37 e4       	ldi	r19, 0x47	; 71
     da0:	42 e4       	ldi	r20, 0x42	; 66
     da2:	5f e3       	ldi	r21, 0x3F	; 63
     da4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     da8:	bc cf       	rjmp	.-136    	; 0xd22 <calculateFrequency+0x17c>
				case 7:freq += E5;break;
     daa:	20 e7       	ldi	r18, 0x70	; 112
     dac:	3f e5       	ldi	r19, 0x5F	; 95
     dae:	47 e3       	ldi	r20, 0x37	; 55
     db0:	5f e3       	ldi	r21, 0x3F	; 63
     db2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3>
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <calculateFrequency+0x21a>
			}
		}
	}
	
	
for (int i = 0; i < 8; i++) {
     db8:	c8 30       	cpi	r28, 0x08	; 8
     dba:	d1 05       	cpc	r29, r1
     dbc:	0c f4       	brge	.+2      	; 0xdc0 <calculateFrequency+0x21a>
     dbe:	b1 cf       	rjmp	.-158    	; 0xd22 <calculateFrequency+0x17c>
			}
		}
	}

	return freq;
}
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	08 95       	ret

00000dd0 <__vector_default>:
uint8_t instrument = -1;
uint8_t bluetooth = -1;

// Define BADISR_vect to handle unhandled interrupts
ISR(BADISR_vect)
{
     dd0:	1f 92       	push	r1
     dd2:	0f 92       	push	r0
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	0f 92       	push	r0
     dd8:	11 24       	eor	r1, r1
     dda:	ff cf       	rjmp	.-2      	; 0xdda <__vector_default+0xa>

00000ddc <__vector_1>:
	for (;;) {	}
}

ISR( INT0_vect )
{
     ddc:	1f 92       	push	r1
     dde:	0f 92       	push	r0
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	0f 92       	push	r0
     de4:	11 24       	eor	r1, r1
     de6:	2f 93       	push	r18
     de8:	3f 93       	push	r19
     dea:	4f 93       	push	r20
     dec:	5f 93       	push	r21
     dee:	6f 93       	push	r22
     df0:	7f 93       	push	r23
     df2:	8f 93       	push	r24
     df4:	9f 93       	push	r25
     df6:	af 93       	push	r26
     df8:	bf 93       	push	r27
     dfa:	ef 93       	push	r30
     dfc:	ff 93       	push	r31
     dfe:	84 ef       	ldi	r24, 0xF4	; 244
     e00:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e02:	20 e9       	ldi	r18, 0x90	; 144
     e04:	31 e0       	ldi	r19, 0x01	; 1
     e06:	f9 01       	movw	r30, r18
     e08:	31 97       	sbiw	r30, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <__vector_1+0x2c>
     e0c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0e:	d9 f7       	brne	.-10     	; 0xe06 <__vector_1+0x2a>
	_delay_ms(50);
	if (PIND & (1 << PD2)) {
     e10:	4a 9b       	sbis	0x09, 2	; 9
     e12:	0f c0       	rjmp	.+30     	; 0xe32 <__vector_1+0x56>
		instrument=0;
     e14:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <instrument>
		HD44780_PCF8574_PositionXY(addr, 0, 1);
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     e20:	0e 94 f5 00 	call	0x1ea	; 0x1ea <HD44780_PCF8574_PositionXY>
		HD44780_PCF8574_DrawString(addr, "Play Piano......");
     e24:	6f e0       	ldi	r22, 0x0F	; 15
     e26:	71 e0       	ldi	r23, 0x01	; 1
     e28:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     e2c:	0e 94 16 01 	call	0x22c	; 0x22c <HD44780_PCF8574_DrawString>
     e30:	0f c0       	rjmp	.+30     	; 0xe50 <__vector_1+0x74>
		}else{
		instrument=1;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <instrument>
		HD44780_PCF8574_PositionXY(addr, 0, 1);
     e38:	41 e0       	ldi	r20, 0x01	; 1
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     e40:	0e 94 f5 00 	call	0x1ea	; 0x1ea <HD44780_PCF8574_PositionXY>
		HD44780_PCF8574_DrawString(addr, "Play Violin.....");
     e44:	60 e2       	ldi	r22, 0x20	; 32
     e46:	71 e0       	ldi	r23, 0x01	; 1
     e48:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     e4c:	0e 94 16 01 	call	0x22c	; 0x22c <HD44780_PCF8574_DrawString>
		
	}
	
}
     e50:	ff 91       	pop	r31
     e52:	ef 91       	pop	r30
     e54:	bf 91       	pop	r27
     e56:	af 91       	pop	r26
     e58:	9f 91       	pop	r25
     e5a:	8f 91       	pop	r24
     e5c:	7f 91       	pop	r23
     e5e:	6f 91       	pop	r22
     e60:	5f 91       	pop	r21
     e62:	4f 91       	pop	r20
     e64:	3f 91       	pop	r19
     e66:	2f 91       	pop	r18
     e68:	0f 90       	pop	r0
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	0f 90       	pop	r0
     e6e:	1f 90       	pop	r1
     e70:	18 95       	reti

00000e72 <__vector_2>:

ISR( INT1_vect )
{
     e72:	1f 92       	push	r1
     e74:	0f 92       	push	r0
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	0f 92       	push	r0
     e7a:	11 24       	eor	r1, r1
     e7c:	2f 93       	push	r18
     e7e:	3f 93       	push	r19
     e80:	4f 93       	push	r20
     e82:	5f 93       	push	r21
     e84:	6f 93       	push	r22
     e86:	7f 93       	push	r23
     e88:	8f 93       	push	r24
     e8a:	9f 93       	push	r25
     e8c:	af 93       	push	r26
     e8e:	bf 93       	push	r27
     e90:	ef 93       	push	r30
     e92:	ff 93       	push	r31
     e94:	84 ef       	ldi	r24, 0xF4	; 244
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	20 e9       	ldi	r18, 0x90	; 144
     e9a:	31 e0       	ldi	r19, 0x01	; 1
     e9c:	f9 01       	movw	r30, r18
     e9e:	31 97       	sbiw	r30, 0x01	; 1
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <__vector_2+0x2c>
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	d9 f7       	brne	.-10     	; 0xe9c <__vector_2+0x2a>
	_delay_ms(50);
	if (PIND & (1 << PD3)) {
     ea6:	4b 9b       	sbis	0x09, 3	; 9
     ea8:	12 c0       	rjmp	.+36     	; 0xece <__vector_2+0x5c>
		HD44780_PCF8574_PositionXY(addr, 0, 0);
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     eb2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <HD44780_PCF8574_PositionXY>
		HD44780_PCF8574_DrawString(addr, "Bluetooth.......");
     eb6:	61 e3       	ldi	r22, 0x31	; 49
     eb8:	71 e0       	ldi	r23, 0x01	; 1
     eba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     ebe:	0e 94 16 01 	call	0x22c	; 0x22c <HD44780_PCF8574_DrawString>
		USART_Init();
     ec2:	0e 94 29 01 	call	0x252	; 0x252 <USART_Init>
		bluetooth=1;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     ecc:	0e c0       	rjmp	.+28     	; 0xeea <__vector_2+0x78>
		}else{
		HD44780_PCF8574_PositionXY(addr, 0, 0);
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     ed6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <HD44780_PCF8574_PositionXY>
		HD44780_PCF8574_DrawString(addr, "Toy Piano Music!");
     eda:	62 e4       	ldi	r22, 0x42	; 66
     edc:	71 e0       	ldi	r23, 0x01	; 1
     ede:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     ee2:	0e 94 16 01 	call	0x22c	; 0x22c <HD44780_PCF8574_DrawString>
		bluetooth=0;
     ee6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	}
}
     eea:	ff 91       	pop	r31
     eec:	ef 91       	pop	r30
     eee:	bf 91       	pop	r27
     ef0:	af 91       	pop	r26
     ef2:	9f 91       	pop	r25
     ef4:	8f 91       	pop	r24
     ef6:	7f 91       	pop	r23
     ef8:	6f 91       	pop	r22
     efa:	5f 91       	pop	r21
     efc:	4f 91       	pop	r20
     efe:	3f 91       	pop	r19
     f00:	2f 91       	pop	r18
     f02:	0f 90       	pop	r0
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	0f 90       	pop	r0
     f08:	1f 90       	pop	r1
     f0a:	18 95       	reti

00000f0c <main>:

int main(void)
{
	PORTC |= (1 << PC2);  // Enable pull-up on PC2
     f0c:	42 9a       	sbi	0x08, 2	; 8
	PORTB |= (1 << PB4);  // Enable pull-up on PB4
     f0e:	2c 9a       	sbi	0x05, 4	; 5
	PORTB |= (1 << PB5);  // Enable pull-up on PB5
     f10:	2d 9a       	sbi	0x05, 5	; 5

	stop_sound();
     f12:	0e 94 90 05 	call	0xb20	; 0xb20 <stop_sound>
	
	
	HD44780_PCF8574_Init(addr);
     f16:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     f1a:	0e 94 af 00 	call	0x15e	; 0x15e <HD44780_PCF8574_Init>
	//display clear
	HD44780_PCF8574_DisplayClear(addr);
     f1e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     f22:	0e 94 0e 01 	call	0x21c	; 0x21c <HD44780_PCF8574_DisplayClear>
	//display on
	HD44780_PCF8574_DisplayOn(addr);
     f26:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     f2a:	0e 94 12 01 	call	0x224	; 0x224 <HD44780_PCF8574_DisplayOn>
     f2e:	c4 e1       	ldi	r28, 0x14	; 20
     f30:	d0 e0       	ldi	r29, 0x00	; 0
	
for(int i=0;i<20;i++){
Play_Sound_piano(2);}
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e4       	ldi	r25, 0x40	; 64
     f3a:	0e 94 b0 04 	call	0x960	; 0x960 <Play_Sound_piano>
     f3e:	21 97       	sbiw	r28, 0x01	; 1
	//display clear
	HD44780_PCF8574_DisplayClear(addr);
	//display on
	HD44780_PCF8574_DisplayOn(addr);
	
for(int i=0;i<20;i++){
     f40:	c1 f7       	brne	.-16     	; 0xf32 <main+0x26>
     f42:	c4 e1       	ldi	r28, 0x14	; 20
     f44:	d0 e0       	ldi	r29, 0x00	; 0
Play_Sound_piano(2);}
for(int i=0;i<20;i++){
Play_Sound_piano(2.5);}
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	80 e2       	ldi	r24, 0x20	; 32
     f4c:	90 e4       	ldi	r25, 0x40	; 64
     f4e:	0e 94 b0 04 	call	0x960	; 0x960 <Play_Sound_piano>
     f52:	21 97       	sbiw	r28, 0x01	; 1
	//display on
	HD44780_PCF8574_DisplayOn(addr);
	
for(int i=0;i<20;i++){
Play_Sound_piano(2);}
for(int i=0;i<20;i++){
     f54:	c1 f7       	brne	.-16     	; 0xf46 <main+0x3a>
     f56:	c4 e1       	ldi	r28, 0x14	; 20
     f58:	d0 e0       	ldi	r29, 0x00	; 0
Play_Sound_piano(2.5);}
for(int i=0;i<20;i++){
Play_Sound_piano(4);}
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	80 e8       	ldi	r24, 0x80	; 128
     f60:	90 e4       	ldi	r25, 0x40	; 64
     f62:	0e 94 b0 04 	call	0x960	; 0x960 <Play_Sound_piano>
     f66:	21 97       	sbiw	r28, 0x01	; 1
	
for(int i=0;i<20;i++){
Play_Sound_piano(2);}
for(int i=0;i<20;i++){
Play_Sound_piano(2.5);}
for(int i=0;i<20;i++){
     f68:	c1 f7       	brne	.-16     	; 0xf5a <main+0x4e>
Play_Sound_piano(4);}
stop_sound();
     f6a:	0e 94 90 05 	call	0xb20	; 0xb20 <stop_sound>
	
	DDRC |= 0b11111111;
     f6e:	87 b1       	in	r24, 0x07	; 7
     f70:	8f ef       	ldi	r24, 0xFF	; 255
     f72:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b11111111;
     f74:	9a b1       	in	r25, 0x0a	; 10
     f76:	8a b9       	out	0x0a, r24	; 10
	
	EICRA |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
     f78:	e9 e6       	ldi	r30, 0x69	; 105
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	81 60       	ori	r24, 0x01	; 1
     f80:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);     // Turns on INT0
     f82:	e8 9a       	sbi	0x1d, 0	; 29
	
	EICRA |= (1 << ISC10);    // set INT1 to trigger on ANY logic change
     f84:	80 81       	ld	r24, Z
     f86:	84 60       	ori	r24, 0x04	; 4
     f88:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);     // Turns on INT1
     f8a:	e9 9a       	sbi	0x1d, 1	; 29
	
	if (PIND & (1 << PD2)) {
     f8c:	4a 9b       	sbis	0x09, 2	; 9
     f8e:	0f c0       	rjmp	.+30     	; 0xfae <main+0xa2>
		instrument=0;
     f90:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <instrument>
		HD44780_PCF8574_PositionXY(addr, 0, 1);
     f94:	41 e0       	ldi	r20, 0x01	; 1
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     f9c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <HD44780_PCF8574_PositionXY>
		HD44780_PCF8574_DrawString(addr, "Play Piano......");
     fa0:	6f e0       	ldi	r22, 0x0F	; 15
     fa2:	71 e0       	ldi	r23, 0x01	; 1
     fa4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     fa8:	0e 94 16 01 	call	0x22c	; 0x22c <HD44780_PCF8574_DrawString>
     fac:	0f c0       	rjmp	.+30     	; 0xfcc <main+0xc0>
		}else{
		instrument=1;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <instrument>
		// position
		HD44780_PCF8574_PositionXY(addr, 0, 1);
     fb4:	41 e0       	ldi	r20, 0x01	; 1
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     fbc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <HD44780_PCF8574_PositionXY>
		HD44780_PCF8574_DrawString(addr, "Play Violin.....");
     fc0:	60 e2       	ldi	r22, 0x20	; 32
     fc2:	71 e0       	ldi	r23, 0x01	; 1
     fc4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     fc8:	0e 94 16 01 	call	0x22c	; 0x22c <HD44780_PCF8574_DrawString>
		
	}
	if (PIND & (1 << PD3)) {
     fcc:	4b 9b       	sbis	0x09, 3	; 9
     fce:	12 c0       	rjmp	.+36     	; 0xff4 <main+0xe8>
		HD44780_PCF8574_PositionXY(addr, 0, 0);
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     fd8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <HD44780_PCF8574_PositionXY>
		HD44780_PCF8574_DrawString(addr, "Bluetooth.......");
     fdc:	61 e3       	ldi	r22, 0x31	; 49
     fde:	71 e0       	ldi	r23, 0x01	; 1
     fe0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     fe4:	0e 94 16 01 	call	0x22c	; 0x22c <HD44780_PCF8574_DrawString>
		USART_Init();
     fe8:	0e 94 29 01 	call	0x252	; 0x252 <USART_Init>
		bluetooth=1;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     ff2:	0e c0       	rjmp	.+28     	; 0x1010 <main+0x104>
		}else{
		HD44780_PCF8574_PositionXY(addr, 0, 0);
     ff4:	40 e0       	ldi	r20, 0x00	; 0
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     ffc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <HD44780_PCF8574_PositionXY>
		HD44780_PCF8574_DrawString(addr, "Toy Piano Music!");
    1000:	62 e4       	ldi	r22, 0x42	; 66
    1002:	71 e0       	ldi	r23, 0x01	; 1
    1004:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
    1008:	0e 94 16 01 	call	0x22c	; 0x22c <HD44780_PCF8574_DrawString>
		bluetooth=0;
    100c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	}
	sei();			/* Enable Global Interrupt */
    1010:	78 94       	sei
	float frequecy=0;
	
	
	while (1){
		float frequecy = calculateFrequency();
    1012:	0e 94 d3 05 	call	0xba6	; 0xba6 <calculateFrequency>
    1016:	6b 01       	movw	r12, r22
    1018:	7c 01       	movw	r14, r24
		
		if (frequecy > 0) {
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	a9 01       	movw	r20, r18
    1020:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__gesf2>
    1024:	18 16       	cp	r1, r24
    1026:	8c f5       	brge	.+98     	; 0x108a <main+0x17e>
			
			if(instrument==0 && bluetooth==0){
    1028:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <instrument>
    102c:	81 11       	cpse	r24, r1
    102e:	09 c0       	rjmp	.+18     	; 0x1042 <main+0x136>
    1030:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1034:	81 11       	cpse	r24, r1
    1036:	10 c0       	rjmp	.+32     	; 0x1058 <main+0x14c>
				Play_Sound_piano(frequecy);
    1038:	c7 01       	movw	r24, r14
    103a:	b6 01       	movw	r22, r12
    103c:	0e 94 b0 04 	call	0x960	; 0x960 <Play_Sound_piano>
    1040:	e8 cf       	rjmp	.-48     	; 0x1012 <main+0x106>
			}
			else if(instrument==1 && bluetooth==0){
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	49 f4       	brne	.+18     	; 0x1058 <main+0x14c>
    1046:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    104a:	81 11       	cpse	r24, r1
    104c:	05 c0       	rjmp	.+10     	; 0x1058 <main+0x14c>
				Play_Sound_violin(frequecy);
    104e:	c7 01       	movw	r24, r14
    1050:	b6 01       	movw	r22, r12
    1052:	0e 94 de 01 	call	0x3bc	; 0x3bc <Play_Sound_violin>
    1056:	dd cf       	rjmp	.-70     	; 0x1012 <main+0x106>
			}
			else if(bluetooth==1){
    1058:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	c9 f6       	brne	.-78     	; 0x1012 <main+0x106>
				stop_sound();
    1060:	0e 94 90 05 	call	0xb20	; 0xb20 <stop_sound>
				USART_TransmitInteger(instrument);
    1064:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <instrument>
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e 94 4c 01 	call	0x298	; 0x298 <USART_TransmitInteger>
				USART_TransmitChar(' ');
    106e:	80 e2       	ldi	r24, 0x20	; 32
    1070:	0e 94 35 01 	call	0x26a	; 0x26a <USART_TransmitChar>
				USART_TransmitFixedPoint(frequecy);
    1074:	c7 01       	movw	r24, r14
    1076:	b6 01       	movw	r22, r12
    1078:	0e 94 79 01 	call	0x2f2	; 0x2f2 <USART_TransmitFixedPoint>
				USART_TransmitChar('\r'); // Carriage return
    107c:	8d e0       	ldi	r24, 0x0D	; 13
    107e:	0e 94 35 01 	call	0x26a	; 0x26a <USART_TransmitChar>
				USART_TransmitChar('\n');
    1082:	8a e0       	ldi	r24, 0x0A	; 10
    1084:	0e 94 35 01 	call	0x26a	; 0x26a <USART_TransmitChar>
    1088:	c4 cf       	rjmp	.-120    	; 0x1012 <main+0x106>
			}
			}else{
			stop_sound();
    108a:	0e 94 90 05 	call	0xb20	; 0xb20 <stop_sound>
    108e:	c1 cf       	rjmp	.-126    	; 0x1012 <main+0x106>

00001090 <TWI_Init>:
    // error status
    TWI_Error(status, TWI_MR_DATA_NACK);
  }
  // received data
  return TWI_TWDR;
}
    1090:	88 e0       	ldi	r24, 0x08	; 8
    1092:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1096:	e9 eb       	ldi	r30, 0xB9	; 185
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	90 81       	ld	r25, Z
    109e:	82 70       	andi	r24, 0x02	; 2
    10a0:	81 60       	ori	r24, 0x01	; 1
    10a2:	89 2b       	or	r24, r25
    10a4:	80 83       	st	Z, r24
    10a6:	08 95       	ret

000010a8 <TWI_MT_Start>:
    10a8:	84 ea       	ldi	r24, 0xA4	; 164
    10aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10ae:	ec eb       	ldi	r30, 0xBC	; 188
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	88 23       	and	r24, r24
    10b6:	ec f7       	brge	.-6      	; 0x10b2 <TWI_MT_Start+0xa>
    10b8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    10bc:	08 95       	ret

000010be <TWI_Transmit_SLAW>:
    10be:	88 0f       	add	r24, r24
    10c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    10c4:	84 ec       	ldi	r24, 0xC4	; 196
    10c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10ca:	ec eb       	ldi	r30, 0xBC	; 188
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	88 23       	and	r24, r24
    10d2:	ec f7       	brge	.-6      	; 0x10ce <TWI_Transmit_SLAW+0x10>
    10d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    10d8:	08 95       	ret

000010da <TWI_Transmit_Byte>:
    10da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    10de:	84 ec       	ldi	r24, 0xC4	; 196
    10e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10e4:	ec eb       	ldi	r30, 0xBC	; 188
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	88 23       	and	r24, r24
    10ec:	ec f7       	brge	.-6      	; 0x10e8 <TWI_Transmit_Byte+0xe>
    10ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    10f2:	08 95       	ret

000010f4 <TWI_Stop>:
void TWI_Stop(void)
{
  // End TWI
  // -------------------------------------------------
  // send stop sequence
  TWI_STOP();
    10f4:	84 e9       	ldi	r24, 0x94	; 148
    10f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10fa:	08 95       	ret

000010fc <__subsf3>:
    10fc:	50 58       	subi	r21, 0x80	; 128

000010fe <__addsf3>:
    10fe:	bb 27       	eor	r27, r27
    1100:	aa 27       	eor	r26, r26
    1102:	0e 94 96 08 	call	0x112c	; 0x112c <__addsf3x>
    1106:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__fp_round>
    110a:	0e 94 02 0a 	call	0x1404	; 0x1404 <__fp_pscA>
    110e:	38 f0       	brcs	.+14     	; 0x111e <__addsf3+0x20>
    1110:	0e 94 09 0a 	call	0x1412	; 0x1412 <__fp_pscB>
    1114:	20 f0       	brcs	.+8      	; 0x111e <__addsf3+0x20>
    1116:	39 f4       	brne	.+14     	; 0x1126 <__addsf3+0x28>
    1118:	9f 3f       	cpi	r25, 0xFF	; 255
    111a:	19 f4       	brne	.+6      	; 0x1122 <__addsf3+0x24>
    111c:	26 f4       	brtc	.+8      	; 0x1126 <__addsf3+0x28>
    111e:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__fp_nan>
    1122:	0e f4       	brtc	.+2      	; 0x1126 <__addsf3+0x28>
    1124:	e0 95       	com	r30
    1126:	e7 fb       	bst	r30, 7
    1128:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__fp_inf>

0000112c <__addsf3x>:
    112c:	e9 2f       	mov	r30, r25
    112e:	0e 94 21 0a 	call	0x1442	; 0x1442 <__fp_split3>
    1132:	58 f3       	brcs	.-42     	; 0x110a <__addsf3+0xc>
    1134:	ba 17       	cp	r27, r26
    1136:	62 07       	cpc	r22, r18
    1138:	73 07       	cpc	r23, r19
    113a:	84 07       	cpc	r24, r20
    113c:	95 07       	cpc	r25, r21
    113e:	20 f0       	brcs	.+8      	; 0x1148 <__addsf3x+0x1c>
    1140:	79 f4       	brne	.+30     	; 0x1160 <__addsf3x+0x34>
    1142:	a6 f5       	brtc	.+104    	; 0x11ac <__addsf3x+0x80>
    1144:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__fp_zero>
    1148:	0e f4       	brtc	.+2      	; 0x114c <__addsf3x+0x20>
    114a:	e0 95       	com	r30
    114c:	0b 2e       	mov	r0, r27
    114e:	ba 2f       	mov	r27, r26
    1150:	a0 2d       	mov	r26, r0
    1152:	0b 01       	movw	r0, r22
    1154:	b9 01       	movw	r22, r18
    1156:	90 01       	movw	r18, r0
    1158:	0c 01       	movw	r0, r24
    115a:	ca 01       	movw	r24, r20
    115c:	a0 01       	movw	r20, r0
    115e:	11 24       	eor	r1, r1
    1160:	ff 27       	eor	r31, r31
    1162:	59 1b       	sub	r21, r25
    1164:	99 f0       	breq	.+38     	; 0x118c <__addsf3x+0x60>
    1166:	59 3f       	cpi	r21, 0xF9	; 249
    1168:	50 f4       	brcc	.+20     	; 0x117e <__addsf3x+0x52>
    116a:	50 3e       	cpi	r21, 0xE0	; 224
    116c:	68 f1       	brcs	.+90     	; 0x11c8 <__addsf3x+0x9c>
    116e:	1a 16       	cp	r1, r26
    1170:	f0 40       	sbci	r31, 0x00	; 0
    1172:	a2 2f       	mov	r26, r18
    1174:	23 2f       	mov	r18, r19
    1176:	34 2f       	mov	r19, r20
    1178:	44 27       	eor	r20, r20
    117a:	58 5f       	subi	r21, 0xF8	; 248
    117c:	f3 cf       	rjmp	.-26     	; 0x1164 <__addsf3x+0x38>
    117e:	46 95       	lsr	r20
    1180:	37 95       	ror	r19
    1182:	27 95       	ror	r18
    1184:	a7 95       	ror	r26
    1186:	f0 40       	sbci	r31, 0x00	; 0
    1188:	53 95       	inc	r21
    118a:	c9 f7       	brne	.-14     	; 0x117e <__addsf3x+0x52>
    118c:	7e f4       	brtc	.+30     	; 0x11ac <__addsf3x+0x80>
    118e:	1f 16       	cp	r1, r31
    1190:	ba 0b       	sbc	r27, r26
    1192:	62 0b       	sbc	r22, r18
    1194:	73 0b       	sbc	r23, r19
    1196:	84 0b       	sbc	r24, r20
    1198:	ba f0       	brmi	.+46     	; 0x11c8 <__addsf3x+0x9c>
    119a:	91 50       	subi	r25, 0x01	; 1
    119c:	a1 f0       	breq	.+40     	; 0x11c6 <__addsf3x+0x9a>
    119e:	ff 0f       	add	r31, r31
    11a0:	bb 1f       	adc	r27, r27
    11a2:	66 1f       	adc	r22, r22
    11a4:	77 1f       	adc	r23, r23
    11a6:	88 1f       	adc	r24, r24
    11a8:	c2 f7       	brpl	.-16     	; 0x119a <__addsf3x+0x6e>
    11aa:	0e c0       	rjmp	.+28     	; 0x11c8 <__addsf3x+0x9c>
    11ac:	ba 0f       	add	r27, r26
    11ae:	62 1f       	adc	r22, r18
    11b0:	73 1f       	adc	r23, r19
    11b2:	84 1f       	adc	r24, r20
    11b4:	48 f4       	brcc	.+18     	; 0x11c8 <__addsf3x+0x9c>
    11b6:	87 95       	ror	r24
    11b8:	77 95       	ror	r23
    11ba:	67 95       	ror	r22
    11bc:	b7 95       	ror	r27
    11be:	f7 95       	ror	r31
    11c0:	9e 3f       	cpi	r25, 0xFE	; 254
    11c2:	08 f0       	brcs	.+2      	; 0x11c6 <__addsf3x+0x9a>
    11c4:	b0 cf       	rjmp	.-160    	; 0x1126 <__addsf3+0x28>
    11c6:	93 95       	inc	r25
    11c8:	88 0f       	add	r24, r24
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <__addsf3x+0xa2>
    11cc:	99 27       	eor	r25, r25
    11ce:	ee 0f       	add	r30, r30
    11d0:	97 95       	ror	r25
    11d2:	87 95       	ror	r24
    11d4:	08 95       	ret

000011d6 <__cmpsf2>:
    11d6:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__fp_cmp>
    11da:	08 f4       	brcc	.+2      	; 0x11de <__cmpsf2+0x8>
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	08 95       	ret

000011e0 <__divsf3>:
    11e0:	0e 94 04 09 	call	0x1208	; 0x1208 <__divsf3x>
    11e4:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__fp_round>
    11e8:	0e 94 09 0a 	call	0x1412	; 0x1412 <__fp_pscB>
    11ec:	58 f0       	brcs	.+22     	; 0x1204 <__divsf3+0x24>
    11ee:	0e 94 02 0a 	call	0x1404	; 0x1404 <__fp_pscA>
    11f2:	40 f0       	brcs	.+16     	; 0x1204 <__divsf3+0x24>
    11f4:	29 f4       	brne	.+10     	; 0x1200 <__divsf3+0x20>
    11f6:	5f 3f       	cpi	r21, 0xFF	; 255
    11f8:	29 f0       	breq	.+10     	; 0x1204 <__divsf3+0x24>
    11fa:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__fp_inf>
    11fe:	51 11       	cpse	r21, r1
    1200:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__fp_szero>
    1204:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__fp_nan>

00001208 <__divsf3x>:
    1208:	0e 94 21 0a 	call	0x1442	; 0x1442 <__fp_split3>
    120c:	68 f3       	brcs	.-38     	; 0x11e8 <__divsf3+0x8>

0000120e <__divsf3_pse>:
    120e:	99 23       	and	r25, r25
    1210:	b1 f3       	breq	.-20     	; 0x11fe <__divsf3+0x1e>
    1212:	55 23       	and	r21, r21
    1214:	91 f3       	breq	.-28     	; 0x11fa <__divsf3+0x1a>
    1216:	95 1b       	sub	r25, r21
    1218:	55 0b       	sbc	r21, r21
    121a:	bb 27       	eor	r27, r27
    121c:	aa 27       	eor	r26, r26
    121e:	62 17       	cp	r22, r18
    1220:	73 07       	cpc	r23, r19
    1222:	84 07       	cpc	r24, r20
    1224:	38 f0       	brcs	.+14     	; 0x1234 <__divsf3_pse+0x26>
    1226:	9f 5f       	subi	r25, 0xFF	; 255
    1228:	5f 4f       	sbci	r21, 0xFF	; 255
    122a:	22 0f       	add	r18, r18
    122c:	33 1f       	adc	r19, r19
    122e:	44 1f       	adc	r20, r20
    1230:	aa 1f       	adc	r26, r26
    1232:	a9 f3       	breq	.-22     	; 0x121e <__divsf3_pse+0x10>
    1234:	35 d0       	rcall	.+106    	; 0x12a0 <__divsf3_pse+0x92>
    1236:	0e 2e       	mov	r0, r30
    1238:	3a f0       	brmi	.+14     	; 0x1248 <__divsf3_pse+0x3a>
    123a:	e0 e8       	ldi	r30, 0x80	; 128
    123c:	32 d0       	rcall	.+100    	; 0x12a2 <__divsf3_pse+0x94>
    123e:	91 50       	subi	r25, 0x01	; 1
    1240:	50 40       	sbci	r21, 0x00	; 0
    1242:	e6 95       	lsr	r30
    1244:	00 1c       	adc	r0, r0
    1246:	ca f7       	brpl	.-14     	; 0x123a <__divsf3_pse+0x2c>
    1248:	2b d0       	rcall	.+86     	; 0x12a0 <__divsf3_pse+0x92>
    124a:	fe 2f       	mov	r31, r30
    124c:	29 d0       	rcall	.+82     	; 0x12a0 <__divsf3_pse+0x92>
    124e:	66 0f       	add	r22, r22
    1250:	77 1f       	adc	r23, r23
    1252:	88 1f       	adc	r24, r24
    1254:	bb 1f       	adc	r27, r27
    1256:	26 17       	cp	r18, r22
    1258:	37 07       	cpc	r19, r23
    125a:	48 07       	cpc	r20, r24
    125c:	ab 07       	cpc	r26, r27
    125e:	b0 e8       	ldi	r27, 0x80	; 128
    1260:	09 f0       	breq	.+2      	; 0x1264 <__divsf3_pse+0x56>
    1262:	bb 0b       	sbc	r27, r27
    1264:	80 2d       	mov	r24, r0
    1266:	bf 01       	movw	r22, r30
    1268:	ff 27       	eor	r31, r31
    126a:	93 58       	subi	r25, 0x83	; 131
    126c:	5f 4f       	sbci	r21, 0xFF	; 255
    126e:	3a f0       	brmi	.+14     	; 0x127e <__divsf3_pse+0x70>
    1270:	9e 3f       	cpi	r25, 0xFE	; 254
    1272:	51 05       	cpc	r21, r1
    1274:	78 f0       	brcs	.+30     	; 0x1294 <__divsf3_pse+0x86>
    1276:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__fp_inf>
    127a:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__fp_szero>
    127e:	5f 3f       	cpi	r21, 0xFF	; 255
    1280:	e4 f3       	brlt	.-8      	; 0x127a <__divsf3_pse+0x6c>
    1282:	98 3e       	cpi	r25, 0xE8	; 232
    1284:	d4 f3       	brlt	.-12     	; 0x127a <__divsf3_pse+0x6c>
    1286:	86 95       	lsr	r24
    1288:	77 95       	ror	r23
    128a:	67 95       	ror	r22
    128c:	b7 95       	ror	r27
    128e:	f7 95       	ror	r31
    1290:	9f 5f       	subi	r25, 0xFF	; 255
    1292:	c9 f7       	brne	.-14     	; 0x1286 <__divsf3_pse+0x78>
    1294:	88 0f       	add	r24, r24
    1296:	91 1d       	adc	r25, r1
    1298:	96 95       	lsr	r25
    129a:	87 95       	ror	r24
    129c:	97 f9       	bld	r25, 7
    129e:	08 95       	ret
    12a0:	e1 e0       	ldi	r30, 0x01	; 1
    12a2:	66 0f       	add	r22, r22
    12a4:	77 1f       	adc	r23, r23
    12a6:	88 1f       	adc	r24, r24
    12a8:	bb 1f       	adc	r27, r27
    12aa:	62 17       	cp	r22, r18
    12ac:	73 07       	cpc	r23, r19
    12ae:	84 07       	cpc	r24, r20
    12b0:	ba 07       	cpc	r27, r26
    12b2:	20 f0       	brcs	.+8      	; 0x12bc <__divsf3_pse+0xae>
    12b4:	62 1b       	sub	r22, r18
    12b6:	73 0b       	sbc	r23, r19
    12b8:	84 0b       	sbc	r24, r20
    12ba:	ba 0b       	sbc	r27, r26
    12bc:	ee 1f       	adc	r30, r30
    12be:	88 f7       	brcc	.-30     	; 0x12a2 <__divsf3_pse+0x94>
    12c0:	e0 95       	com	r30
    12c2:	08 95       	ret

000012c4 <__fixsfsi>:
    12c4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fixunssfsi>
    12c8:	68 94       	set
    12ca:	b1 11       	cpse	r27, r1
    12cc:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__fp_szero>
    12d0:	08 95       	ret

000012d2 <__fixunssfsi>:
    12d2:	0e 94 29 0a 	call	0x1452	; 0x1452 <__fp_splitA>
    12d6:	88 f0       	brcs	.+34     	; 0x12fa <__fixunssfsi+0x28>
    12d8:	9f 57       	subi	r25, 0x7F	; 127
    12da:	98 f0       	brcs	.+38     	; 0x1302 <__fixunssfsi+0x30>
    12dc:	b9 2f       	mov	r27, r25
    12de:	99 27       	eor	r25, r25
    12e0:	b7 51       	subi	r27, 0x17	; 23
    12e2:	b0 f0       	brcs	.+44     	; 0x1310 <__fixunssfsi+0x3e>
    12e4:	e1 f0       	breq	.+56     	; 0x131e <__fixunssfsi+0x4c>
    12e6:	66 0f       	add	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	88 1f       	adc	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	1a f0       	brmi	.+6      	; 0x12f6 <__fixunssfsi+0x24>
    12f0:	ba 95       	dec	r27
    12f2:	c9 f7       	brne	.-14     	; 0x12e6 <__fixunssfsi+0x14>
    12f4:	14 c0       	rjmp	.+40     	; 0x131e <__fixunssfsi+0x4c>
    12f6:	b1 30       	cpi	r27, 0x01	; 1
    12f8:	91 f0       	breq	.+36     	; 0x131e <__fixunssfsi+0x4c>
    12fa:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fp_zero>
    12fe:	b1 e0       	ldi	r27, 0x01	; 1
    1300:	08 95       	ret
    1302:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__fp_zero>
    1306:	67 2f       	mov	r22, r23
    1308:	78 2f       	mov	r23, r24
    130a:	88 27       	eor	r24, r24
    130c:	b8 5f       	subi	r27, 0xF8	; 248
    130e:	39 f0       	breq	.+14     	; 0x131e <__fixunssfsi+0x4c>
    1310:	b9 3f       	cpi	r27, 0xF9	; 249
    1312:	cc f3       	brlt	.-14     	; 0x1306 <__fixunssfsi+0x34>
    1314:	86 95       	lsr	r24
    1316:	77 95       	ror	r23
    1318:	67 95       	ror	r22
    131a:	b3 95       	inc	r27
    131c:	d9 f7       	brne	.-10     	; 0x1314 <__fixunssfsi+0x42>
    131e:	3e f4       	brtc	.+14     	; 0x132e <__fixunssfsi+0x5c>
    1320:	90 95       	com	r25
    1322:	80 95       	com	r24
    1324:	70 95       	com	r23
    1326:	61 95       	neg	r22
    1328:	7f 4f       	sbci	r23, 0xFF	; 255
    132a:	8f 4f       	sbci	r24, 0xFF	; 255
    132c:	9f 4f       	sbci	r25, 0xFF	; 255
    132e:	08 95       	ret

00001330 <__floatunsisf>:
    1330:	e8 94       	clt
    1332:	09 c0       	rjmp	.+18     	; 0x1346 <__floatsisf+0x12>

00001334 <__floatsisf>:
    1334:	97 fb       	bst	r25, 7
    1336:	3e f4       	brtc	.+14     	; 0x1346 <__floatsisf+0x12>
    1338:	90 95       	com	r25
    133a:	80 95       	com	r24
    133c:	70 95       	com	r23
    133e:	61 95       	neg	r22
    1340:	7f 4f       	sbci	r23, 0xFF	; 255
    1342:	8f 4f       	sbci	r24, 0xFF	; 255
    1344:	9f 4f       	sbci	r25, 0xFF	; 255
    1346:	99 23       	and	r25, r25
    1348:	a9 f0       	breq	.+42     	; 0x1374 <__floatsisf+0x40>
    134a:	f9 2f       	mov	r31, r25
    134c:	96 e9       	ldi	r25, 0x96	; 150
    134e:	bb 27       	eor	r27, r27
    1350:	93 95       	inc	r25
    1352:	f6 95       	lsr	r31
    1354:	87 95       	ror	r24
    1356:	77 95       	ror	r23
    1358:	67 95       	ror	r22
    135a:	b7 95       	ror	r27
    135c:	f1 11       	cpse	r31, r1
    135e:	f8 cf       	rjmp	.-16     	; 0x1350 <__floatsisf+0x1c>
    1360:	fa f4       	brpl	.+62     	; 0x13a0 <__floatsisf+0x6c>
    1362:	bb 0f       	add	r27, r27
    1364:	11 f4       	brne	.+4      	; 0x136a <__floatsisf+0x36>
    1366:	60 ff       	sbrs	r22, 0
    1368:	1b c0       	rjmp	.+54     	; 0x13a0 <__floatsisf+0x6c>
    136a:	6f 5f       	subi	r22, 0xFF	; 255
    136c:	7f 4f       	sbci	r23, 0xFF	; 255
    136e:	8f 4f       	sbci	r24, 0xFF	; 255
    1370:	9f 4f       	sbci	r25, 0xFF	; 255
    1372:	16 c0       	rjmp	.+44     	; 0x13a0 <__floatsisf+0x6c>
    1374:	88 23       	and	r24, r24
    1376:	11 f0       	breq	.+4      	; 0x137c <__floatsisf+0x48>
    1378:	96 e9       	ldi	r25, 0x96	; 150
    137a:	11 c0       	rjmp	.+34     	; 0x139e <__floatsisf+0x6a>
    137c:	77 23       	and	r23, r23
    137e:	21 f0       	breq	.+8      	; 0x1388 <__floatsisf+0x54>
    1380:	9e e8       	ldi	r25, 0x8E	; 142
    1382:	87 2f       	mov	r24, r23
    1384:	76 2f       	mov	r23, r22
    1386:	05 c0       	rjmp	.+10     	; 0x1392 <__floatsisf+0x5e>
    1388:	66 23       	and	r22, r22
    138a:	71 f0       	breq	.+28     	; 0x13a8 <__floatsisf+0x74>
    138c:	96 e8       	ldi	r25, 0x86	; 134
    138e:	86 2f       	mov	r24, r22
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	2a f0       	brmi	.+10     	; 0x13a0 <__floatsisf+0x6c>
    1396:	9a 95       	dec	r25
    1398:	66 0f       	add	r22, r22
    139a:	77 1f       	adc	r23, r23
    139c:	88 1f       	adc	r24, r24
    139e:	da f7       	brpl	.-10     	; 0x1396 <__floatsisf+0x62>
    13a0:	88 0f       	add	r24, r24
    13a2:	96 95       	lsr	r25
    13a4:	87 95       	ror	r24
    13a6:	97 f9       	bld	r25, 7
    13a8:	08 95       	ret

000013aa <__fp_cmp>:
    13aa:	99 0f       	add	r25, r25
    13ac:	00 08       	sbc	r0, r0
    13ae:	55 0f       	add	r21, r21
    13b0:	aa 0b       	sbc	r26, r26
    13b2:	e0 e8       	ldi	r30, 0x80	; 128
    13b4:	fe ef       	ldi	r31, 0xFE	; 254
    13b6:	16 16       	cp	r1, r22
    13b8:	17 06       	cpc	r1, r23
    13ba:	e8 07       	cpc	r30, r24
    13bc:	f9 07       	cpc	r31, r25
    13be:	c0 f0       	brcs	.+48     	; 0x13f0 <__fp_cmp+0x46>
    13c0:	12 16       	cp	r1, r18
    13c2:	13 06       	cpc	r1, r19
    13c4:	e4 07       	cpc	r30, r20
    13c6:	f5 07       	cpc	r31, r21
    13c8:	98 f0       	brcs	.+38     	; 0x13f0 <__fp_cmp+0x46>
    13ca:	62 1b       	sub	r22, r18
    13cc:	73 0b       	sbc	r23, r19
    13ce:	84 0b       	sbc	r24, r20
    13d0:	95 0b       	sbc	r25, r21
    13d2:	39 f4       	brne	.+14     	; 0x13e2 <__fp_cmp+0x38>
    13d4:	0a 26       	eor	r0, r26
    13d6:	61 f0       	breq	.+24     	; 0x13f0 <__fp_cmp+0x46>
    13d8:	23 2b       	or	r18, r19
    13da:	24 2b       	or	r18, r20
    13dc:	25 2b       	or	r18, r21
    13de:	21 f4       	brne	.+8      	; 0x13e8 <__fp_cmp+0x3e>
    13e0:	08 95       	ret
    13e2:	0a 26       	eor	r0, r26
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <__fp_cmp+0x3e>
    13e6:	a1 40       	sbci	r26, 0x01	; 1
    13e8:	a6 95       	lsr	r26
    13ea:	8f ef       	ldi	r24, 0xFF	; 255
    13ec:	81 1d       	adc	r24, r1
    13ee:	81 1d       	adc	r24, r1
    13f0:	08 95       	ret

000013f2 <__fp_inf>:
    13f2:	97 f9       	bld	r25, 7
    13f4:	9f 67       	ori	r25, 0x7F	; 127
    13f6:	80 e8       	ldi	r24, 0x80	; 128
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	08 95       	ret

000013fe <__fp_nan>:
    13fe:	9f ef       	ldi	r25, 0xFF	; 255
    1400:	80 ec       	ldi	r24, 0xC0	; 192
    1402:	08 95       	ret

00001404 <__fp_pscA>:
    1404:	00 24       	eor	r0, r0
    1406:	0a 94       	dec	r0
    1408:	16 16       	cp	r1, r22
    140a:	17 06       	cpc	r1, r23
    140c:	18 06       	cpc	r1, r24
    140e:	09 06       	cpc	r0, r25
    1410:	08 95       	ret

00001412 <__fp_pscB>:
    1412:	00 24       	eor	r0, r0
    1414:	0a 94       	dec	r0
    1416:	12 16       	cp	r1, r18
    1418:	13 06       	cpc	r1, r19
    141a:	14 06       	cpc	r1, r20
    141c:	05 06       	cpc	r0, r21
    141e:	08 95       	ret

00001420 <__fp_round>:
    1420:	09 2e       	mov	r0, r25
    1422:	03 94       	inc	r0
    1424:	00 0c       	add	r0, r0
    1426:	11 f4       	brne	.+4      	; 0x142c <__fp_round+0xc>
    1428:	88 23       	and	r24, r24
    142a:	52 f0       	brmi	.+20     	; 0x1440 <__fp_round+0x20>
    142c:	bb 0f       	add	r27, r27
    142e:	40 f4       	brcc	.+16     	; 0x1440 <__fp_round+0x20>
    1430:	bf 2b       	or	r27, r31
    1432:	11 f4       	brne	.+4      	; 0x1438 <__fp_round+0x18>
    1434:	60 ff       	sbrs	r22, 0
    1436:	04 c0       	rjmp	.+8      	; 0x1440 <__fp_round+0x20>
    1438:	6f 5f       	subi	r22, 0xFF	; 255
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	8f 4f       	sbci	r24, 0xFF	; 255
    143e:	9f 4f       	sbci	r25, 0xFF	; 255
    1440:	08 95       	ret

00001442 <__fp_split3>:
    1442:	57 fd       	sbrc	r21, 7
    1444:	90 58       	subi	r25, 0x80	; 128
    1446:	44 0f       	add	r20, r20
    1448:	55 1f       	adc	r21, r21
    144a:	59 f0       	breq	.+22     	; 0x1462 <__fp_splitA+0x10>
    144c:	5f 3f       	cpi	r21, 0xFF	; 255
    144e:	71 f0       	breq	.+28     	; 0x146c <__fp_splitA+0x1a>
    1450:	47 95       	ror	r20

00001452 <__fp_splitA>:
    1452:	88 0f       	add	r24, r24
    1454:	97 fb       	bst	r25, 7
    1456:	99 1f       	adc	r25, r25
    1458:	61 f0       	breq	.+24     	; 0x1472 <__fp_splitA+0x20>
    145a:	9f 3f       	cpi	r25, 0xFF	; 255
    145c:	79 f0       	breq	.+30     	; 0x147c <__fp_splitA+0x2a>
    145e:	87 95       	ror	r24
    1460:	08 95       	ret
    1462:	12 16       	cp	r1, r18
    1464:	13 06       	cpc	r1, r19
    1466:	14 06       	cpc	r1, r20
    1468:	55 1f       	adc	r21, r21
    146a:	f2 cf       	rjmp	.-28     	; 0x1450 <__fp_split3+0xe>
    146c:	46 95       	lsr	r20
    146e:	f1 df       	rcall	.-30     	; 0x1452 <__fp_splitA>
    1470:	08 c0       	rjmp	.+16     	; 0x1482 <__fp_splitA+0x30>
    1472:	16 16       	cp	r1, r22
    1474:	17 06       	cpc	r1, r23
    1476:	18 06       	cpc	r1, r24
    1478:	99 1f       	adc	r25, r25
    147a:	f1 cf       	rjmp	.-30     	; 0x145e <__fp_splitA+0xc>
    147c:	86 95       	lsr	r24
    147e:	71 05       	cpc	r23, r1
    1480:	61 05       	cpc	r22, r1
    1482:	08 94       	sec
    1484:	08 95       	ret

00001486 <__fp_zero>:
    1486:	e8 94       	clt

00001488 <__fp_szero>:
    1488:	bb 27       	eor	r27, r27
    148a:	66 27       	eor	r22, r22
    148c:	77 27       	eor	r23, r23
    148e:	cb 01       	movw	r24, r22
    1490:	97 f9       	bld	r25, 7
    1492:	08 95       	ret

00001494 <__gesf2>:
    1494:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__fp_cmp>
    1498:	08 f4       	brcc	.+2      	; 0x149c <__gesf2+0x8>
    149a:	8f ef       	ldi	r24, 0xFF	; 255
    149c:	08 95       	ret

0000149e <__mulsf3>:
    149e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__mulsf3x>
    14a2:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__fp_round>
    14a6:	0e 94 02 0a 	call	0x1404	; 0x1404 <__fp_pscA>
    14aa:	38 f0       	brcs	.+14     	; 0x14ba <__mulsf3+0x1c>
    14ac:	0e 94 09 0a 	call	0x1412	; 0x1412 <__fp_pscB>
    14b0:	20 f0       	brcs	.+8      	; 0x14ba <__mulsf3+0x1c>
    14b2:	95 23       	and	r25, r21
    14b4:	11 f0       	breq	.+4      	; 0x14ba <__mulsf3+0x1c>
    14b6:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__fp_inf>
    14ba:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__fp_nan>
    14be:	11 24       	eor	r1, r1
    14c0:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__fp_szero>

000014c4 <__mulsf3x>:
    14c4:	0e 94 21 0a 	call	0x1442	; 0x1442 <__fp_split3>
    14c8:	70 f3       	brcs	.-36     	; 0x14a6 <__mulsf3+0x8>

000014ca <__mulsf3_pse>:
    14ca:	95 9f       	mul	r25, r21
    14cc:	c1 f3       	breq	.-16     	; 0x14be <__mulsf3+0x20>
    14ce:	95 0f       	add	r25, r21
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	55 1f       	adc	r21, r21
    14d4:	62 9f       	mul	r22, r18
    14d6:	f0 01       	movw	r30, r0
    14d8:	72 9f       	mul	r23, r18
    14da:	bb 27       	eor	r27, r27
    14dc:	f0 0d       	add	r31, r0
    14de:	b1 1d       	adc	r27, r1
    14e0:	63 9f       	mul	r22, r19
    14e2:	aa 27       	eor	r26, r26
    14e4:	f0 0d       	add	r31, r0
    14e6:	b1 1d       	adc	r27, r1
    14e8:	aa 1f       	adc	r26, r26
    14ea:	64 9f       	mul	r22, r20
    14ec:	66 27       	eor	r22, r22
    14ee:	b0 0d       	add	r27, r0
    14f0:	a1 1d       	adc	r26, r1
    14f2:	66 1f       	adc	r22, r22
    14f4:	82 9f       	mul	r24, r18
    14f6:	22 27       	eor	r18, r18
    14f8:	b0 0d       	add	r27, r0
    14fa:	a1 1d       	adc	r26, r1
    14fc:	62 1f       	adc	r22, r18
    14fe:	73 9f       	mul	r23, r19
    1500:	b0 0d       	add	r27, r0
    1502:	a1 1d       	adc	r26, r1
    1504:	62 1f       	adc	r22, r18
    1506:	83 9f       	mul	r24, r19
    1508:	a0 0d       	add	r26, r0
    150a:	61 1d       	adc	r22, r1
    150c:	22 1f       	adc	r18, r18
    150e:	74 9f       	mul	r23, r20
    1510:	33 27       	eor	r19, r19
    1512:	a0 0d       	add	r26, r0
    1514:	61 1d       	adc	r22, r1
    1516:	23 1f       	adc	r18, r19
    1518:	84 9f       	mul	r24, r20
    151a:	60 0d       	add	r22, r0
    151c:	21 1d       	adc	r18, r1
    151e:	82 2f       	mov	r24, r18
    1520:	76 2f       	mov	r23, r22
    1522:	6a 2f       	mov	r22, r26
    1524:	11 24       	eor	r1, r1
    1526:	9f 57       	subi	r25, 0x7F	; 127
    1528:	50 40       	sbci	r21, 0x00	; 0
    152a:	9a f0       	brmi	.+38     	; 0x1552 <__mulsf3_pse+0x88>
    152c:	f1 f0       	breq	.+60     	; 0x156a <__mulsf3_pse+0xa0>
    152e:	88 23       	and	r24, r24
    1530:	4a f0       	brmi	.+18     	; 0x1544 <__mulsf3_pse+0x7a>
    1532:	ee 0f       	add	r30, r30
    1534:	ff 1f       	adc	r31, r31
    1536:	bb 1f       	adc	r27, r27
    1538:	66 1f       	adc	r22, r22
    153a:	77 1f       	adc	r23, r23
    153c:	88 1f       	adc	r24, r24
    153e:	91 50       	subi	r25, 0x01	; 1
    1540:	50 40       	sbci	r21, 0x00	; 0
    1542:	a9 f7       	brne	.-22     	; 0x152e <__mulsf3_pse+0x64>
    1544:	9e 3f       	cpi	r25, 0xFE	; 254
    1546:	51 05       	cpc	r21, r1
    1548:	80 f0       	brcs	.+32     	; 0x156a <__mulsf3_pse+0xa0>
    154a:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__fp_inf>
    154e:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__fp_szero>
    1552:	5f 3f       	cpi	r21, 0xFF	; 255
    1554:	e4 f3       	brlt	.-8      	; 0x154e <__mulsf3_pse+0x84>
    1556:	98 3e       	cpi	r25, 0xE8	; 232
    1558:	d4 f3       	brlt	.-12     	; 0x154e <__mulsf3_pse+0x84>
    155a:	86 95       	lsr	r24
    155c:	77 95       	ror	r23
    155e:	67 95       	ror	r22
    1560:	b7 95       	ror	r27
    1562:	f7 95       	ror	r31
    1564:	e7 95       	ror	r30
    1566:	9f 5f       	subi	r25, 0xFF	; 255
    1568:	c1 f7       	brne	.-16     	; 0x155a <__mulsf3_pse+0x90>
    156a:	fe 2b       	or	r31, r30
    156c:	88 0f       	add	r24, r24
    156e:	91 1d       	adc	r25, r1
    1570:	96 95       	lsr	r25
    1572:	87 95       	ror	r24
    1574:	97 f9       	bld	r25, 7
    1576:	08 95       	ret

00001578 <__tablejump2__>:
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	05 90       	lpm	r0, Z+
    157e:	f4 91       	lpm	r31, Z
    1580:	e0 2d       	mov	r30, r0
    1582:	09 94       	ijmp

00001584 <sprintf>:
    1584:	ae e0       	ldi	r26, 0x0E	; 14
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e8 ec       	ldi	r30, 0xC8	; 200
    158a:	fa e0       	ldi	r31, 0x0A	; 10
    158c:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <__prologue_saves__+0x1c>
    1590:	0d 89       	ldd	r16, Y+21	; 0x15
    1592:	1e 89       	ldd	r17, Y+22	; 0x16
    1594:	86 e0       	ldi	r24, 0x06	; 6
    1596:	8c 83       	std	Y+4, r24	; 0x04
    1598:	1a 83       	std	Y+2, r17	; 0x02
    159a:	09 83       	std	Y+1, r16	; 0x01
    159c:	8f ef       	ldi	r24, 0xFF	; 255
    159e:	9f e7       	ldi	r25, 0x7F	; 127
    15a0:	9e 83       	std	Y+6, r25	; 0x06
    15a2:	8d 83       	std	Y+5, r24	; 0x05
    15a4:	ae 01       	movw	r20, r28
    15a6:	47 5e       	subi	r20, 0xE7	; 231
    15a8:	5f 4f       	sbci	r21, 0xFF	; 255
    15aa:	6f 89       	ldd	r22, Y+23	; 0x17
    15ac:	78 8d       	ldd	r23, Y+24	; 0x18
    15ae:	ce 01       	movw	r24, r28
    15b0:	01 96       	adiw	r24, 0x01	; 1
    15b2:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <vfprintf>
    15b6:	ef 81       	ldd	r30, Y+7	; 0x07
    15b8:	f8 85       	ldd	r31, Y+8	; 0x08
    15ba:	e0 0f       	add	r30, r16
    15bc:	f1 1f       	adc	r31, r17
    15be:	10 82       	st	Z, r1
    15c0:	2e 96       	adiw	r28, 0x0e	; 14
    15c2:	e4 e0       	ldi	r30, 0x04	; 4
    15c4:	0c 94 9f 0d 	jmp	0x1b3e	; 0x1b3e <__epilogue_restores__+0x1c>

000015c8 <vfprintf>:
    15c8:	ab e0       	ldi	r26, 0x0B	; 11
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	ea ee       	ldi	r30, 0xEA	; 234
    15ce:	fa e0       	ldi	r31, 0x0A	; 10
    15d0:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__prologue_saves__>
    15d4:	6c 01       	movw	r12, r24
    15d6:	7b 01       	movw	r14, r22
    15d8:	8a 01       	movw	r16, r20
    15da:	fc 01       	movw	r30, r24
    15dc:	17 82       	std	Z+7, r1	; 0x07
    15de:	16 82       	std	Z+6, r1	; 0x06
    15e0:	83 81       	ldd	r24, Z+3	; 0x03
    15e2:	81 ff       	sbrs	r24, 1
    15e4:	cc c1       	rjmp	.+920    	; 0x197e <vfprintf+0x3b6>
    15e6:	ce 01       	movw	r24, r28
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	3c 01       	movw	r6, r24
    15ec:	f6 01       	movw	r30, r12
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	f7 01       	movw	r30, r14
    15f2:	93 fd       	sbrc	r25, 3
    15f4:	85 91       	lpm	r24, Z+
    15f6:	93 ff       	sbrs	r25, 3
    15f8:	81 91       	ld	r24, Z+
    15fa:	7f 01       	movw	r14, r30
    15fc:	88 23       	and	r24, r24
    15fe:	09 f4       	brne	.+2      	; 0x1602 <vfprintf+0x3a>
    1600:	ba c1       	rjmp	.+884    	; 0x1976 <vfprintf+0x3ae>
    1602:	85 32       	cpi	r24, 0x25	; 37
    1604:	39 f4       	brne	.+14     	; 0x1614 <vfprintf+0x4c>
    1606:	93 fd       	sbrc	r25, 3
    1608:	85 91       	lpm	r24, Z+
    160a:	93 ff       	sbrs	r25, 3
    160c:	81 91       	ld	r24, Z+
    160e:	7f 01       	movw	r14, r30
    1610:	85 32       	cpi	r24, 0x25	; 37
    1612:	29 f4       	brne	.+10     	; 0x161e <vfprintf+0x56>
    1614:	b6 01       	movw	r22, r12
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <fputc>
    161c:	e7 cf       	rjmp	.-50     	; 0x15ec <vfprintf+0x24>
    161e:	91 2c       	mov	r9, r1
    1620:	21 2c       	mov	r2, r1
    1622:	31 2c       	mov	r3, r1
    1624:	ff e1       	ldi	r31, 0x1F	; 31
    1626:	f3 15       	cp	r31, r3
    1628:	d8 f0       	brcs	.+54     	; 0x1660 <vfprintf+0x98>
    162a:	8b 32       	cpi	r24, 0x2B	; 43
    162c:	79 f0       	breq	.+30     	; 0x164c <vfprintf+0x84>
    162e:	38 f4       	brcc	.+14     	; 0x163e <vfprintf+0x76>
    1630:	80 32       	cpi	r24, 0x20	; 32
    1632:	79 f0       	breq	.+30     	; 0x1652 <vfprintf+0x8a>
    1634:	83 32       	cpi	r24, 0x23	; 35
    1636:	a1 f4       	brne	.+40     	; 0x1660 <vfprintf+0x98>
    1638:	23 2d       	mov	r18, r3
    163a:	20 61       	ori	r18, 0x10	; 16
    163c:	1d c0       	rjmp	.+58     	; 0x1678 <vfprintf+0xb0>
    163e:	8d 32       	cpi	r24, 0x2D	; 45
    1640:	61 f0       	breq	.+24     	; 0x165a <vfprintf+0x92>
    1642:	80 33       	cpi	r24, 0x30	; 48
    1644:	69 f4       	brne	.+26     	; 0x1660 <vfprintf+0x98>
    1646:	23 2d       	mov	r18, r3
    1648:	21 60       	ori	r18, 0x01	; 1
    164a:	16 c0       	rjmp	.+44     	; 0x1678 <vfprintf+0xb0>
    164c:	83 2d       	mov	r24, r3
    164e:	82 60       	ori	r24, 0x02	; 2
    1650:	38 2e       	mov	r3, r24
    1652:	e3 2d       	mov	r30, r3
    1654:	e4 60       	ori	r30, 0x04	; 4
    1656:	3e 2e       	mov	r3, r30
    1658:	2a c0       	rjmp	.+84     	; 0x16ae <vfprintf+0xe6>
    165a:	f3 2d       	mov	r31, r3
    165c:	f8 60       	ori	r31, 0x08	; 8
    165e:	1d c0       	rjmp	.+58     	; 0x169a <vfprintf+0xd2>
    1660:	37 fc       	sbrc	r3, 7
    1662:	2d c0       	rjmp	.+90     	; 0x16be <vfprintf+0xf6>
    1664:	20 ed       	ldi	r18, 0xD0	; 208
    1666:	28 0f       	add	r18, r24
    1668:	2a 30       	cpi	r18, 0x0A	; 10
    166a:	40 f0       	brcs	.+16     	; 0x167c <vfprintf+0xb4>
    166c:	8e 32       	cpi	r24, 0x2E	; 46
    166e:	b9 f4       	brne	.+46     	; 0x169e <vfprintf+0xd6>
    1670:	36 fc       	sbrc	r3, 6
    1672:	81 c1       	rjmp	.+770    	; 0x1976 <vfprintf+0x3ae>
    1674:	23 2d       	mov	r18, r3
    1676:	20 64       	ori	r18, 0x40	; 64
    1678:	32 2e       	mov	r3, r18
    167a:	19 c0       	rjmp	.+50     	; 0x16ae <vfprintf+0xe6>
    167c:	36 fe       	sbrs	r3, 6
    167e:	06 c0       	rjmp	.+12     	; 0x168c <vfprintf+0xc4>
    1680:	8a e0       	ldi	r24, 0x0A	; 10
    1682:	98 9e       	mul	r9, r24
    1684:	20 0d       	add	r18, r0
    1686:	11 24       	eor	r1, r1
    1688:	92 2e       	mov	r9, r18
    168a:	11 c0       	rjmp	.+34     	; 0x16ae <vfprintf+0xe6>
    168c:	ea e0       	ldi	r30, 0x0A	; 10
    168e:	2e 9e       	mul	r2, r30
    1690:	20 0d       	add	r18, r0
    1692:	11 24       	eor	r1, r1
    1694:	22 2e       	mov	r2, r18
    1696:	f3 2d       	mov	r31, r3
    1698:	f0 62       	ori	r31, 0x20	; 32
    169a:	3f 2e       	mov	r3, r31
    169c:	08 c0       	rjmp	.+16     	; 0x16ae <vfprintf+0xe6>
    169e:	8c 36       	cpi	r24, 0x6C	; 108
    16a0:	21 f4       	brne	.+8      	; 0x16aa <vfprintf+0xe2>
    16a2:	83 2d       	mov	r24, r3
    16a4:	80 68       	ori	r24, 0x80	; 128
    16a6:	38 2e       	mov	r3, r24
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <vfprintf+0xe6>
    16aa:	88 36       	cpi	r24, 0x68	; 104
    16ac:	41 f4       	brne	.+16     	; 0x16be <vfprintf+0xf6>
    16ae:	f7 01       	movw	r30, r14
    16b0:	93 fd       	sbrc	r25, 3
    16b2:	85 91       	lpm	r24, Z+
    16b4:	93 ff       	sbrs	r25, 3
    16b6:	81 91       	ld	r24, Z+
    16b8:	7f 01       	movw	r14, r30
    16ba:	81 11       	cpse	r24, r1
    16bc:	b3 cf       	rjmp	.-154    	; 0x1624 <vfprintf+0x5c>
    16be:	98 2f       	mov	r25, r24
    16c0:	9f 7d       	andi	r25, 0xDF	; 223
    16c2:	95 54       	subi	r25, 0x45	; 69
    16c4:	93 30       	cpi	r25, 0x03	; 3
    16c6:	28 f4       	brcc	.+10     	; 0x16d2 <vfprintf+0x10a>
    16c8:	0c 5f       	subi	r16, 0xFC	; 252
    16ca:	1f 4f       	sbci	r17, 0xFF	; 255
    16cc:	9f e3       	ldi	r25, 0x3F	; 63
    16ce:	99 83       	std	Y+1, r25	; 0x01
    16d0:	0d c0       	rjmp	.+26     	; 0x16ec <vfprintf+0x124>
    16d2:	83 36       	cpi	r24, 0x63	; 99
    16d4:	31 f0       	breq	.+12     	; 0x16e2 <vfprintf+0x11a>
    16d6:	83 37       	cpi	r24, 0x73	; 115
    16d8:	71 f0       	breq	.+28     	; 0x16f6 <vfprintf+0x12e>
    16da:	83 35       	cpi	r24, 0x53	; 83
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <vfprintf+0x118>
    16de:	59 c0       	rjmp	.+178    	; 0x1792 <vfprintf+0x1ca>
    16e0:	21 c0       	rjmp	.+66     	; 0x1724 <vfprintf+0x15c>
    16e2:	f8 01       	movw	r30, r16
    16e4:	80 81       	ld	r24, Z
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	0e 5f       	subi	r16, 0xFE	; 254
    16ea:	1f 4f       	sbci	r17, 0xFF	; 255
    16ec:	88 24       	eor	r8, r8
    16ee:	83 94       	inc	r8
    16f0:	91 2c       	mov	r9, r1
    16f2:	53 01       	movw	r10, r6
    16f4:	13 c0       	rjmp	.+38     	; 0x171c <vfprintf+0x154>
    16f6:	28 01       	movw	r4, r16
    16f8:	f2 e0       	ldi	r31, 0x02	; 2
    16fa:	4f 0e       	add	r4, r31
    16fc:	51 1c       	adc	r5, r1
    16fe:	f8 01       	movw	r30, r16
    1700:	a0 80       	ld	r10, Z
    1702:	b1 80       	ldd	r11, Z+1	; 0x01
    1704:	36 fe       	sbrs	r3, 6
    1706:	03 c0       	rjmp	.+6      	; 0x170e <vfprintf+0x146>
    1708:	69 2d       	mov	r22, r9
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <vfprintf+0x14a>
    170e:	6f ef       	ldi	r22, 0xFF	; 255
    1710:	7f ef       	ldi	r23, 0xFF	; 255
    1712:	c5 01       	movw	r24, r10
    1714:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <strnlen>
    1718:	4c 01       	movw	r8, r24
    171a:	82 01       	movw	r16, r4
    171c:	f3 2d       	mov	r31, r3
    171e:	ff 77       	andi	r31, 0x7F	; 127
    1720:	3f 2e       	mov	r3, r31
    1722:	16 c0       	rjmp	.+44     	; 0x1750 <vfprintf+0x188>
    1724:	28 01       	movw	r4, r16
    1726:	22 e0       	ldi	r18, 0x02	; 2
    1728:	42 0e       	add	r4, r18
    172a:	51 1c       	adc	r5, r1
    172c:	f8 01       	movw	r30, r16
    172e:	a0 80       	ld	r10, Z
    1730:	b1 80       	ldd	r11, Z+1	; 0x01
    1732:	36 fe       	sbrs	r3, 6
    1734:	03 c0       	rjmp	.+6      	; 0x173c <vfprintf+0x174>
    1736:	69 2d       	mov	r22, r9
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <vfprintf+0x178>
    173c:	6f ef       	ldi	r22, 0xFF	; 255
    173e:	7f ef       	ldi	r23, 0xFF	; 255
    1740:	c5 01       	movw	r24, r10
    1742:	0e 94 c5 0c 	call	0x198a	; 0x198a <strnlen_P>
    1746:	4c 01       	movw	r8, r24
    1748:	f3 2d       	mov	r31, r3
    174a:	f0 68       	ori	r31, 0x80	; 128
    174c:	3f 2e       	mov	r3, r31
    174e:	82 01       	movw	r16, r4
    1750:	33 fc       	sbrc	r3, 3
    1752:	1b c0       	rjmp	.+54     	; 0x178a <vfprintf+0x1c2>
    1754:	82 2d       	mov	r24, r2
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	88 16       	cp	r8, r24
    175a:	99 06       	cpc	r9, r25
    175c:	b0 f4       	brcc	.+44     	; 0x178a <vfprintf+0x1c2>
    175e:	b6 01       	movw	r22, r12
    1760:	80 e2       	ldi	r24, 0x20	; 32
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <fputc>
    1768:	2a 94       	dec	r2
    176a:	f4 cf       	rjmp	.-24     	; 0x1754 <vfprintf+0x18c>
    176c:	f5 01       	movw	r30, r10
    176e:	37 fc       	sbrc	r3, 7
    1770:	85 91       	lpm	r24, Z+
    1772:	37 fe       	sbrs	r3, 7
    1774:	81 91       	ld	r24, Z+
    1776:	5f 01       	movw	r10, r30
    1778:	b6 01       	movw	r22, r12
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <fputc>
    1780:	21 10       	cpse	r2, r1
    1782:	2a 94       	dec	r2
    1784:	21 e0       	ldi	r18, 0x01	; 1
    1786:	82 1a       	sub	r8, r18
    1788:	91 08       	sbc	r9, r1
    178a:	81 14       	cp	r8, r1
    178c:	91 04       	cpc	r9, r1
    178e:	71 f7       	brne	.-36     	; 0x176c <vfprintf+0x1a4>
    1790:	e8 c0       	rjmp	.+464    	; 0x1962 <vfprintf+0x39a>
    1792:	84 36       	cpi	r24, 0x64	; 100
    1794:	11 f0       	breq	.+4      	; 0x179a <vfprintf+0x1d2>
    1796:	89 36       	cpi	r24, 0x69	; 105
    1798:	41 f5       	brne	.+80     	; 0x17ea <vfprintf+0x222>
    179a:	f8 01       	movw	r30, r16
    179c:	37 fe       	sbrs	r3, 7
    179e:	07 c0       	rjmp	.+14     	; 0x17ae <vfprintf+0x1e6>
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	0c 5f       	subi	r16, 0xFC	; 252
    17aa:	1f 4f       	sbci	r17, 0xFF	; 255
    17ac:	08 c0       	rjmp	.+16     	; 0x17be <vfprintf+0x1f6>
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	07 2e       	mov	r0, r23
    17b4:	00 0c       	add	r0, r0
    17b6:	88 0b       	sbc	r24, r24
    17b8:	99 0b       	sbc	r25, r25
    17ba:	0e 5f       	subi	r16, 0xFE	; 254
    17bc:	1f 4f       	sbci	r17, 0xFF	; 255
    17be:	f3 2d       	mov	r31, r3
    17c0:	ff 76       	andi	r31, 0x6F	; 111
    17c2:	3f 2e       	mov	r3, r31
    17c4:	97 ff       	sbrs	r25, 7
    17c6:	09 c0       	rjmp	.+18     	; 0x17da <vfprintf+0x212>
    17c8:	90 95       	com	r25
    17ca:	80 95       	com	r24
    17cc:	70 95       	com	r23
    17ce:	61 95       	neg	r22
    17d0:	7f 4f       	sbci	r23, 0xFF	; 255
    17d2:	8f 4f       	sbci	r24, 0xFF	; 255
    17d4:	9f 4f       	sbci	r25, 0xFF	; 255
    17d6:	f0 68       	ori	r31, 0x80	; 128
    17d8:	3f 2e       	mov	r3, r31
    17da:	2a e0       	ldi	r18, 0x0A	; 10
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	a3 01       	movw	r20, r6
    17e0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__ultoa_invert>
    17e4:	88 2e       	mov	r8, r24
    17e6:	86 18       	sub	r8, r6
    17e8:	45 c0       	rjmp	.+138    	; 0x1874 <vfprintf+0x2ac>
    17ea:	85 37       	cpi	r24, 0x75	; 117
    17ec:	31 f4       	brne	.+12     	; 0x17fa <vfprintf+0x232>
    17ee:	23 2d       	mov	r18, r3
    17f0:	2f 7e       	andi	r18, 0xEF	; 239
    17f2:	b2 2e       	mov	r11, r18
    17f4:	2a e0       	ldi	r18, 0x0A	; 10
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	25 c0       	rjmp	.+74     	; 0x1844 <vfprintf+0x27c>
    17fa:	93 2d       	mov	r25, r3
    17fc:	99 7f       	andi	r25, 0xF9	; 249
    17fe:	b9 2e       	mov	r11, r25
    1800:	8f 36       	cpi	r24, 0x6F	; 111
    1802:	c1 f0       	breq	.+48     	; 0x1834 <vfprintf+0x26c>
    1804:	18 f4       	brcc	.+6      	; 0x180c <vfprintf+0x244>
    1806:	88 35       	cpi	r24, 0x58	; 88
    1808:	79 f0       	breq	.+30     	; 0x1828 <vfprintf+0x260>
    180a:	b5 c0       	rjmp	.+362    	; 0x1976 <vfprintf+0x3ae>
    180c:	80 37       	cpi	r24, 0x70	; 112
    180e:	19 f0       	breq	.+6      	; 0x1816 <vfprintf+0x24e>
    1810:	88 37       	cpi	r24, 0x78	; 120
    1812:	21 f0       	breq	.+8      	; 0x181c <vfprintf+0x254>
    1814:	b0 c0       	rjmp	.+352    	; 0x1976 <vfprintf+0x3ae>
    1816:	e9 2f       	mov	r30, r25
    1818:	e0 61       	ori	r30, 0x10	; 16
    181a:	be 2e       	mov	r11, r30
    181c:	b4 fe       	sbrs	r11, 4
    181e:	0d c0       	rjmp	.+26     	; 0x183a <vfprintf+0x272>
    1820:	fb 2d       	mov	r31, r11
    1822:	f4 60       	ori	r31, 0x04	; 4
    1824:	bf 2e       	mov	r11, r31
    1826:	09 c0       	rjmp	.+18     	; 0x183a <vfprintf+0x272>
    1828:	34 fe       	sbrs	r3, 4
    182a:	0a c0       	rjmp	.+20     	; 0x1840 <vfprintf+0x278>
    182c:	29 2f       	mov	r18, r25
    182e:	26 60       	ori	r18, 0x06	; 6
    1830:	b2 2e       	mov	r11, r18
    1832:	06 c0       	rjmp	.+12     	; 0x1840 <vfprintf+0x278>
    1834:	28 e0       	ldi	r18, 0x08	; 8
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	05 c0       	rjmp	.+10     	; 0x1844 <vfprintf+0x27c>
    183a:	20 e1       	ldi	r18, 0x10	; 16
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <vfprintf+0x27c>
    1840:	20 e1       	ldi	r18, 0x10	; 16
    1842:	32 e0       	ldi	r19, 0x02	; 2
    1844:	f8 01       	movw	r30, r16
    1846:	b7 fe       	sbrs	r11, 7
    1848:	07 c0       	rjmp	.+14     	; 0x1858 <vfprintf+0x290>
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	93 81       	ldd	r25, Z+3	; 0x03
    1852:	0c 5f       	subi	r16, 0xFC	; 252
    1854:	1f 4f       	sbci	r17, 0xFF	; 255
    1856:	06 c0       	rjmp	.+12     	; 0x1864 <vfprintf+0x29c>
    1858:	60 81       	ld	r22, Z
    185a:	71 81       	ldd	r23, Z+1	; 0x01
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 5f       	subi	r16, 0xFE	; 254
    1862:	1f 4f       	sbci	r17, 0xFF	; 255
    1864:	a3 01       	movw	r20, r6
    1866:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__ultoa_invert>
    186a:	88 2e       	mov	r8, r24
    186c:	86 18       	sub	r8, r6
    186e:	fb 2d       	mov	r31, r11
    1870:	ff 77       	andi	r31, 0x7F	; 127
    1872:	3f 2e       	mov	r3, r31
    1874:	36 fe       	sbrs	r3, 6
    1876:	0d c0       	rjmp	.+26     	; 0x1892 <vfprintf+0x2ca>
    1878:	23 2d       	mov	r18, r3
    187a:	2e 7f       	andi	r18, 0xFE	; 254
    187c:	a2 2e       	mov	r10, r18
    187e:	89 14       	cp	r8, r9
    1880:	58 f4       	brcc	.+22     	; 0x1898 <vfprintf+0x2d0>
    1882:	34 fe       	sbrs	r3, 4
    1884:	0b c0       	rjmp	.+22     	; 0x189c <vfprintf+0x2d4>
    1886:	32 fc       	sbrc	r3, 2
    1888:	09 c0       	rjmp	.+18     	; 0x189c <vfprintf+0x2d4>
    188a:	83 2d       	mov	r24, r3
    188c:	8e 7e       	andi	r24, 0xEE	; 238
    188e:	a8 2e       	mov	r10, r24
    1890:	05 c0       	rjmp	.+10     	; 0x189c <vfprintf+0x2d4>
    1892:	b8 2c       	mov	r11, r8
    1894:	a3 2c       	mov	r10, r3
    1896:	03 c0       	rjmp	.+6      	; 0x189e <vfprintf+0x2d6>
    1898:	b8 2c       	mov	r11, r8
    189a:	01 c0       	rjmp	.+2      	; 0x189e <vfprintf+0x2d6>
    189c:	b9 2c       	mov	r11, r9
    189e:	a4 fe       	sbrs	r10, 4
    18a0:	0f c0       	rjmp	.+30     	; 0x18c0 <vfprintf+0x2f8>
    18a2:	fe 01       	movw	r30, r28
    18a4:	e8 0d       	add	r30, r8
    18a6:	f1 1d       	adc	r31, r1
    18a8:	80 81       	ld	r24, Z
    18aa:	80 33       	cpi	r24, 0x30	; 48
    18ac:	21 f4       	brne	.+8      	; 0x18b6 <vfprintf+0x2ee>
    18ae:	9a 2d       	mov	r25, r10
    18b0:	99 7e       	andi	r25, 0xE9	; 233
    18b2:	a9 2e       	mov	r10, r25
    18b4:	09 c0       	rjmp	.+18     	; 0x18c8 <vfprintf+0x300>
    18b6:	a2 fe       	sbrs	r10, 2
    18b8:	06 c0       	rjmp	.+12     	; 0x18c6 <vfprintf+0x2fe>
    18ba:	b3 94       	inc	r11
    18bc:	b3 94       	inc	r11
    18be:	04 c0       	rjmp	.+8      	; 0x18c8 <vfprintf+0x300>
    18c0:	8a 2d       	mov	r24, r10
    18c2:	86 78       	andi	r24, 0x86	; 134
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <vfprintf+0x300>
    18c6:	b3 94       	inc	r11
    18c8:	a3 fc       	sbrc	r10, 3
    18ca:	11 c0       	rjmp	.+34     	; 0x18ee <vfprintf+0x326>
    18cc:	a0 fe       	sbrs	r10, 0
    18ce:	06 c0       	rjmp	.+12     	; 0x18dc <vfprintf+0x314>
    18d0:	b2 14       	cp	r11, r2
    18d2:	88 f4       	brcc	.+34     	; 0x18f6 <vfprintf+0x32e>
    18d4:	28 0c       	add	r2, r8
    18d6:	92 2c       	mov	r9, r2
    18d8:	9b 18       	sub	r9, r11
    18da:	0e c0       	rjmp	.+28     	; 0x18f8 <vfprintf+0x330>
    18dc:	b2 14       	cp	r11, r2
    18de:	60 f4       	brcc	.+24     	; 0x18f8 <vfprintf+0x330>
    18e0:	b6 01       	movw	r22, r12
    18e2:	80 e2       	ldi	r24, 0x20	; 32
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <fputc>
    18ea:	b3 94       	inc	r11
    18ec:	f7 cf       	rjmp	.-18     	; 0x18dc <vfprintf+0x314>
    18ee:	b2 14       	cp	r11, r2
    18f0:	18 f4       	brcc	.+6      	; 0x18f8 <vfprintf+0x330>
    18f2:	2b 18       	sub	r2, r11
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <vfprintf+0x332>
    18f6:	98 2c       	mov	r9, r8
    18f8:	21 2c       	mov	r2, r1
    18fa:	a4 fe       	sbrs	r10, 4
    18fc:	10 c0       	rjmp	.+32     	; 0x191e <vfprintf+0x356>
    18fe:	b6 01       	movw	r22, r12
    1900:	80 e3       	ldi	r24, 0x30	; 48
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <fputc>
    1908:	a2 fe       	sbrs	r10, 2
    190a:	17 c0       	rjmp	.+46     	; 0x193a <vfprintf+0x372>
    190c:	a1 fc       	sbrc	r10, 1
    190e:	03 c0       	rjmp	.+6      	; 0x1916 <vfprintf+0x34e>
    1910:	88 e7       	ldi	r24, 0x78	; 120
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	02 c0       	rjmp	.+4      	; 0x191a <vfprintf+0x352>
    1916:	88 e5       	ldi	r24, 0x58	; 88
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	b6 01       	movw	r22, r12
    191c:	0c c0       	rjmp	.+24     	; 0x1936 <vfprintf+0x36e>
    191e:	8a 2d       	mov	r24, r10
    1920:	86 78       	andi	r24, 0x86	; 134
    1922:	59 f0       	breq	.+22     	; 0x193a <vfprintf+0x372>
    1924:	a1 fe       	sbrs	r10, 1
    1926:	02 c0       	rjmp	.+4      	; 0x192c <vfprintf+0x364>
    1928:	8b e2       	ldi	r24, 0x2B	; 43
    192a:	01 c0       	rjmp	.+2      	; 0x192e <vfprintf+0x366>
    192c:	80 e2       	ldi	r24, 0x20	; 32
    192e:	a7 fc       	sbrc	r10, 7
    1930:	8d e2       	ldi	r24, 0x2D	; 45
    1932:	b6 01       	movw	r22, r12
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <fputc>
    193a:	89 14       	cp	r8, r9
    193c:	38 f4       	brcc	.+14     	; 0x194c <vfprintf+0x384>
    193e:	b6 01       	movw	r22, r12
    1940:	80 e3       	ldi	r24, 0x30	; 48
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <fputc>
    1948:	9a 94       	dec	r9
    194a:	f7 cf       	rjmp	.-18     	; 0x193a <vfprintf+0x372>
    194c:	8a 94       	dec	r8
    194e:	f3 01       	movw	r30, r6
    1950:	e8 0d       	add	r30, r8
    1952:	f1 1d       	adc	r31, r1
    1954:	80 81       	ld	r24, Z
    1956:	b6 01       	movw	r22, r12
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <fputc>
    195e:	81 10       	cpse	r8, r1
    1960:	f5 cf       	rjmp	.-22     	; 0x194c <vfprintf+0x384>
    1962:	22 20       	and	r2, r2
    1964:	09 f4       	brne	.+2      	; 0x1968 <vfprintf+0x3a0>
    1966:	42 ce       	rjmp	.-892    	; 0x15ec <vfprintf+0x24>
    1968:	b6 01       	movw	r22, r12
    196a:	80 e2       	ldi	r24, 0x20	; 32
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <fputc>
    1972:	2a 94       	dec	r2
    1974:	f6 cf       	rjmp	.-20     	; 0x1962 <vfprintf+0x39a>
    1976:	f6 01       	movw	r30, r12
    1978:	86 81       	ldd	r24, Z+6	; 0x06
    197a:	97 81       	ldd	r25, Z+7	; 0x07
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <vfprintf+0x3ba>
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	9f ef       	ldi	r25, 0xFF	; 255
    1982:	2b 96       	adiw	r28, 0x0b	; 11
    1984:	e2 e1       	ldi	r30, 0x12	; 18
    1986:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <__epilogue_restores__>

0000198a <strnlen_P>:
    198a:	fc 01       	movw	r30, r24
    198c:	05 90       	lpm	r0, Z+
    198e:	61 50       	subi	r22, 0x01	; 1
    1990:	70 40       	sbci	r23, 0x00	; 0
    1992:	01 10       	cpse	r0, r1
    1994:	d8 f7       	brcc	.-10     	; 0x198c <strnlen_P+0x2>
    1996:	80 95       	com	r24
    1998:	90 95       	com	r25
    199a:	8e 0f       	add	r24, r30
    199c:	9f 1f       	adc	r25, r31
    199e:	08 95       	ret

000019a0 <strnlen>:
    19a0:	fc 01       	movw	r30, r24
    19a2:	61 50       	subi	r22, 0x01	; 1
    19a4:	70 40       	sbci	r23, 0x00	; 0
    19a6:	01 90       	ld	r0, Z+
    19a8:	01 10       	cpse	r0, r1
    19aa:	d8 f7       	brcc	.-10     	; 0x19a2 <strnlen+0x2>
    19ac:	80 95       	com	r24
    19ae:	90 95       	com	r25
    19b0:	8e 0f       	add	r24, r30
    19b2:	9f 1f       	adc	r25, r31
    19b4:	08 95       	ret

000019b6 <fputc>:
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	fb 01       	movw	r30, r22
    19c0:	23 81       	ldd	r18, Z+3	; 0x03
    19c2:	21 fd       	sbrc	r18, 1
    19c4:	03 c0       	rjmp	.+6      	; 0x19cc <fputc+0x16>
    19c6:	8f ef       	ldi	r24, 0xFF	; 255
    19c8:	9f ef       	ldi	r25, 0xFF	; 255
    19ca:	2c c0       	rjmp	.+88     	; 0x1a24 <fputc+0x6e>
    19cc:	22 ff       	sbrs	r18, 2
    19ce:	16 c0       	rjmp	.+44     	; 0x19fc <fputc+0x46>
    19d0:	46 81       	ldd	r20, Z+6	; 0x06
    19d2:	57 81       	ldd	r21, Z+7	; 0x07
    19d4:	24 81       	ldd	r18, Z+4	; 0x04
    19d6:	35 81       	ldd	r19, Z+5	; 0x05
    19d8:	42 17       	cp	r20, r18
    19da:	53 07       	cpc	r21, r19
    19dc:	44 f4       	brge	.+16     	; 0x19ee <fputc+0x38>
    19de:	a0 81       	ld	r26, Z
    19e0:	b1 81       	ldd	r27, Z+1	; 0x01
    19e2:	9d 01       	movw	r18, r26
    19e4:	2f 5f       	subi	r18, 0xFF	; 255
    19e6:	3f 4f       	sbci	r19, 0xFF	; 255
    19e8:	31 83       	std	Z+1, r19	; 0x01
    19ea:	20 83       	st	Z, r18
    19ec:	8c 93       	st	X, r24
    19ee:	26 81       	ldd	r18, Z+6	; 0x06
    19f0:	37 81       	ldd	r19, Z+7	; 0x07
    19f2:	2f 5f       	subi	r18, 0xFF	; 255
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	37 83       	std	Z+7, r19	; 0x07
    19f8:	26 83       	std	Z+6, r18	; 0x06
    19fa:	14 c0       	rjmp	.+40     	; 0x1a24 <fputc+0x6e>
    19fc:	8b 01       	movw	r16, r22
    19fe:	ec 01       	movw	r28, r24
    1a00:	fb 01       	movw	r30, r22
    1a02:	00 84       	ldd	r0, Z+8	; 0x08
    1a04:	f1 85       	ldd	r31, Z+9	; 0x09
    1a06:	e0 2d       	mov	r30, r0
    1a08:	09 95       	icall
    1a0a:	89 2b       	or	r24, r25
    1a0c:	e1 f6       	brne	.-72     	; 0x19c6 <fputc+0x10>
    1a0e:	d8 01       	movw	r26, r16
    1a10:	16 96       	adiw	r26, 0x06	; 6
    1a12:	8d 91       	ld	r24, X+
    1a14:	9c 91       	ld	r25, X
    1a16:	17 97       	sbiw	r26, 0x07	; 7
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	17 96       	adiw	r26, 0x07	; 7
    1a1c:	9c 93       	st	X, r25
    1a1e:	8e 93       	st	-X, r24
    1a20:	16 97       	sbiw	r26, 0x06	; 6
    1a22:	ce 01       	movw	r24, r28
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	08 95       	ret

00001a2e <__ultoa_invert>:
    1a2e:	fa 01       	movw	r30, r20
    1a30:	aa 27       	eor	r26, r26
    1a32:	28 30       	cpi	r18, 0x08	; 8
    1a34:	51 f1       	breq	.+84     	; 0x1a8a <__ultoa_invert+0x5c>
    1a36:	20 31       	cpi	r18, 0x10	; 16
    1a38:	81 f1       	breq	.+96     	; 0x1a9a <__ultoa_invert+0x6c>
    1a3a:	e8 94       	clt
    1a3c:	6f 93       	push	r22
    1a3e:	6e 7f       	andi	r22, 0xFE	; 254
    1a40:	6e 5f       	subi	r22, 0xFE	; 254
    1a42:	7f 4f       	sbci	r23, 0xFF	; 255
    1a44:	8f 4f       	sbci	r24, 0xFF	; 255
    1a46:	9f 4f       	sbci	r25, 0xFF	; 255
    1a48:	af 4f       	sbci	r26, 0xFF	; 255
    1a4a:	b1 e0       	ldi	r27, 0x01	; 1
    1a4c:	3e d0       	rcall	.+124    	; 0x1aca <__ultoa_invert+0x9c>
    1a4e:	b4 e0       	ldi	r27, 0x04	; 4
    1a50:	3c d0       	rcall	.+120    	; 0x1aca <__ultoa_invert+0x9c>
    1a52:	67 0f       	add	r22, r23
    1a54:	78 1f       	adc	r23, r24
    1a56:	89 1f       	adc	r24, r25
    1a58:	9a 1f       	adc	r25, r26
    1a5a:	a1 1d       	adc	r26, r1
    1a5c:	68 0f       	add	r22, r24
    1a5e:	79 1f       	adc	r23, r25
    1a60:	8a 1f       	adc	r24, r26
    1a62:	91 1d       	adc	r25, r1
    1a64:	a1 1d       	adc	r26, r1
    1a66:	6a 0f       	add	r22, r26
    1a68:	71 1d       	adc	r23, r1
    1a6a:	81 1d       	adc	r24, r1
    1a6c:	91 1d       	adc	r25, r1
    1a6e:	a1 1d       	adc	r26, r1
    1a70:	20 d0       	rcall	.+64     	; 0x1ab2 <__ultoa_invert+0x84>
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <__ultoa_invert+0x48>
    1a74:	68 94       	set
    1a76:	3f 91       	pop	r19
    1a78:	2a e0       	ldi	r18, 0x0A	; 10
    1a7a:	26 9f       	mul	r18, r22
    1a7c:	11 24       	eor	r1, r1
    1a7e:	30 19       	sub	r19, r0
    1a80:	30 5d       	subi	r19, 0xD0	; 208
    1a82:	31 93       	st	Z+, r19
    1a84:	de f6       	brtc	.-74     	; 0x1a3c <__ultoa_invert+0xe>
    1a86:	cf 01       	movw	r24, r30
    1a88:	08 95       	ret
    1a8a:	46 2f       	mov	r20, r22
    1a8c:	47 70       	andi	r20, 0x07	; 7
    1a8e:	40 5d       	subi	r20, 0xD0	; 208
    1a90:	41 93       	st	Z+, r20
    1a92:	b3 e0       	ldi	r27, 0x03	; 3
    1a94:	0f d0       	rcall	.+30     	; 0x1ab4 <__ultoa_invert+0x86>
    1a96:	c9 f7       	brne	.-14     	; 0x1a8a <__ultoa_invert+0x5c>
    1a98:	f6 cf       	rjmp	.-20     	; 0x1a86 <__ultoa_invert+0x58>
    1a9a:	46 2f       	mov	r20, r22
    1a9c:	4f 70       	andi	r20, 0x0F	; 15
    1a9e:	40 5d       	subi	r20, 0xD0	; 208
    1aa0:	4a 33       	cpi	r20, 0x3A	; 58
    1aa2:	18 f0       	brcs	.+6      	; 0x1aaa <__ultoa_invert+0x7c>
    1aa4:	49 5d       	subi	r20, 0xD9	; 217
    1aa6:	31 fd       	sbrc	r19, 1
    1aa8:	40 52       	subi	r20, 0x20	; 32
    1aaa:	41 93       	st	Z+, r20
    1aac:	02 d0       	rcall	.+4      	; 0x1ab2 <__ultoa_invert+0x84>
    1aae:	a9 f7       	brne	.-22     	; 0x1a9a <__ultoa_invert+0x6c>
    1ab0:	ea cf       	rjmp	.-44     	; 0x1a86 <__ultoa_invert+0x58>
    1ab2:	b4 e0       	ldi	r27, 0x04	; 4
    1ab4:	a6 95       	lsr	r26
    1ab6:	97 95       	ror	r25
    1ab8:	87 95       	ror	r24
    1aba:	77 95       	ror	r23
    1abc:	67 95       	ror	r22
    1abe:	ba 95       	dec	r27
    1ac0:	c9 f7       	brne	.-14     	; 0x1ab4 <__ultoa_invert+0x86>
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	61 05       	cpc	r22, r1
    1ac6:	71 05       	cpc	r23, r1
    1ac8:	08 95       	ret
    1aca:	9b 01       	movw	r18, r22
    1acc:	ac 01       	movw	r20, r24
    1ace:	0a 2e       	mov	r0, r26
    1ad0:	06 94       	lsr	r0
    1ad2:	57 95       	ror	r21
    1ad4:	47 95       	ror	r20
    1ad6:	37 95       	ror	r19
    1ad8:	27 95       	ror	r18
    1ada:	ba 95       	dec	r27
    1adc:	c9 f7       	brne	.-14     	; 0x1ad0 <__ultoa_invert+0xa2>
    1ade:	62 0f       	add	r22, r18
    1ae0:	73 1f       	adc	r23, r19
    1ae2:	84 1f       	adc	r24, r20
    1ae4:	95 1f       	adc	r25, r21
    1ae6:	a0 1d       	adc	r26, r0
    1ae8:	08 95       	ret

00001aea <__prologue_saves__>:
    1aea:	2f 92       	push	r2
    1aec:	3f 92       	push	r3
    1aee:	4f 92       	push	r4
    1af0:	5f 92       	push	r5
    1af2:	6f 92       	push	r6
    1af4:	7f 92       	push	r7
    1af6:	8f 92       	push	r8
    1af8:	9f 92       	push	r9
    1afa:	af 92       	push	r10
    1afc:	bf 92       	push	r11
    1afe:	cf 92       	push	r12
    1b00:	df 92       	push	r13
    1b02:	ef 92       	push	r14
    1b04:	ff 92       	push	r15
    1b06:	0f 93       	push	r16
    1b08:	1f 93       	push	r17
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	ca 1b       	sub	r28, r26
    1b14:	db 0b       	sbc	r29, r27
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	09 94       	ijmp

00001b22 <__epilogue_restores__>:
    1b22:	2a 88       	ldd	r2, Y+18	; 0x12
    1b24:	39 88       	ldd	r3, Y+17	; 0x11
    1b26:	48 88       	ldd	r4, Y+16	; 0x10
    1b28:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b30:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b32:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b34:	b9 84       	ldd	r11, Y+9	; 0x09
    1b36:	c8 84       	ldd	r12, Y+8	; 0x08
    1b38:	df 80       	ldd	r13, Y+7	; 0x07
    1b3a:	ee 80       	ldd	r14, Y+6	; 0x06
    1b3c:	fd 80       	ldd	r15, Y+5	; 0x05
    1b3e:	0c 81       	ldd	r16, Y+4	; 0x04
    1b40:	1b 81       	ldd	r17, Y+3	; 0x03
    1b42:	aa 81       	ldd	r26, Y+2	; 0x02
    1b44:	b9 81       	ldd	r27, Y+1	; 0x01
    1b46:	ce 0f       	add	r28, r30
    1b48:	d1 1d       	adc	r29, r1
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	ed 01       	movw	r28, r26
    1b56:	08 95       	ret

00001b58 <_exit>:
    1b58:	f8 94       	cli

00001b5a <__stop_program>:
    1b5a:	ff cf       	rjmp	.-2      	; 0x1b5a <__stop_program>
