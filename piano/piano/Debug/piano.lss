
piano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000f52  00000fc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f52  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000ffa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001506  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c0  00000000  00000000  0000260a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000098c  00000000  00000000  00002fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  00003958  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000052c  00000000  00000000  00003ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001026  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  00005032  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  68:	00 03       	mulsu	r16, r16
  6a:	0f 03       	fmul	r16, r23
  6c:	1e 03       	fmul	r17, r22
  6e:	2d 03       	fmul	r18, r21
  70:	3c 03       	fmul	r19, r20
  72:	4b 03       	fmul	r20, r19
  74:	5a 03       	fmul	r21, r18
  76:	69 03       	fmul	r22, r17
  78:	95 03       	fmuls	r17, r21
  7a:	a4 03       	fmuls	r18, r20
  7c:	b3 03       	fmuls	r19, r19
  7e:	c2 03       	fmuls	r20, r18
  80:	d1 03       	fmuls	r21, r17
  82:	e0 03       	fmuls	r22, r16
  84:	ef 03       	fmulsu	r22, r23
  86:	fe 03       	fmulsu	r23, r22
  88:	2a 04       	cpc	r2, r10
  8a:	39 04       	cpc	r3, r9
  8c:	48 04       	cpc	r4, r8
  8e:	57 04       	cpc	r5, r7
  90:	66 04       	cpc	r6, r6
  92:	75 04       	cpc	r7, r5
  94:	84 04       	cpc	r8, r4
  96:	93 04       	cpc	r9, r3
  98:	05 a8       	ldd	r0, Z+53	; 0x35
  9a:	4c cd       	rjmp	.-1384   	; 0xfffffb34 <__eeprom_end+0xff7efb34>
  9c:	b2 d4       	rcall	.+2404   	; 0xa02 <__addsf3x+0x2c>
  9e:	4e b9       	out	0x0e, r20	; 14
  a0:	38 36       	cpi	r19, 0x68	; 104
  a2:	a9 02       	muls	r26, r25
  a4:	0c 50       	subi	r16, 0x0C	; 12
  a6:	b9 91       	ld	r27, Y+
  a8:	86 88       	ldd	r8, Z+22	; 0x16
  aa:	08 3c       	cpi	r16, 0xC8	; 200
  ac:	a6 aa       	std	Z+54, r10	; 0x36
  ae:	aa 2a       	or	r10, r26
  b0:	be 00       	.word	0x00be	; ????
  b2:	00 00       	nop
  b4:	80 3f       	cpi	r24, 0xF0	; 240

000000b6 <__ctors_end>:
  b6:	11 24       	eor	r1, r1
  b8:	1f be       	out	0x3f, r1	; 63
  ba:	cf ef       	ldi	r28, 0xFF	; 255
  bc:	d8 e0       	ldi	r29, 0x08	; 8
  be:	de bf       	out	0x3e, r29	; 62
  c0:	cd bf       	out	0x3d, r28	; 61

000000c2 <__do_copy_data>:
  c2:	11 e0       	ldi	r17, 0x01	; 1
  c4:	a0 e0       	ldi	r26, 0x00	; 0
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	e2 e5       	ldi	r30, 0x52	; 82
  ca:	ff e0       	ldi	r31, 0x0F	; 15
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <__do_copy_data+0x10>
  ce:	05 90       	lpm	r0, Z+
  d0:	0d 92       	st	X+, r0
  d2:	a4 33       	cpi	r26, 0x34	; 52
  d4:	b1 07       	cpc	r27, r17
  d6:	d9 f7       	brne	.-10     	; 0xce <__do_copy_data+0xc>
  d8:	0e 94 74 02 	call	0x4e8	; 0x4e8 <main>
  dc:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <lcd_send_command>:
	
}

void lcd_send_command (uint8_t command)
{
	DATA_BUS=(command&0b11110000);
  e4:	98 2f       	mov	r25, r24
  e6:	90 7f       	andi	r25, 0xF0	; 240
  e8:	9b b9       	out	0x0b, r25	; 11
	CTL_BUS &=~(1<<LCD_RS);
  ea:	43 98       	cbi	0x08, 3	; 8
	CTL_BUS |=(1<<LCD_EN);
  ec:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	ef e9       	ldi	r30, 0x9F	; 159
  f0:	ff e0       	ldi	r31, 0x0F	; 15
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_send_command+0xe>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_send_command+0x14>
  f8:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
  fa:	45 98       	cbi	0x08, 5	; 8
  fc:	ef e9       	ldi	r30, 0x9F	; 159
  fe:	ff e0       	ldi	r31, 0x0F	; 15
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_send_command+0x1c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_send_command+0x22>
 106:	00 00       	nop
	_delay_ms(1);
	DATA_BUS=((command&0b00001111)<<4);
 108:	f0 e1       	ldi	r31, 0x10	; 16
 10a:	8f 9f       	mul	r24, r31
 10c:	c0 01       	movw	r24, r0
 10e:	11 24       	eor	r1, r1
 110:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS |=(1<<LCD_EN);
 112:	45 9a       	sbi	0x08, 5	; 8
 114:	8f e9       	ldi	r24, 0x9F	; 159
 116:	9f e0       	ldi	r25, 0x0F	; 15
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_send_command+0x34>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_send_command+0x3a>
 11e:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
 120:	45 98       	cbi	0x08, 5	; 8
 122:	ef e9       	ldi	r30, 0x9F	; 159
 124:	ff e0       	ldi	r31, 0x0F	; 15
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_send_command+0x42>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_send_command+0x48>
 12c:	00 00       	nop
 12e:	08 95       	ret

00000130 <lcd_init>:


void lcd_init(void)
{
	
	DATA_DDR = (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5)| (1<<LCD_D4);
 130:	80 ef       	ldi	r24, 0xF0	; 240
 132:	8a b9       	out	0x0a, r24	; 10
	CTL_DDR |= (1<<LCD_EN)|(1<<LCD_RW)|(1<<LCD_RS);
 134:	87 b1       	in	r24, 0x07	; 7
 136:	88 63       	ori	r24, 0x38	; 56
 138:	87 b9       	out	0x07, r24	; 7

	
	DATA_BUS = (0<<LCD_D7)|(0<<LCD_D6)|(1<<LCD_D5)|(0<<LCD_D4);
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS|= (1<<LCD_EN)|(0<<LCD_RW)|(0<<LCD_RS);
 13e:	45 9a       	sbi	0x08, 5	; 8
 140:	8f e9       	ldi	r24, 0x9F	; 159
 142:	9f e0       	ldi	r25, 0x0F	; 15
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_init+0x14>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_init+0x1a>
 14a:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
 14c:	45 98       	cbi	0x08, 5	; 8
 14e:	8f e9       	ldi	r24, 0x9F	; 159
 150:	9f e0       	ldi	r25, 0x0F	; 15
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_init+0x22>
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_init+0x28>
 158:	00 00       	nop
	_delay_ms(1);
	
	lcd_send_command(LCD_CMD_4BIT_2ROW_5X7);
 15a:	88 e2       	ldi	r24, 0x28	; 40
 15c:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_send_command>
 160:	8f e9       	ldi	r24, 0x9F	; 159
 162:	9f e0       	ldi	r25, 0x0F	; 15
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_init+0x34>
 168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_init+0x3a>
 16a:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(LCD_CMD_DISPLAY_NO_CURSOR);
 16c:	8c e0       	ldi	r24, 0x0C	; 12
 16e:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_send_command>
 172:	8f e9       	ldi	r24, 0x9F	; 159
 174:	9f e0       	ldi	r25, 0x0F	; 15
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_init+0x46>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_init+0x4c>
 17c:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(0x80);
 17e:	80 e8       	ldi	r24, 0x80	; 128
 180:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_send_command>
 184:	08 95       	ret

00000186 <lcd_write_character>:
	}
}
void lcd_write_character(uint8_t character)
{
	
	DATA_BUS=(character & 0b11110000);
 186:	98 2f       	mov	r25, r24
 188:	90 7f       	andi	r25, 0xF0	; 240
 18a:	9b b9       	out	0x0b, r25	; 11
	CTL_BUS|=(1<<LCD_RS);
 18c:	43 9a       	sbi	0x08, 3	; 8
	CTL_BUS |=(1<<LCD_EN);
 18e:	45 9a       	sbi	0x08, 5	; 8
 190:	ef e3       	ldi	r30, 0x3F	; 63
 192:	ff e1       	ldi	r31, 0x1F	; 31
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_write_character+0xe>
 198:	00 c0       	rjmp	.+0      	; 0x19a <lcd_write_character+0x14>
 19a:	00 00       	nop
	_delay_ms(2);
	CTL_BUS &=~(1<<LCD_EN);
 19c:	45 98       	cbi	0x08, 5	; 8
 19e:	ef e3       	ldi	r30, 0x3F	; 63
 1a0:	ff e1       	ldi	r31, 0x1F	; 31
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_write_character+0x1c>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_write_character+0x22>
 1a8:	00 00       	nop
	_delay_ms(2);
	DATA_BUS=((character & 0b00001111)<<4);
 1aa:	f0 e1       	ldi	r31, 0x10	; 16
 1ac:	8f 9f       	mul	r24, r31
 1ae:	c0 01       	movw	r24, r0
 1b0:	11 24       	eor	r1, r1
 1b2:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS |=(1<<LCD_EN);
 1b4:	45 9a       	sbi	0x08, 5	; 8
 1b6:	8f e3       	ldi	r24, 0x3F	; 63
 1b8:	9f e1       	ldi	r25, 0x1F	; 31
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_write_character+0x34>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_write_character+0x3a>
 1c0:	00 00       	nop
	_delay_ms(2);
	CTL_BUS &=~(1<<LCD_EN);
 1c2:	45 98       	cbi	0x08, 5	; 8
 1c4:	ef e3       	ldi	r30, 0x3F	; 63
 1c6:	ff e1       	ldi	r31, 0x1F	; 31
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_write_character+0x42>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_write_character+0x48>
 1ce:	00 00       	nop
 1d0:	08 95       	ret

000001d2 <lcd_write_word>:
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
	_delay_ms(1);
}
void lcd_write_word(uint8_t word[20])
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24
	int i=0;
	while(word[i]!='\0')
 1d8:	88 81       	ld	r24, Y
 1da:	88 23       	and	r24, r24
 1dc:	31 f0       	breq	.+12     	; 0x1ea <lcd_write_word+0x18>
 1de:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_write_character(word[i]);
 1e0:	0e 94 c3 00 	call	0x186	; 0x186 <lcd_write_character>
	_delay_ms(1);
}
void lcd_write_word(uint8_t word[20])
{
	int i=0;
	while(word[i]!='\0')
 1e4:	89 91       	ld	r24, Y+
 1e6:	81 11       	cpse	r24, r1
 1e8:	fb cf       	rjmp	.-10     	; 0x1e0 <lcd_write_word+0xe>
	{
		lcd_write_character(word[i]);
		i++;
	}
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <lcd_clear>:
	_delay_ms(2);
	
}
void lcd_clear(void)
{
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_send_command>
 1f6:	08 95       	ret

000001f8 <lcd_goto_xy>:
	
}
void lcd_goto_xy (uint8_t line,uint8_t pos)				//line = 0 or 1
{
	lcd_send_command((0x80|(line<<6))+pos);
 1f8:	20 e4       	ldi	r18, 0x40	; 64
 1fa:	82 9f       	mul	r24, r18
 1fc:	c0 01       	movw	r24, r0
 1fe:	11 24       	eor	r1, r1
 200:	80 68       	ori	r24, 0x80	; 128
 202:	86 0f       	add	r24, r22
 204:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	87 ec       	ldi	r24, 0xC7	; 199
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_goto_xy+0x14>
 210:	00 c0       	rjmp	.+0      	; 0x212 <lcd_goto_xy+0x1a>
 212:	00 00       	nop
 214:	08 95       	ret

00000216 <readInput1>:
/*74HC165 read function*/
volatile uint8_t readInput1(void){
	uint8_t reader = 0;

	/* Set PINC2 (PC2) as input */
	DDRC &= ~(1 << PC2);
 216:	3a 98       	cbi	0x07, 2	; 7

	/* Raise LD pin */
	PORTC |= (1 << PC1);
 218:	41 9a       	sbi	0x08, 1	; 8
 21a:	28 e0       	ldi	r18, 0x08	; 8
 21c:	30 e0       	ldi	r19, 0x00	; 0
void stop_sound(void);


/*74HC165 read function*/
volatile uint8_t readInput1(void){
	uint8_t reader = 0;
 21e:	80 e0       	ldi	r24, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 220:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PINC & (1 << PC2)) ? 1 : 0);
 222:	96 b1       	in	r25, 0x06	; 6
 224:	92 fb       	bst	r25, 2
 226:	99 27       	eor	r25, r25
 228:	90 f9       	bld	r25, 0
 22a:	88 0f       	add	r24, r24
 22c:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
 22e:	40 98       	cbi	0x08, 0	; 8
 230:	94 2f       	mov	r25, r20
 232:	9a 95       	dec	r25
 234:	f1 f7       	brne	.-4      	; 0x232 <readInput1+0x1c>
		_delay_us(1);
		PORTC |= (1 << PC0);
 236:	40 9a       	sbi	0x08, 0	; 8
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	31 09       	sbc	r19, r1
	DDRC &= ~(1 << PC2);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
 23c:	91 f7       	brne	.-28     	; 0x222 <readInput1+0xc>
		_delay_us(1);
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
 23e:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
 240:	08 95       	ret

00000242 <readInput2>:

volatile uint8_t readInput2(void){
	uint8_t reader = 0;

	/* Set PIND3 (PD3) as input */
	DDRD &= ~(1 << PD3);
 242:	53 98       	cbi	0x0a, 3	; 10

	/* Raise LD pin */
	PORTC |= (1 << PC1);
 244:	41 9a       	sbi	0x08, 1	; 8
 246:	28 e0       	ldi	r18, 0x08	; 8
 248:	30 e0       	ldi	r19, 0x00	; 0

	return reader;
}

volatile uint8_t readInput2(void){
	uint8_t reader = 0;
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PIND & (1 << PD3)) ? 1 : 0);
 24e:	99 b1       	in	r25, 0x09	; 9
 250:	93 fb       	bst	r25, 3
 252:	99 27       	eor	r25, r25
 254:	90 f9       	bld	r25, 0
 256:	88 0f       	add	r24, r24
 258:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
 25a:	40 98       	cbi	0x08, 0	; 8
 25c:	94 2f       	mov	r25, r20
 25e:	9a 95       	dec	r25
 260:	f1 f7       	brne	.-4      	; 0x25e <readInput2+0x1c>
		_delay_us(1);
		PORTC |= (1 << PC0);
 262:	40 9a       	sbi	0x08, 0	; 8
 264:	21 50       	subi	r18, 0x01	; 1
 266:	31 09       	sbc	r19, r1
	DDRD &= ~(1 << PD3);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
 268:	91 f7       	brne	.-28     	; 0x24e <readInput2+0xc>
		_delay_us(1);
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
 26a:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
 26c:	08 95       	ret

0000026e <readInput3>:

volatile uint8_t readInput3(void){
	uint8_t reader = 0;

	/* Set PIND2 (PD2) as input */
	DDRD &= ~(1 << PD2);
 26e:	52 98       	cbi	0x0a, 2	; 10

	/* Raise LD pin */
	PORTC |= (1 << PC1);
 270:	41 9a       	sbi	0x08, 1	; 8
 272:	28 e0       	ldi	r18, 0x08	; 8
 274:	30 e0       	ldi	r19, 0x00	; 0

	return reader;
}

volatile uint8_t readInput3(void){
	uint8_t reader = 0;
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PIND & (1 << PD2)) ? 1 : 0);
 27a:	99 b1       	in	r25, 0x09	; 9
 27c:	92 fb       	bst	r25, 2
 27e:	99 27       	eor	r25, r25
 280:	90 f9       	bld	r25, 0
 282:	88 0f       	add	r24, r24
 284:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
 286:	40 98       	cbi	0x08, 0	; 8
 288:	94 2f       	mov	r25, r20
 28a:	9a 95       	dec	r25
 28c:	f1 f7       	brne	.-4      	; 0x28a <readInput3+0x1c>
		_delay_us(1); // You can use delay functions for a more accurate timing
		PORTC |= (1 << PC0);
 28e:	40 9a       	sbi	0x08, 0	; 8
 290:	21 50       	subi	r18, 0x01	; 1
 292:	31 09       	sbc	r19, r1
	DDRD &= ~(1 << PD2);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
 294:	91 f7       	brne	.-28     	; 0x27a <readInput3+0xc>
		_delay_us(1); // You can use delay functions for a more accurate timing
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
 296:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
 298:	08 95       	ret

0000029a <Play_Sound_new>:
#include <math.h>

#define PI 3.14159265

void Play_Sound_new(float frequency)
{
 29a:	cf 92       	push	r12
 29c:	df 92       	push	r13
 29e:	ef 92       	push	r14
 2a0:	ff 92       	push	r15
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
	float duration = 0.0005; // Duration in seconds
	int sampleRate = 30000; // Sample rate in Hz
	int numSamples = duration * sampleRate;
	float wavelength = 1.0 / frequency;

	BUZZER_DDR |= (1 << BUZZER_PIN);
 2a8:	23 9a       	sbi	0x04, 3	; 4

	for (int i = 0; i < numSamples; i++)
	{
		float t = (float)i / sampleRate;
		float sinValue = sin(2 * PI * frequency * t);
 2aa:	2b ed       	ldi	r18, 0xDB	; 219
 2ac:	3f e0       	ldi	r19, 0x0F	; 15
 2ae:	49 ec       	ldi	r20, 0xC9	; 201
 2b0:	50 e4       	ldi	r21, 0x40	; 64
 2b2:	0e 94 a4 06 	call	0xd48	; 0xd48 <__mulsf3>
 2b6:	6b 01       	movw	r12, r22
 2b8:	7c 01       	movw	r14, r24
	int numSamples = duration * sampleRate;
	float wavelength = 1.0 / frequency;

	BUZZER_DDR |= (1 << BUZZER_PIN);

	for (int i = 0; i < numSamples; i++)
 2ba:	c0 e0       	ldi	r28, 0x00	; 0
 2bc:	d0 e0       	ldi	r29, 0x00	; 0
 2be:	11 eb       	ldi	r17, 0xB1	; 177
	{
		float t = (float)i / sampleRate;
		float sinValue = sin(2 * PI * frequency * t);
 2c0:	be 01       	movw	r22, r28
 2c2:	0d 2e       	mov	r0, r29
 2c4:	00 0c       	add	r0, r0
 2c6:	88 0b       	sbc	r24, r24
 2c8:	99 0b       	sbc	r25, r25
 2ca:	0e 94 ef 05 	call	0xbde	; 0xbde <__floatsisf>
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e6       	ldi	r19, 0x60	; 96
 2d2:	4a ee       	ldi	r20, 0xEA	; 234
 2d4:	56 e4       	ldi	r21, 0x46	; 70
 2d6:	0e 94 45 05 	call	0xa8a	; 0xa8a <__divsf3>
 2da:	a7 01       	movw	r20, r14
 2dc:	96 01       	movw	r18, r12
 2de:	0e 94 a4 06 	call	0xd48	; 0xd48 <__mulsf3>
 2e2:	0e 94 11 07 	call	0xe22	; 0xe22 <sin>

		// Convert the sine value to a suitable output range for the buzzer
		int outputValue = (int)((sinValue + 1.0) * 127.0);

		// Output the value to the buzzer
		BUZZER_PORT = outputValue;
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	40 e8       	ldi	r20, 0x80	; 128
 2ec:	5f e3       	ldi	r21, 0x3F	; 63
 2ee:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	4e ef       	ldi	r20, 0xFE	; 254
 2f8:	52 e4       	ldi	r21, 0x42	; 66
 2fa:	0e 94 a4 06 	call	0xd48	; 0xd48 <__mulsf3>
 2fe:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fixsfsi>
 302:	65 b9       	out	0x05, r22	; 5
 304:	81 2f       	mov	r24, r17
 306:	8a 95       	dec	r24
 308:	f1 f7       	brne	.-4      	; 0x306 <Play_Sound_new+0x6c>
	int numSamples = duration * sampleRate;
	float wavelength = 1.0 / frequency;

	BUZZER_DDR |= (1 << BUZZER_PIN);

	for (int i = 0; i < numSamples; i++)
 30a:	21 96       	adiw	r28, 0x01	; 1
 30c:	cf 30       	cpi	r28, 0x0F	; 15
 30e:	d1 05       	cpc	r29, r1
 310:	b9 f6       	brne	.-82     	; 0x2c0 <Play_Sound_new+0x26>
		// Delay to maintain the sample rate
		_delay_us(1000000.0 / sampleRate);
	}

	// Stop sound
	BUZZER_PORT &= ~(1 << BUZZER_PIN);
 312:	2b 98       	cbi	0x05, 3	; 5
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	ff 90       	pop	r15
 31c:	ef 90       	pop	r14
 31e:	df 90       	pop	r13
 320:	cf 90       	pop	r12
 322:	08 95       	ret

00000324 <Play_Sound>:




void Play_Sound(float frequency)
{
 324:	2f 92       	push	r2
 326:	3f 92       	push	r3
 328:	4f 92       	push	r4
 32a:	5f 92       	push	r5
 32c:	6f 92       	push	r6
 32e:	7f 92       	push	r7
 330:	8f 92       	push	r8
 332:	9f 92       	push	r9
 334:	af 92       	push	r10
 336:	bf 92       	push	r11
 338:	cf 92       	push	r12
 33a:	df 92       	push	r13
 33c:	ef 92       	push	r14
 33e:	ff 92       	push	r15
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	1f 92       	push	r1
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	4b 01       	movw	r8, r22
 350:	5c 01       	movw	r10, r24
	long int i,cycles;
	float wavelength = 1.25;
	
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);
 352:	23 9a       	sbi	0x04, 3	; 4

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	4a e7       	ldi	r20, 0x7A	; 122
 35a:	55 e4       	ldi	r21, 0x45	; 69
 35c:	0e 94 a4 06 	call	0xd48	; 0xd48 <__mulsf3>
 360:	6b 01       	movw	r12, r22
 362:	7c 01       	movw	r14, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 364:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fixunssfsi>
 368:	2b 01       	movw	r4, r22
 36a:	3c 01       	movw	r6, r24
 36c:	69 83       	std	Y+1, r22	; 0x01
 36e:	35 2c       	mov	r3, r5
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e8       	ldi	r20, 0x80	; 128
 376:	5f e3       	ldi	r21, 0x3F	; 63
 378:	c7 01       	movw	r24, r14
 37a:	b6 01       	movw	r22, r12
 37c:	0e 94 40 05 	call	0xa80	; 0xa80 <__cmpsf2>
 380:	88 23       	and	r24, r24
 382:	1c f4       	brge	.+6      	; 0x38a <Play_Sound+0x66>
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <Play_Sound+0x6a>
 38a:	94 2d       	mov	r25, r4
 38c:	85 2d       	mov	r24, r5
 38e:	69 2e       	mov	r6, r25
 390:	78 2e       	mov	r7, r24
 392:	00 e0       	ldi	r16, 0x00	; 0
 394:	10 e0       	ldi	r17, 0x00	; 0

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 396:	55 24       	eor	r5, r5
 398:	53 94       	inc	r5
 39a:	21 2c       	mov	r2, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 39c:	49 80       	ldd	r4, Y+1	; 0x01
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 39e:	20 e0       	ldi	r18, 0x00	; 0
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	40 e8       	ldi	r20, 0x80	; 128
 3a4:	5f e3       	ldi	r21, 0x3F	; 63
 3a6:	c7 01       	movw	r24, r14
 3a8:	b6 01       	movw	r22, r12
 3aa:	0e 94 40 05 	call	0xa80	; 0xa80 <__cmpsf2>
 3ae:	88 23       	and	r24, r24
 3b0:	04 f1       	brlt	.+64     	; 0x3f2 <Play_Sound+0xce>
		__ticks = 1;
	else if (__tmp > 65535)
 3b2:	20 e0       	ldi	r18, 0x00	; 0
 3b4:	3f ef       	ldi	r19, 0xFF	; 255
 3b6:	4f e7       	ldi	r20, 0x7F	; 127
 3b8:	57 e4       	ldi	r21, 0x47	; 71
 3ba:	c7 01       	movw	r24, r14
 3bc:	b6 01       	movw	r22, r12
 3be:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__gesf2>
 3c2:	18 16       	cp	r1, r24
 3c4:	b4 f4       	brge	.+44     	; 0x3f2 <Play_Sound+0xce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	40 e2       	ldi	r20, 0x20	; 32
 3cc:	51 e4       	ldi	r21, 0x41	; 65
 3ce:	c5 01       	movw	r24, r10
 3d0:	b4 01       	movw	r22, r8
 3d2:	0e 94 a4 06 	call	0xd48	; 0xd48 <__mulsf3>
 3d6:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fixunssfsi>
		while(__ticks)
 3da:	61 15       	cp	r22, r1
 3dc:	71 05       	cpc	r23, r1
 3de:	09 f4       	brne	.+2      	; 0x3e2 <Play_Sound+0xbe>
 3e0:	61 c0       	rjmp	.+194    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3e2:	80 e9       	ldi	r24, 0x90	; 144
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <Play_Sound+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ea:	61 50       	subi	r22, 0x01	; 1
 3ec:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3ee:	c9 f7       	brne	.-14     	; 0x3e2 <Play_Sound+0xbe>
 3f0:	4d c0       	rjmp	.+154    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 3f2:	c3 01       	movw	r24, r6
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <Play_Sound+0xd0>

	for (i=0;i<cycles;i++)
	{
		_delay_ms(frequency);
		BUZZER_PORT |= (1 << BUZZER_PIN);
 3f8:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	40 e8       	ldi	r20, 0x80	; 128
 400:	5f e3       	ldi	r21, 0x3F	; 63
 402:	c7 01       	movw	r24, r14
 404:	b6 01       	movw	r22, r12
 406:	0e 94 40 05 	call	0xa80	; 0xa80 <__cmpsf2>
 40a:	88 23       	and	r24, r24
 40c:	fc f0       	brlt	.+62     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		__ticks = 1;
	else if (__tmp > 65535)
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	3f ef       	ldi	r19, 0xFF	; 255
 412:	4f e7       	ldi	r20, 0x7F	; 127
 414:	57 e4       	ldi	r21, 0x47	; 71
 416:	c7 01       	movw	r24, r14
 418:	b6 01       	movw	r22, r12
 41a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__gesf2>
 41e:	18 16       	cp	r1, r24
 420:	c4 f4       	brge	.+48     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	40 e2       	ldi	r20, 0x20	; 32
 428:	51 e4       	ldi	r21, 0x41	; 65
 42a:	c5 01       	movw	r24, r10
 42c:	b4 01       	movw	r22, r8
 42e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__mulsf3>
 432:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fixunssfsi>
		while(__ticks)
 436:	61 15       	cp	r22, r1
 438:	71 05       	cpc	r23, r1
 43a:	a9 f0       	breq	.+42     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 43c:	80 e9       	ldi	r24, 0x90	; 144
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 444:	61 50       	subi	r22, 0x01	; 1
 446:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 448:	c9 f7       	brne	.-14     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 44a:	0d c0       	rjmp	.+26     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 44c:	85 2d       	mov	r24, r5
 44e:	92 2d       	mov	r25, r2
 450:	08 c0       	rjmp	.+16     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 452:	84 2d       	mov	r24, r4
 454:	93 2d       	mov	r25, r3
 456:	05 c0       	rjmp	.+10     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 458:	85 2d       	mov	r24, r5
 45a:	92 2d       	mov	r25, r2
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 45e:	85 2d       	mov	r24, r5
 460:	92 2d       	mov	r25, r2
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		_delay_ms(frequency);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
 466:	2b 98       	cbi	0x05, 3	; 5
 468:	0f 5f       	subi	r16, 0xFF	; 255
 46a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);

	for (i=0;i<cycles;i++)
 46c:	04 30       	cpi	r16, 0x04	; 4
 46e:	11 05       	cpc	r17, r1
 470:	09 f0       	breq	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 472:	95 cf       	rjmp	.-214    	; 0x39e <Play_Sound+0x7a>
 474:	23 c0       	rjmp	.+70     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	40 e2       	ldi	r20, 0x20	; 32
 47c:	51 e4       	ldi	r21, 0x41	; 65
 47e:	c5 01       	movw	r24, r10
 480:	b4 01       	movw	r22, r8
 482:	0e 94 a4 06 	call	0xd48	; 0xd48 <__mulsf3>
 486:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fixunssfsi>
 48a:	d8 cf       	rjmp	.-80     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	{
		_delay_ms(frequency);
		BUZZER_PORT |= (1 << BUZZER_PIN);
 48c:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 48e:	20 e0       	ldi	r18, 0x00	; 0
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	40 e8       	ldi	r20, 0x80	; 128
 494:	5f e3       	ldi	r21, 0x3F	; 63
 496:	c7 01       	movw	r24, r14
 498:	b6 01       	movw	r22, r12
 49a:	0e 94 40 05 	call	0xa80	; 0xa80 <__cmpsf2>
 49e:	88 23       	and	r24, r24
 4a0:	54 f7       	brge	.-44     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 4a2:	da cf       	rjmp	.-76     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 4a4:	2b 9a       	sbi	0x05, 3	; 5
 4a6:	20 e0       	ldi	r18, 0x00	; 0
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	40 e8       	ldi	r20, 0x80	; 128
 4ac:	5f e3       	ldi	r21, 0x3F	; 63
 4ae:	c7 01       	movw	r24, r14
 4b0:	b6 01       	movw	r22, r12
 4b2:	0e 94 40 05 	call	0xa80	; 0xa80 <__cmpsf2>
 4b6:	88 23       	and	r24, r24
 4b8:	b4 f6       	brge	.-84     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 4ba:	d1 cf       	rjmp	.-94     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		_delay_ms(frequency);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
	}
}
 4bc:	0f 90       	pop	r0
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	0f 91       	pop	r16
 4c6:	ff 90       	pop	r15
 4c8:	ef 90       	pop	r14
 4ca:	df 90       	pop	r13
 4cc:	cf 90       	pop	r12
 4ce:	bf 90       	pop	r11
 4d0:	af 90       	pop	r10
 4d2:	9f 90       	pop	r9
 4d4:	8f 90       	pop	r8
 4d6:	7f 90       	pop	r7
 4d8:	6f 90       	pop	r6
 4da:	5f 90       	pop	r5
 4dc:	4f 90       	pop	r4
 4de:	3f 90       	pop	r3
 4e0:	2f 90       	pop	r2
 4e2:	08 95       	ret

000004e4 <stop_sound>:


void stop_sound(void)
{
	// Stop sound
	BUZZER_PORT &= ~(1 << BUZZER_PIN);
 4e4:	2b 98       	cbi	0x05, 3	; 5
 4e6:	08 95       	ret

000004e8 <main>:
	PORTC &= ~(1 << PC1);

	return reader;
}
int main(void)
{
 4e8:	c0 e9       	ldi	r28, 0x90	; 144
 4ea:	d1 e0       	ldi	r29, 0x01	; 1
	
	
for (double scale = 1.0; scale <= 3; scale += 0.005) {
	Play_Sound_new(F3);
 4ec:	6a e6       	ldi	r22, 0x6A	; 106
 4ee:	7d e4       	ldi	r23, 0x4D	; 77
 4f0:	87 e3       	ldi	r24, 0x37	; 55
 4f2:	90 e4       	ldi	r25, 0x40	; 64
 4f4:	0e 94 4d 01 	call	0x29a	; 0x29a <Play_Sound_new>
 4f8:	21 97       	sbiw	r28, 0x01	; 1
}
int main(void)
{
	
	
for (double scale = 1.0; scale <= 3; scale += 0.005) {
 4fa:	c1 f7       	brne	.-16     	; 0x4ec <main+0x4>
 4fc:	c0 e9       	ldi	r28, 0x90	; 144
 4fe:	d1 e0       	ldi	r29, 0x01	; 1
	Play_Sound_new(F3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
Play_Sound_new(F3);
 500:	6a e6       	ldi	r22, 0x6A	; 106
 502:	7d e4       	ldi	r23, 0x4D	; 77
 504:	87 e3       	ldi	r24, 0x37	; 55
 506:	90 e4       	ldi	r25, 0x40	; 64
 508:	0e 94 4d 01 	call	0x29a	; 0x29a <Play_Sound_new>
 50c:	21 97       	sbiw	r28, 0x01	; 1
{
	
	
for (double scale = 1.0; scale <= 3; scale += 0.005) {
	Play_Sound_new(F3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
 50e:	c1 f7       	brne	.-16     	; 0x500 <main+0x18>
 510:	c0 e9       	ldi	r28, 0x90	; 144
 512:	d1 e0       	ldi	r29, 0x01	; 1
Play_Sound_new(F3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
Play_Sound_new(Gb3);
 514:	69 e0       	ldi	r22, 0x09	; 9
 516:	79 ef       	ldi	r23, 0xF9	; 249
 518:	8c e2       	ldi	r24, 0x2C	; 44
 51a:	90 e4       	ldi	r25, 0x40	; 64
 51c:	0e 94 4d 01 	call	0x29a	; 0x29a <Play_Sound_new>
 520:	21 97       	sbiw	r28, 0x01	; 1
	
for (double scale = 1.0; scale <= 3; scale += 0.005) {
	Play_Sound_new(F3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
Play_Sound_new(F3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
 522:	c1 f7       	brne	.-16     	; 0x514 <main+0x2c>
 524:	c0 e9       	ldi	r28, 0x90	; 144
 526:	d1 e0       	ldi	r29, 0x01	; 1
Play_Sound_new(Gb3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
Play_Sound_new(G3);
 528:	66 e9       	ldi	r22, 0x96	; 150
 52a:	73 e4       	ldi	r23, 0x43	; 67
 52c:	83 e2       	ldi	r24, 0x23	; 35
 52e:	90 e4       	ldi	r25, 0x40	; 64
 530:	0e 94 4d 01 	call	0x29a	; 0x29a <Play_Sound_new>
 534:	21 97       	sbiw	r28, 0x01	; 1
	Play_Sound_new(F3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
Play_Sound_new(F3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
Play_Sound_new(Gb3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
 536:	c1 f7       	brne	.-16     	; 0x528 <main+0x40>
 538:	c0 e9       	ldi	r28, 0x90	; 144
 53a:	d1 e0       	ldi	r29, 0x01	; 1
Play_Sound_new(G3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
Play_Sound_new(Ab3);
 53c:	64 e2       	ldi	r22, 0x24	; 36
 53e:	78 e2       	ldi	r23, 0x28	; 40
 540:	8a e1       	ldi	r24, 0x1A	; 26
 542:	90 e4       	ldi	r25, 0x40	; 64
 544:	0e 94 4d 01 	call	0x29a	; 0x29a <Play_Sound_new>
 548:	21 97       	sbiw	r28, 0x01	; 1
Play_Sound_new(F3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
Play_Sound_new(Gb3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
Play_Sound_new(G3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
 54a:	c1 f7       	brne	.-16     	; 0x53c <main+0x54>
 54c:	c0 e9       	ldi	r28, 0x90	; 144
 54e:	d1 e0       	ldi	r29, 0x01	; 1
Play_Sound_new(Ab3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
Play_Sound_new(A3);
 550:	6b ee       	ldi	r22, 0xEB	; 235
 552:	73 e7       	ldi	r23, 0x73	; 115
 554:	81 e1       	ldi	r24, 0x11	; 17
 556:	90 e4       	ldi	r25, 0x40	; 64
 558:	0e 94 4d 01 	call	0x29a	; 0x29a <Play_Sound_new>
 55c:	21 97       	sbiw	r28, 0x01	; 1
Play_Sound_new(Gb3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
Play_Sound_new(G3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
Play_Sound_new(Ab3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
 55e:	c1 f7       	brne	.-16     	; 0x550 <main+0x68>
 560:	c0 e9       	ldi	r28, 0x90	; 144
 562:	d1 e0       	ldi	r29, 0x01	; 1
Play_Sound_new(A3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
Play_Sound_new(Bb3);
 564:	6b e1       	ldi	r22, 0x1B	; 27
 566:	7f e2       	ldi	r23, 0x2F	; 47
 568:	89 e0       	ldi	r24, 0x09	; 9
 56a:	90 e4       	ldi	r25, 0x40	; 64
 56c:	0e 94 4d 01 	call	0x29a	; 0x29a <Play_Sound_new>
 570:	21 97       	sbiw	r28, 0x01	; 1
Play_Sound_new(G3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
Play_Sound_new(Ab3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
Play_Sound_new(A3);
}for (double scale = 1.0; scale <= 3; scale += 0.005) {
 572:	c1 f7       	brne	.-16     	; 0x564 <main+0x7c>
}




	lcd_init();
 574:	0e 94 98 00 	call	0x130	; 0x130 <lcd_init>
	lcd_clear();
 578:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_clear>
 57c:	84 ef       	ldi	r24, 0xF4	; 244
 57e:	91 e0       	ldi	r25, 0x01	; 1
 580:	20 e9       	ldi	r18, 0x90	; 144
 582:	31 e0       	ldi	r19, 0x01	; 1
 584:	f9 01       	movw	r30, r18
 586:	31 97       	sbiw	r30, 0x01	; 1
 588:	f1 f7       	brne	.-4      	; 0x586 <main+0x9e>
 58a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 58c:	d9 f7       	brne	.-10     	; 0x584 <main+0x9c>
	_delay_ms (50);
	lcd_goto_xy(0, 0);
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_goto_xy>
	lcd_write_word("Toy Piano Music!");
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_write_word>
	
	/* Initialize PORTC and set PC0, PC1, PC2 as output */
	DDRC |= 0b11111111;
 59e:	87 b1       	in	r24, 0x07	; 7
 5a0:	8f ef       	ldi	r24, 0xFF	; 255
 5a2:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b11111111;
 5a4:	9a b1       	in	r25, 0x0a	; 10
 5a6:	8a b9       	out	0x0a, r24	; 10
 5a8:	91 2c       	mov	r9, r1
 5aa:	81 2c       	mov	r8, r1
 5ac:	71 2c       	mov	r7, r1
 5ae:	61 2c       	mov	r6, r1
	while (1){
		/* Read the input value */
		uint8_t switchNo = readInput1();
 5b0:	0e 94 0b 01 	call	0x216	; 0x216 <readInput1>
 5b4:	c8 2e       	mov	r12, r24
		uint8_t switchNo2 = readInput2();
 5b6:	0e 94 21 01 	call	0x242	; 0x242 <readInput2>
 5ba:	b8 2e       	mov	r11, r24
		uint8_t switchNo3 = readInput3();
 5bc:	0e 94 37 01 	call	0x26e	; 0x26e <readInput3>
 5c0:	a8 2e       	mov	r10, r24
		
		float freq = 0;
		
		if(PINB & 0B00000001){
 5c2:	18 99       	sbic	0x03, 0	; 3
 5c4:	03 c0       	rjmp	.+6      	; 0x5cc <main+0xe4>
 5c6:	c3 c1       	rjmp	.+902    	; 0x94e <__stack+0x4f>
 5c8:	21 96       	adiw	r28, 0x01	; 1
 5ca:	07 c0       	rjmp	.+14     	; 0x5da <main+0xf2>
 5cc:	c1 e0       	ldi	r28, 0x01	; 1
 5ce:	d0 e0       	ldi	r29, 0x00	; 0
 5d0:	e9 2c       	mov	r14, r9
 5d2:	f8 2c       	mov	r15, r8
 5d4:	07 2d       	mov	r16, r7
 5d6:	16 2d       	mov	r17, r6
			/* Iterate through each bit of switchNo */
			for (int i = 0; i < 8; i++) {
				/* Check if the i-th bit of switchNo is set */
				if (switchNo & (1 << i)) {
 5d8:	d1 2c       	mov	r13, r1
 5da:	fe 01       	movw	r30, r28
 5dc:	31 97       	sbiw	r30, 0x01	; 1
 5de:	c6 01       	movw	r24, r12
 5e0:	0e 2e       	mov	r0, r30
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <main+0x100>
 5e4:	95 95       	asr	r25
 5e6:	87 95       	ror	r24
 5e8:	0a 94       	dec	r0
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <main+0xfc>
 5ec:	80 ff       	sbrs	r24, 0
 5ee:	80 c0       	rjmp	.+256    	; 0x6f0 <main+0x208>
					/* Set frequency based on which button is pressed */
					switch (i) {
 5f0:	e8 30       	cpi	r30, 0x08	; 8
 5f2:	f1 05       	cpc	r31, r1
 5f4:	08 f0       	brcs	.+2      	; 0x5f8 <main+0x110>
 5f6:	7c c0       	rjmp	.+248    	; 0x6f0 <main+0x208>
 5f8:	ec 5c       	subi	r30, 0xCC	; 204
 5fa:	ff 4f       	sbci	r31, 0xFF	; 255
 5fc:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__tablejump2__>
						case 0:freq += F3;break;
 600:	2a e6       	ldi	r18, 0x6A	; 106
 602:	3d e4       	ldi	r19, 0x4D	; 77
 604:	47 e3       	ldi	r20, 0x37	; 55
 606:	50 e4       	ldi	r21, 0x40	; 64
 608:	6e 2d       	mov	r22, r14
 60a:	7f 2d       	mov	r23, r15
 60c:	80 2f       	mov	r24, r16
 60e:	91 2f       	mov	r25, r17
 610:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 614:	e6 2e       	mov	r14, r22
 616:	f7 2e       	mov	r15, r23
 618:	08 2f       	mov	r16, r24
 61a:	19 2f       	mov	r17, r25
 61c:	d5 cf       	rjmp	.-86     	; 0x5c8 <main+0xe0>
						case 1:freq += Gb3;break;
 61e:	29 e0       	ldi	r18, 0x09	; 9
 620:	39 ef       	ldi	r19, 0xF9	; 249
 622:	4c e2       	ldi	r20, 0x2C	; 44
 624:	50 e4       	ldi	r21, 0x40	; 64
 626:	6e 2d       	mov	r22, r14
 628:	7f 2d       	mov	r23, r15
 62a:	80 2f       	mov	r24, r16
 62c:	91 2f       	mov	r25, r17
 62e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 632:	e6 2e       	mov	r14, r22
 634:	f7 2e       	mov	r15, r23
 636:	08 2f       	mov	r16, r24
 638:	19 2f       	mov	r17, r25
 63a:	c6 cf       	rjmp	.-116    	; 0x5c8 <main+0xe0>
						case 2:freq += G3;break;
 63c:	26 e9       	ldi	r18, 0x96	; 150
 63e:	33 e4       	ldi	r19, 0x43	; 67
 640:	43 e2       	ldi	r20, 0x23	; 35
 642:	50 e4       	ldi	r21, 0x40	; 64
 644:	6e 2d       	mov	r22, r14
 646:	7f 2d       	mov	r23, r15
 648:	80 2f       	mov	r24, r16
 64a:	91 2f       	mov	r25, r17
 64c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 650:	e6 2e       	mov	r14, r22
 652:	f7 2e       	mov	r15, r23
 654:	08 2f       	mov	r16, r24
 656:	19 2f       	mov	r17, r25
 658:	b7 cf       	rjmp	.-146    	; 0x5c8 <main+0xe0>
						case 3:freq += Ab3;break;
 65a:	24 e2       	ldi	r18, 0x24	; 36
 65c:	38 e2       	ldi	r19, 0x28	; 40
 65e:	4a e1       	ldi	r20, 0x1A	; 26
 660:	50 e4       	ldi	r21, 0x40	; 64
 662:	6e 2d       	mov	r22, r14
 664:	7f 2d       	mov	r23, r15
 666:	80 2f       	mov	r24, r16
 668:	91 2f       	mov	r25, r17
 66a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 66e:	e6 2e       	mov	r14, r22
 670:	f7 2e       	mov	r15, r23
 672:	08 2f       	mov	r16, r24
 674:	19 2f       	mov	r17, r25
 676:	a8 cf       	rjmp	.-176    	; 0x5c8 <main+0xe0>
						case 4:freq += A3;break;
 678:	2b ee       	ldi	r18, 0xEB	; 235
 67a:	33 e7       	ldi	r19, 0x73	; 115
 67c:	41 e1       	ldi	r20, 0x11	; 17
 67e:	50 e4       	ldi	r21, 0x40	; 64
 680:	6e 2d       	mov	r22, r14
 682:	7f 2d       	mov	r23, r15
 684:	80 2f       	mov	r24, r16
 686:	91 2f       	mov	r25, r17
 688:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 68c:	e6 2e       	mov	r14, r22
 68e:	f7 2e       	mov	r15, r23
 690:	08 2f       	mov	r16, r24
 692:	19 2f       	mov	r17, r25
 694:	99 cf       	rjmp	.-206    	; 0x5c8 <main+0xe0>
						case 5:freq += Bb3;break;
 696:	2b e1       	ldi	r18, 0x1B	; 27
 698:	3f e2       	ldi	r19, 0x2F	; 47
 69a:	49 e0       	ldi	r20, 0x09	; 9
 69c:	50 e4       	ldi	r21, 0x40	; 64
 69e:	6e 2d       	mov	r22, r14
 6a0:	7f 2d       	mov	r23, r15
 6a2:	80 2f       	mov	r24, r16
 6a4:	91 2f       	mov	r25, r17
 6a6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 6aa:	e6 2e       	mov	r14, r22
 6ac:	f7 2e       	mov	r15, r23
 6ae:	08 2f       	mov	r16, r24
 6b0:	19 2f       	mov	r17, r25
 6b2:	8a cf       	rjmp	.-236    	; 0x5c8 <main+0xe0>
						case 6:freq += B3;break;
 6b4:	23 e5       	ldi	r18, 0x53	; 83
 6b6:	36 e9       	ldi	r19, 0x96	; 150
 6b8:	41 e0       	ldi	r20, 0x01	; 1
 6ba:	50 e4       	ldi	r21, 0x40	; 64
 6bc:	6e 2d       	mov	r22, r14
 6be:	7f 2d       	mov	r23, r15
 6c0:	80 2f       	mov	r24, r16
 6c2:	91 2f       	mov	r25, r17
 6c4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 6c8:	e6 2e       	mov	r14, r22
 6ca:	f7 2e       	mov	r15, r23
 6cc:	08 2f       	mov	r16, r24
 6ce:	19 2f       	mov	r17, r25
 6d0:	7b cf       	rjmp	.-266    	; 0x5c8 <main+0xe0>
						case 7:freq += C4;break;
 6d2:	2d e0       	ldi	r18, 0x0D	; 13
 6d4:	31 e7       	ldi	r19, 0x71	; 113
 6d6:	44 ef       	ldi	r20, 0xF4	; 244
 6d8:	5f e3       	ldi	r21, 0x3F	; 63
 6da:	6e 2d       	mov	r22, r14
 6dc:	7f 2d       	mov	r23, r15
 6de:	80 2f       	mov	r24, r16
 6e0:	91 2f       	mov	r25, r17
 6e2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 6e6:	e6 2e       	mov	r14, r22
 6e8:	f7 2e       	mov	r15, r23
 6ea:	08 2f       	mov	r16, r24
 6ec:	19 2f       	mov	r17, r25
 6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <main+0x210>
		
		float freq = 0;
		
		if(PINB & 0B00000001){
			/* Iterate through each bit of switchNo */
			for (int i = 0; i < 8; i++) {
 6f0:	c8 30       	cpi	r28, 0x08	; 8
 6f2:	d1 05       	cpc	r29, r1
 6f4:	0c f4       	brge	.+2      	; 0x6f8 <main+0x210>
 6f6:	68 cf       	rjmp	.-304    	; 0x5c8 <main+0xe0>
 6f8:	c1 e0       	ldi	r28, 0x01	; 1
 6fa:	d0 e0       	ldi	r29, 0x00	; 0
			
			
			
			for (int i = 0; i < 8; i++) {
				/* Check if the i-th bit of switchNo is set */
				if (switchNo2 & (1 << i)) {
 6fc:	cb 2c       	mov	r12, r11
 6fe:	d1 2c       	mov	r13, r1
 700:	01 c0       	rjmp	.+2      	; 0x704 <main+0x21c>
 702:	21 96       	adiw	r28, 0x01	; 1
 704:	fe 01       	movw	r30, r28
 706:	31 97       	sbiw	r30, 0x01	; 1
 708:	c6 01       	movw	r24, r12
 70a:	0e 2e       	mov	r0, r30
 70c:	02 c0       	rjmp	.+4      	; 0x712 <main+0x22a>
 70e:	95 95       	asr	r25
 710:	87 95       	ror	r24
 712:	0a 94       	dec	r0
 714:	e2 f7       	brpl	.-8      	; 0x70e <main+0x226>
 716:	80 ff       	sbrs	r24, 0
 718:	80 c0       	rjmp	.+256    	; 0x81a <main+0x332>
					/* Set frequency based on which button is pressed */
					switch (i) {
 71a:	e8 30       	cpi	r30, 0x08	; 8
 71c:	f1 05       	cpc	r31, r1
 71e:	08 f0       	brcs	.+2      	; 0x722 <main+0x23a>
 720:	7c c0       	rjmp	.+248    	; 0x81a <main+0x332>
 722:	e4 5c       	subi	r30, 0xC4	; 196
 724:	ff 4f       	sbci	r31, 0xFF	; 255
 726:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__tablejump2__>
						case 0:freq += Db4;break;
 72a:	2b ec       	ldi	r18, 0xCB	; 203
 72c:	30 e1       	ldi	r19, 0x10	; 16
 72e:	47 ee       	ldi	r20, 0xE7	; 231
 730:	5f e3       	ldi	r21, 0x3F	; 63
 732:	6e 2d       	mov	r22, r14
 734:	7f 2d       	mov	r23, r15
 736:	80 2f       	mov	r24, r16
 738:	91 2f       	mov	r25, r17
 73a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 73e:	e6 2e       	mov	r14, r22
 740:	f7 2e       	mov	r15, r23
 742:	08 2f       	mov	r16, r24
 744:	19 2f       	mov	r17, r25
 746:	dd cf       	rjmp	.-70     	; 0x702 <main+0x21a>
						case 1:freq += D4;break;
 748:	2e e3       	ldi	r18, 0x3E	; 62
 74a:	38 ee       	ldi	r19, 0xE8	; 232
 74c:	49 ed       	ldi	r20, 0xD9	; 217
 74e:	5f e3       	ldi	r21, 0x3F	; 63
 750:	6e 2d       	mov	r22, r14
 752:	7f 2d       	mov	r23, r15
 754:	80 2f       	mov	r24, r16
 756:	91 2f       	mov	r25, r17
 758:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 75c:	e6 2e       	mov	r14, r22
 75e:	f7 2e       	mov	r15, r23
 760:	08 2f       	mov	r16, r24
 762:	19 2f       	mov	r17, r25
 764:	ce cf       	rjmp	.-100    	; 0x702 <main+0x21a>
						case 2:freq += Eb4;break;
 766:	2b ea       	ldi	r18, 0xAB	; 171
 768:	3f ec       	ldi	r19, 0xCF	; 207
 76a:	4d ec       	ldi	r20, 0xCD	; 205
 76c:	5f e3       	ldi	r21, 0x3F	; 63
 76e:	6e 2d       	mov	r22, r14
 770:	7f 2d       	mov	r23, r15
 772:	80 2f       	mov	r24, r16
 774:	91 2f       	mov	r25, r17
 776:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 77a:	e6 2e       	mov	r14, r22
 77c:	f7 2e       	mov	r15, r23
 77e:	08 2f       	mov	r16, r24
 780:	19 2f       	mov	r17, r25
 782:	bf cf       	rjmp	.-130    	; 0x702 <main+0x21a>
						case 3:freq += E4;break;
 784:	2a e1       	ldi	r18, 0x1A	; 26
 786:	31 e5       	ldi	r19, 0x51	; 81
 788:	42 ec       	ldi	r20, 0xC2	; 194
 78a:	5f e3       	ldi	r21, 0x3F	; 63
 78c:	6e 2d       	mov	r22, r14
 78e:	7f 2d       	mov	r23, r15
 790:	80 2f       	mov	r24, r16
 792:	91 2f       	mov	r25, r17
 794:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 798:	e6 2e       	mov	r14, r22
 79a:	f7 2e       	mov	r15, r23
 79c:	08 2f       	mov	r16, r24
 79e:	19 2f       	mov	r17, r25
 7a0:	b0 cf       	rjmp	.-160    	; 0x702 <main+0x21a>
						case 4:freq += F4;break;
 7a2:	2b e9       	ldi	r18, 0x9B	; 155
 7a4:	35 e5       	ldi	r19, 0x55	; 85
 7a6:	47 eb       	ldi	r20, 0xB7	; 183
 7a8:	5f e3       	ldi	r21, 0x3F	; 63
 7aa:	6e 2d       	mov	r22, r14
 7ac:	7f 2d       	mov	r23, r15
 7ae:	80 2f       	mov	r24, r16
 7b0:	91 2f       	mov	r25, r17
 7b2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 7b6:	e6 2e       	mov	r14, r22
 7b8:	f7 2e       	mov	r15, r23
 7ba:	08 2f       	mov	r16, r24
 7bc:	19 2f       	mov	r17, r25
 7be:	a1 cf       	rjmp	.-190    	; 0x702 <main+0x21a>
						case 5:freq += Gb4;break;
 7c0:	2d ea       	ldi	r18, 0xAD	; 173
 7c2:	3a ef       	ldi	r19, 0xFA	; 250
 7c4:	4c ea       	ldi	r20, 0xAC	; 172
 7c6:	5f e3       	ldi	r21, 0x3F	; 63
 7c8:	6e 2d       	mov	r22, r14
 7ca:	7f 2d       	mov	r23, r15
 7cc:	80 2f       	mov	r24, r16
 7ce:	91 2f       	mov	r25, r17
 7d0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 7d4:	e6 2e       	mov	r14, r22
 7d6:	f7 2e       	mov	r15, r23
 7d8:	08 2f       	mov	r16, r24
 7da:	19 2f       	mov	r17, r25
 7dc:	92 cf       	rjmp	.-220    	; 0x702 <main+0x21a>
						case 6:freq += G4;break;
 7de:	26 e9       	ldi	r18, 0x96	; 150
 7e0:	33 e4       	ldi	r19, 0x43	; 67
 7e2:	43 ea       	ldi	r20, 0xA3	; 163
 7e4:	5f e3       	ldi	r21, 0x3F	; 63
 7e6:	6e 2d       	mov	r22, r14
 7e8:	7f 2d       	mov	r23, r15
 7ea:	80 2f       	mov	r24, r16
 7ec:	91 2f       	mov	r25, r17
 7ee:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 7f2:	e6 2e       	mov	r14, r22
 7f4:	f7 2e       	mov	r15, r23
 7f6:	08 2f       	mov	r16, r24
 7f8:	19 2f       	mov	r17, r25
 7fa:	83 cf       	rjmp	.-250    	; 0x702 <main+0x21a>
						case 7:freq += Ab4;break;
 7fc:	21 e9       	ldi	r18, 0x91	; 145
 7fe:	3f e0       	ldi	r19, 0x0F	; 15
 800:	4a e9       	ldi	r20, 0x9A	; 154
 802:	5f e3       	ldi	r21, 0x3F	; 63
 804:	6e 2d       	mov	r22, r14
 806:	7f 2d       	mov	r23, r15
 808:	80 2f       	mov	r24, r16
 80a:	91 2f       	mov	r25, r17
 80c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 810:	e6 2e       	mov	r14, r22
 812:	f7 2e       	mov	r15, r23
 814:	08 2f       	mov	r16, r24
 816:	19 2f       	mov	r17, r25
 818:	04 c0       	rjmp	.+8      	; 0x822 <main+0x33a>
				}
			}
			
			
			
			for (int i = 0; i < 8; i++) {
 81a:	c8 30       	cpi	r28, 0x08	; 8
 81c:	d1 05       	cpc	r29, r1
 81e:	0c f4       	brge	.+2      	; 0x822 <main+0x33a>
 820:	70 cf       	rjmp	.-288    	; 0x702 <main+0x21a>
 822:	c1 e0       	ldi	r28, 0x01	; 1
 824:	d0 e0       	ldi	r29, 0x00	; 0
			}
			
			
			for (int i = 0; i < 8; i++) {
				/* Check if the i-th bit of switchNo is set */
				if (switchNo3 & (1 << i)) {
 826:	ca 2c       	mov	r12, r10
 828:	d1 2c       	mov	r13, r1
 82a:	01 c0       	rjmp	.+2      	; 0x82e <main+0x346>
 82c:	21 96       	adiw	r28, 0x01	; 1
 82e:	fe 01       	movw	r30, r28
 830:	31 97       	sbiw	r30, 0x01	; 1
 832:	c6 01       	movw	r24, r12
 834:	0e 2e       	mov	r0, r30
 836:	02 c0       	rjmp	.+4      	; 0x83c <main+0x354>
 838:	95 95       	asr	r25
 83a:	87 95       	ror	r24
 83c:	0a 94       	dec	r0
 83e:	e2 f7       	brpl	.-8      	; 0x838 <main+0x350>
 840:	80 ff       	sbrs	r24, 0
 842:	80 c0       	rjmp	.+256    	; 0x944 <__stack+0x45>
					/* Set frequency based on which button is pressed */
					switch (i) {
 844:	e8 30       	cpi	r30, 0x08	; 8
 846:	f1 05       	cpc	r31, r1
 848:	08 f0       	brcs	.+2      	; 0x84c <main+0x364>
 84a:	7c c0       	rjmp	.+248    	; 0x944 <__stack+0x45>
 84c:	ec 5b       	subi	r30, 0xBC	; 188
 84e:	ff 4f       	sbci	r31, 0xFF	; 255
 850:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__tablejump2__>
						case 0:freq += A4;break;
 854:	2e e8       	ldi	r18, 0x8E	; 142
 856:	35 e7       	ldi	r19, 0x75	; 117
 858:	41 e9       	ldi	r20, 0x91	; 145
 85a:	5f e3       	ldi	r21, 0x3F	; 63
 85c:	6e 2d       	mov	r22, r14
 85e:	7f 2d       	mov	r23, r15
 860:	80 2f       	mov	r24, r16
 862:	91 2f       	mov	r25, r17
 864:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 868:	e6 2e       	mov	r14, r22
 86a:	f7 2e       	mov	r15, r23
 86c:	08 2f       	mov	r16, r24
 86e:	19 2f       	mov	r17, r25
 870:	dd cf       	rjmp	.-70     	; 0x82c <main+0x344>
						case 1:freq += Bb4;break;
 872:	27 e6       	ldi	r18, 0x67	; 103
 874:	34 e4       	ldi	r19, 0x44	; 68
 876:	49 e8       	ldi	r20, 0x89	; 137
 878:	5f e3       	ldi	r21, 0x3F	; 63
 87a:	6e 2d       	mov	r22, r14
 87c:	7f 2d       	mov	r23, r15
 87e:	80 2f       	mov	r24, r16
 880:	91 2f       	mov	r25, r17
 882:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 886:	e6 2e       	mov	r14, r22
 888:	f7 2e       	mov	r15, r23
 88a:	08 2f       	mov	r16, r24
 88c:	19 2f       	mov	r17, r25
 88e:	ce cf       	rjmp	.-100    	; 0x82c <main+0x344>
						case 2:freq += B4;break;
 890:	20 ee       	ldi	r18, 0xE0	; 224
 892:	3c e9       	ldi	r19, 0x9C	; 156
 894:	41 e8       	ldi	r20, 0x81	; 129
 896:	5f e3       	ldi	r21, 0x3F	; 63
 898:	6e 2d       	mov	r22, r14
 89a:	7f 2d       	mov	r23, r15
 89c:	80 2f       	mov	r24, r16
 89e:	91 2f       	mov	r25, r17
 8a0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 8a4:	e6 2e       	mov	r14, r22
 8a6:	f7 2e       	mov	r15, r23
 8a8:	08 2f       	mov	r16, r24
 8aa:	19 2f       	mov	r17, r25
 8ac:	bf cf       	rjmp	.-130    	; 0x82c <main+0x344>
						case 3:freq += C5;break;
 8ae:	27 ee       	ldi	r18, 0xE7	; 231
 8b0:	3d e1       	ldi	r19, 0x1D	; 29
 8b2:	47 e6       	ldi	r20, 0x67	; 103
 8b4:	5f e3       	ldi	r21, 0x3F	; 63
 8b6:	6e 2d       	mov	r22, r14
 8b8:	7f 2d       	mov	r23, r15
 8ba:	80 2f       	mov	r24, r16
 8bc:	91 2f       	mov	r25, r17
 8be:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 8c2:	e6 2e       	mov	r14, r22
 8c4:	f7 2e       	mov	r15, r23
 8c6:	08 2f       	mov	r16, r24
 8c8:	19 2f       	mov	r17, r25
 8ca:	b0 cf       	rjmp	.-160    	; 0x82c <main+0x344>
						case 4:freq += Db5;break;
 8cc:	2a e5       	ldi	r18, 0x5A	; 90
 8ce:	35 ef       	ldi	r19, 0xF5	; 245
 8d0:	49 e5       	ldi	r20, 0x59	; 89
 8d2:	5f e3       	ldi	r21, 0x3F	; 63
 8d4:	6e 2d       	mov	r22, r14
 8d6:	7f 2d       	mov	r23, r15
 8d8:	80 2f       	mov	r24, r16
 8da:	91 2f       	mov	r25, r17
 8dc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 8e0:	e6 2e       	mov	r14, r22
 8e2:	f7 2e       	mov	r15, r23
 8e4:	08 2f       	mov	r16, r24
 8e6:	19 2f       	mov	r17, r25
 8e8:	a1 cf       	rjmp	.-190    	; 0x82c <main+0x344>
						case 5:freq += D5;break;
 8ea:	28 e4       	ldi	r18, 0x48	; 72
 8ec:	3f eb       	ldi	r19, 0xBF	; 191
 8ee:	4d e4       	ldi	r20, 0x4D	; 77
 8f0:	5f e3       	ldi	r21, 0x3F	; 63
 8f2:	6e 2d       	mov	r22, r14
 8f4:	7f 2d       	mov	r23, r15
 8f6:	80 2f       	mov	r24, r16
 8f8:	91 2f       	mov	r25, r17
 8fa:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 8fe:	e6 2e       	mov	r14, r22
 900:	f7 2e       	mov	r15, r23
 902:	08 2f       	mov	r16, r24
 904:	19 2f       	mov	r17, r25
 906:	92 cf       	rjmp	.-220    	; 0x82c <main+0x344>
						case 6:freq += Eb5;break;
 908:	25 e4       	ldi	r18, 0x45	; 69
 90a:	37 e4       	ldi	r19, 0x47	; 71
 90c:	42 e4       	ldi	r20, 0x42	; 66
 90e:	5f e3       	ldi	r21, 0x3F	; 63
 910:	6e 2d       	mov	r22, r14
 912:	7f 2d       	mov	r23, r15
 914:	80 2f       	mov	r24, r16
 916:	91 2f       	mov	r25, r17
 918:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 91c:	e6 2e       	mov	r14, r22
 91e:	f7 2e       	mov	r15, r23
 920:	08 2f       	mov	r16, r24
 922:	19 2f       	mov	r17, r25
 924:	83 cf       	rjmp	.-250    	; 0x82c <main+0x344>
						case 7:freq += E5;break;
 926:	20 e7       	ldi	r18, 0x70	; 112
 928:	3f e5       	ldi	r19, 0x5F	; 95
 92a:	47 e3       	ldi	r20, 0x37	; 55
 92c:	5f e3       	ldi	r21, 0x3F	; 63
 92e:	6e 2d       	mov	r22, r14
 930:	7f 2d       	mov	r23, r15
 932:	80 2f       	mov	r24, r16
 934:	91 2f       	mov	r25, r17
 936:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__addsf3>
 93a:	e6 2e       	mov	r14, r22
 93c:	f7 2e       	mov	r15, r23
 93e:	08 2f       	mov	r16, r24
 940:	19 2f       	mov	r17, r25
 942:	1b c0       	rjmp	.+54     	; 0x97a <__stack+0x7b>
					}
				}
			}
			
			
			for (int i = 0; i < 8; i++) {
 944:	c8 30       	cpi	r28, 0x08	; 8
 946:	d1 05       	cpc	r29, r1
 948:	0c f4       	brge	.+2      	; 0x94c <__stack+0x4d>
 94a:	70 cf       	rjmp	.-288    	; 0x82c <main+0x344>
 94c:	16 c0       	rjmp	.+44     	; 0x97a <__stack+0x7b>
						default:
						break;
					}
				}
			}
			}else if(PINB & 0B00000010){
 94e:	19 9b       	sbis	0x03, 1	; 3
 950:	09 c0       	rjmp	.+18     	; 0x964 <__stack+0x65>
			lcd_goto_xy(1, 0);
 952:	60 e0       	ldi	r22, 0x00	; 0
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_goto_xy>
			lcd_write_word("Play Guitar.....");
 95a:	81 e1       	ldi	r24, 0x11	; 17
 95c:	91 e0       	ldi	r25, 0x01	; 1
 95e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_write_word>
 962:	1e c0       	rjmp	.+60     	; 0x9a0 <__stack+0xa1>
			}else if(PINB & 0B00000100){
 964:	1a 9b       	sbis	0x03, 2	; 3
 966:	1c c0       	rjmp	.+56     	; 0x9a0 <__stack+0xa1>
			lcd_goto_xy(1, 0);
 968:	60 e0       	ldi	r22, 0x00	; 0
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_goto_xy>
			lcd_write_word("Play Flute......");
 970:	82 e2       	ldi	r24, 0x22	; 34
 972:	91 e0       	ldi	r25, 0x01	; 1
 974:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_write_word>
 978:	13 c0       	rjmp	.+38     	; 0x9a0 <__stack+0xa1>
		}
		
		
		if (freq > 0) {
 97a:	29 2d       	mov	r18, r9
 97c:	38 2d       	mov	r19, r8
 97e:	47 2d       	mov	r20, r7
 980:	56 2d       	mov	r21, r6
 982:	6e 2d       	mov	r22, r14
 984:	7f 2d       	mov	r23, r15
 986:	80 2f       	mov	r24, r16
 988:	91 2f       	mov	r25, r17
 98a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__gesf2>
 98e:	18 16       	cp	r1, r24
 990:	3c f4       	brge	.+14     	; 0x9a0 <__stack+0xa1>
			Play_Sound(freq);
 992:	6e 2d       	mov	r22, r14
 994:	7f 2d       	mov	r23, r15
 996:	80 2f       	mov	r24, r16
 998:	91 2f       	mov	r25, r17
 99a:	0e 94 92 01 	call	0x324	; 0x324 <Play_Sound>
 99e:	08 ce       	rjmp	.-1008   	; 0x5b0 <main+0xc8>
			}else{
			stop_sound();
 9a0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <stop_sound>
 9a4:	05 ce       	rjmp	.-1014   	; 0x5b0 <main+0xc8>

000009a6 <__subsf3>:
 9a6:	50 58       	subi	r21, 0x80	; 128

000009a8 <__addsf3>:
 9a8:	bb 27       	eor	r27, r27
 9aa:	aa 27       	eor	r26, r26
 9ac:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__addsf3x>
 9b0:	0c 94 65 06 	jmp	0xcca	; 0xcca <__fp_round>
 9b4:	0e 94 57 06 	call	0xcae	; 0xcae <__fp_pscA>
 9b8:	38 f0       	brcs	.+14     	; 0x9c8 <__addsf3+0x20>
 9ba:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fp_pscB>
 9be:	20 f0       	brcs	.+8      	; 0x9c8 <__addsf3+0x20>
 9c0:	39 f4       	brne	.+14     	; 0x9d0 <__addsf3+0x28>
 9c2:	9f 3f       	cpi	r25, 0xFF	; 255
 9c4:	19 f4       	brne	.+6      	; 0x9cc <__addsf3+0x24>
 9c6:	26 f4       	brtc	.+8      	; 0x9d0 <__addsf3+0x28>
 9c8:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_nan>
 9cc:	0e f4       	brtc	.+2      	; 0x9d0 <__addsf3+0x28>
 9ce:	e0 95       	com	r30
 9d0:	e7 fb       	bst	r30, 7
 9d2:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__fp_inf>

000009d6 <__addsf3x>:
 9d6:	e9 2f       	mov	r30, r25
 9d8:	0e 94 76 06 	call	0xcec	; 0xcec <__fp_split3>
 9dc:	58 f3       	brcs	.-42     	; 0x9b4 <__addsf3+0xc>
 9de:	ba 17       	cp	r27, r26
 9e0:	62 07       	cpc	r22, r18
 9e2:	73 07       	cpc	r23, r19
 9e4:	84 07       	cpc	r24, r20
 9e6:	95 07       	cpc	r25, r21
 9e8:	20 f0       	brcs	.+8      	; 0x9f2 <__addsf3x+0x1c>
 9ea:	79 f4       	brne	.+30     	; 0xa0a <__addsf3x+0x34>
 9ec:	a6 f5       	brtc	.+104    	; 0xa56 <__addsf3x+0x80>
 9ee:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__fp_zero>
 9f2:	0e f4       	brtc	.+2      	; 0x9f6 <__addsf3x+0x20>
 9f4:	e0 95       	com	r30
 9f6:	0b 2e       	mov	r0, r27
 9f8:	ba 2f       	mov	r27, r26
 9fa:	a0 2d       	mov	r26, r0
 9fc:	0b 01       	movw	r0, r22
 9fe:	b9 01       	movw	r22, r18
 a00:	90 01       	movw	r18, r0
 a02:	0c 01       	movw	r0, r24
 a04:	ca 01       	movw	r24, r20
 a06:	a0 01       	movw	r20, r0
 a08:	11 24       	eor	r1, r1
 a0a:	ff 27       	eor	r31, r31
 a0c:	59 1b       	sub	r21, r25
 a0e:	99 f0       	breq	.+38     	; 0xa36 <__addsf3x+0x60>
 a10:	59 3f       	cpi	r21, 0xF9	; 249
 a12:	50 f4       	brcc	.+20     	; 0xa28 <__addsf3x+0x52>
 a14:	50 3e       	cpi	r21, 0xE0	; 224
 a16:	68 f1       	brcs	.+90     	; 0xa72 <__addsf3x+0x9c>
 a18:	1a 16       	cp	r1, r26
 a1a:	f0 40       	sbci	r31, 0x00	; 0
 a1c:	a2 2f       	mov	r26, r18
 a1e:	23 2f       	mov	r18, r19
 a20:	34 2f       	mov	r19, r20
 a22:	44 27       	eor	r20, r20
 a24:	58 5f       	subi	r21, 0xF8	; 248
 a26:	f3 cf       	rjmp	.-26     	; 0xa0e <__addsf3x+0x38>
 a28:	46 95       	lsr	r20
 a2a:	37 95       	ror	r19
 a2c:	27 95       	ror	r18
 a2e:	a7 95       	ror	r26
 a30:	f0 40       	sbci	r31, 0x00	; 0
 a32:	53 95       	inc	r21
 a34:	c9 f7       	brne	.-14     	; 0xa28 <__addsf3x+0x52>
 a36:	7e f4       	brtc	.+30     	; 0xa56 <__addsf3x+0x80>
 a38:	1f 16       	cp	r1, r31
 a3a:	ba 0b       	sbc	r27, r26
 a3c:	62 0b       	sbc	r22, r18
 a3e:	73 0b       	sbc	r23, r19
 a40:	84 0b       	sbc	r24, r20
 a42:	ba f0       	brmi	.+46     	; 0xa72 <__addsf3x+0x9c>
 a44:	91 50       	subi	r25, 0x01	; 1
 a46:	a1 f0       	breq	.+40     	; 0xa70 <__addsf3x+0x9a>
 a48:	ff 0f       	add	r31, r31
 a4a:	bb 1f       	adc	r27, r27
 a4c:	66 1f       	adc	r22, r22
 a4e:	77 1f       	adc	r23, r23
 a50:	88 1f       	adc	r24, r24
 a52:	c2 f7       	brpl	.-16     	; 0xa44 <__addsf3x+0x6e>
 a54:	0e c0       	rjmp	.+28     	; 0xa72 <__addsf3x+0x9c>
 a56:	ba 0f       	add	r27, r26
 a58:	62 1f       	adc	r22, r18
 a5a:	73 1f       	adc	r23, r19
 a5c:	84 1f       	adc	r24, r20
 a5e:	48 f4       	brcc	.+18     	; 0xa72 <__addsf3x+0x9c>
 a60:	87 95       	ror	r24
 a62:	77 95       	ror	r23
 a64:	67 95       	ror	r22
 a66:	b7 95       	ror	r27
 a68:	f7 95       	ror	r31
 a6a:	9e 3f       	cpi	r25, 0xFE	; 254
 a6c:	08 f0       	brcs	.+2      	; 0xa70 <__addsf3x+0x9a>
 a6e:	b0 cf       	rjmp	.-160    	; 0x9d0 <__addsf3+0x28>
 a70:	93 95       	inc	r25
 a72:	88 0f       	add	r24, r24
 a74:	08 f0       	brcs	.+2      	; 0xa78 <__addsf3x+0xa2>
 a76:	99 27       	eor	r25, r25
 a78:	ee 0f       	add	r30, r30
 a7a:	97 95       	ror	r25
 a7c:	87 95       	ror	r24
 a7e:	08 95       	ret

00000a80 <__cmpsf2>:
 a80:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fp_cmp>
 a84:	08 f4       	brcc	.+2      	; 0xa88 <__cmpsf2+0x8>
 a86:	81 e0       	ldi	r24, 0x01	; 1
 a88:	08 95       	ret

00000a8a <__divsf3>:
 a8a:	0e 94 59 05 	call	0xab2	; 0xab2 <__divsf3x>
 a8e:	0c 94 65 06 	jmp	0xcca	; 0xcca <__fp_round>
 a92:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fp_pscB>
 a96:	58 f0       	brcs	.+22     	; 0xaae <__divsf3+0x24>
 a98:	0e 94 57 06 	call	0xcae	; 0xcae <__fp_pscA>
 a9c:	40 f0       	brcs	.+16     	; 0xaae <__divsf3+0x24>
 a9e:	29 f4       	brne	.+10     	; 0xaaa <__divsf3+0x20>
 aa0:	5f 3f       	cpi	r21, 0xFF	; 255
 aa2:	29 f0       	breq	.+10     	; 0xaae <__divsf3+0x24>
 aa4:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__fp_inf>
 aa8:	51 11       	cpse	r21, r1
 aaa:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__fp_szero>
 aae:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_nan>

00000ab2 <__divsf3x>:
 ab2:	0e 94 76 06 	call	0xcec	; 0xcec <__fp_split3>
 ab6:	68 f3       	brcs	.-38     	; 0xa92 <__divsf3+0x8>

00000ab8 <__divsf3_pse>:
 ab8:	99 23       	and	r25, r25
 aba:	b1 f3       	breq	.-20     	; 0xaa8 <__divsf3+0x1e>
 abc:	55 23       	and	r21, r21
 abe:	91 f3       	breq	.-28     	; 0xaa4 <__divsf3+0x1a>
 ac0:	95 1b       	sub	r25, r21
 ac2:	55 0b       	sbc	r21, r21
 ac4:	bb 27       	eor	r27, r27
 ac6:	aa 27       	eor	r26, r26
 ac8:	62 17       	cp	r22, r18
 aca:	73 07       	cpc	r23, r19
 acc:	84 07       	cpc	r24, r20
 ace:	38 f0       	brcs	.+14     	; 0xade <__divsf3_pse+0x26>
 ad0:	9f 5f       	subi	r25, 0xFF	; 255
 ad2:	5f 4f       	sbci	r21, 0xFF	; 255
 ad4:	22 0f       	add	r18, r18
 ad6:	33 1f       	adc	r19, r19
 ad8:	44 1f       	adc	r20, r20
 ada:	aa 1f       	adc	r26, r26
 adc:	a9 f3       	breq	.-22     	; 0xac8 <__divsf3_pse+0x10>
 ade:	35 d0       	rcall	.+106    	; 0xb4a <__divsf3_pse+0x92>
 ae0:	0e 2e       	mov	r0, r30
 ae2:	3a f0       	brmi	.+14     	; 0xaf2 <__divsf3_pse+0x3a>
 ae4:	e0 e8       	ldi	r30, 0x80	; 128
 ae6:	32 d0       	rcall	.+100    	; 0xb4c <__divsf3_pse+0x94>
 ae8:	91 50       	subi	r25, 0x01	; 1
 aea:	50 40       	sbci	r21, 0x00	; 0
 aec:	e6 95       	lsr	r30
 aee:	00 1c       	adc	r0, r0
 af0:	ca f7       	brpl	.-14     	; 0xae4 <__divsf3_pse+0x2c>
 af2:	2b d0       	rcall	.+86     	; 0xb4a <__divsf3_pse+0x92>
 af4:	fe 2f       	mov	r31, r30
 af6:	29 d0       	rcall	.+82     	; 0xb4a <__divsf3_pse+0x92>
 af8:	66 0f       	add	r22, r22
 afa:	77 1f       	adc	r23, r23
 afc:	88 1f       	adc	r24, r24
 afe:	bb 1f       	adc	r27, r27
 b00:	26 17       	cp	r18, r22
 b02:	37 07       	cpc	r19, r23
 b04:	48 07       	cpc	r20, r24
 b06:	ab 07       	cpc	r26, r27
 b08:	b0 e8       	ldi	r27, 0x80	; 128
 b0a:	09 f0       	breq	.+2      	; 0xb0e <__divsf3_pse+0x56>
 b0c:	bb 0b       	sbc	r27, r27
 b0e:	80 2d       	mov	r24, r0
 b10:	bf 01       	movw	r22, r30
 b12:	ff 27       	eor	r31, r31
 b14:	93 58       	subi	r25, 0x83	; 131
 b16:	5f 4f       	sbci	r21, 0xFF	; 255
 b18:	3a f0       	brmi	.+14     	; 0xb28 <__divsf3_pse+0x70>
 b1a:	9e 3f       	cpi	r25, 0xFE	; 254
 b1c:	51 05       	cpc	r21, r1
 b1e:	78 f0       	brcs	.+30     	; 0xb3e <__divsf3_pse+0x86>
 b20:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__fp_inf>
 b24:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__fp_szero>
 b28:	5f 3f       	cpi	r21, 0xFF	; 255
 b2a:	e4 f3       	brlt	.-8      	; 0xb24 <__divsf3_pse+0x6c>
 b2c:	98 3e       	cpi	r25, 0xE8	; 232
 b2e:	d4 f3       	brlt	.-12     	; 0xb24 <__divsf3_pse+0x6c>
 b30:	86 95       	lsr	r24
 b32:	77 95       	ror	r23
 b34:	67 95       	ror	r22
 b36:	b7 95       	ror	r27
 b38:	f7 95       	ror	r31
 b3a:	9f 5f       	subi	r25, 0xFF	; 255
 b3c:	c9 f7       	brne	.-14     	; 0xb30 <__divsf3_pse+0x78>
 b3e:	88 0f       	add	r24, r24
 b40:	91 1d       	adc	r25, r1
 b42:	96 95       	lsr	r25
 b44:	87 95       	ror	r24
 b46:	97 f9       	bld	r25, 7
 b48:	08 95       	ret
 b4a:	e1 e0       	ldi	r30, 0x01	; 1
 b4c:	66 0f       	add	r22, r22
 b4e:	77 1f       	adc	r23, r23
 b50:	88 1f       	adc	r24, r24
 b52:	bb 1f       	adc	r27, r27
 b54:	62 17       	cp	r22, r18
 b56:	73 07       	cpc	r23, r19
 b58:	84 07       	cpc	r24, r20
 b5a:	ba 07       	cpc	r27, r26
 b5c:	20 f0       	brcs	.+8      	; 0xb66 <__divsf3_pse+0xae>
 b5e:	62 1b       	sub	r22, r18
 b60:	73 0b       	sbc	r23, r19
 b62:	84 0b       	sbc	r24, r20
 b64:	ba 0b       	sbc	r27, r26
 b66:	ee 1f       	adc	r30, r30
 b68:	88 f7       	brcc	.-30     	; 0xb4c <__divsf3_pse+0x94>
 b6a:	e0 95       	com	r30
 b6c:	08 95       	ret

00000b6e <__fixsfsi>:
 b6e:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fixunssfsi>
 b72:	68 94       	set
 b74:	b1 11       	cpse	r27, r1
 b76:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__fp_szero>
 b7a:	08 95       	ret

00000b7c <__fixunssfsi>:
 b7c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fp_splitA>
 b80:	88 f0       	brcs	.+34     	; 0xba4 <__fixunssfsi+0x28>
 b82:	9f 57       	subi	r25, 0x7F	; 127
 b84:	98 f0       	brcs	.+38     	; 0xbac <__fixunssfsi+0x30>
 b86:	b9 2f       	mov	r27, r25
 b88:	99 27       	eor	r25, r25
 b8a:	b7 51       	subi	r27, 0x17	; 23
 b8c:	b0 f0       	brcs	.+44     	; 0xbba <__fixunssfsi+0x3e>
 b8e:	e1 f0       	breq	.+56     	; 0xbc8 <__fixunssfsi+0x4c>
 b90:	66 0f       	add	r22, r22
 b92:	77 1f       	adc	r23, r23
 b94:	88 1f       	adc	r24, r24
 b96:	99 1f       	adc	r25, r25
 b98:	1a f0       	brmi	.+6      	; 0xba0 <__fixunssfsi+0x24>
 b9a:	ba 95       	dec	r27
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__fixunssfsi+0x14>
 b9e:	14 c0       	rjmp	.+40     	; 0xbc8 <__fixunssfsi+0x4c>
 ba0:	b1 30       	cpi	r27, 0x01	; 1
 ba2:	91 f0       	breq	.+36     	; 0xbc8 <__fixunssfsi+0x4c>
 ba4:	0e 94 98 06 	call	0xd30	; 0xd30 <__fp_zero>
 ba8:	b1 e0       	ldi	r27, 0x01	; 1
 baa:	08 95       	ret
 bac:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__fp_zero>
 bb0:	67 2f       	mov	r22, r23
 bb2:	78 2f       	mov	r23, r24
 bb4:	88 27       	eor	r24, r24
 bb6:	b8 5f       	subi	r27, 0xF8	; 248
 bb8:	39 f0       	breq	.+14     	; 0xbc8 <__fixunssfsi+0x4c>
 bba:	b9 3f       	cpi	r27, 0xF9	; 249
 bbc:	cc f3       	brlt	.-14     	; 0xbb0 <__fixunssfsi+0x34>
 bbe:	86 95       	lsr	r24
 bc0:	77 95       	ror	r23
 bc2:	67 95       	ror	r22
 bc4:	b3 95       	inc	r27
 bc6:	d9 f7       	brne	.-10     	; 0xbbe <__fixunssfsi+0x42>
 bc8:	3e f4       	brtc	.+14     	; 0xbd8 <__fixunssfsi+0x5c>
 bca:	90 95       	com	r25
 bcc:	80 95       	com	r24
 bce:	70 95       	com	r23
 bd0:	61 95       	neg	r22
 bd2:	7f 4f       	sbci	r23, 0xFF	; 255
 bd4:	8f 4f       	sbci	r24, 0xFF	; 255
 bd6:	9f 4f       	sbci	r25, 0xFF	; 255
 bd8:	08 95       	ret

00000bda <__floatunsisf>:
 bda:	e8 94       	clt
 bdc:	09 c0       	rjmp	.+18     	; 0xbf0 <__floatsisf+0x12>

00000bde <__floatsisf>:
 bde:	97 fb       	bst	r25, 7
 be0:	3e f4       	brtc	.+14     	; 0xbf0 <__floatsisf+0x12>
 be2:	90 95       	com	r25
 be4:	80 95       	com	r24
 be6:	70 95       	com	r23
 be8:	61 95       	neg	r22
 bea:	7f 4f       	sbci	r23, 0xFF	; 255
 bec:	8f 4f       	sbci	r24, 0xFF	; 255
 bee:	9f 4f       	sbci	r25, 0xFF	; 255
 bf0:	99 23       	and	r25, r25
 bf2:	a9 f0       	breq	.+42     	; 0xc1e <__floatsisf+0x40>
 bf4:	f9 2f       	mov	r31, r25
 bf6:	96 e9       	ldi	r25, 0x96	; 150
 bf8:	bb 27       	eor	r27, r27
 bfa:	93 95       	inc	r25
 bfc:	f6 95       	lsr	r31
 bfe:	87 95       	ror	r24
 c00:	77 95       	ror	r23
 c02:	67 95       	ror	r22
 c04:	b7 95       	ror	r27
 c06:	f1 11       	cpse	r31, r1
 c08:	f8 cf       	rjmp	.-16     	; 0xbfa <__floatsisf+0x1c>
 c0a:	fa f4       	brpl	.+62     	; 0xc4a <__floatsisf+0x6c>
 c0c:	bb 0f       	add	r27, r27
 c0e:	11 f4       	brne	.+4      	; 0xc14 <__floatsisf+0x36>
 c10:	60 ff       	sbrs	r22, 0
 c12:	1b c0       	rjmp	.+54     	; 0xc4a <__floatsisf+0x6c>
 c14:	6f 5f       	subi	r22, 0xFF	; 255
 c16:	7f 4f       	sbci	r23, 0xFF	; 255
 c18:	8f 4f       	sbci	r24, 0xFF	; 255
 c1a:	9f 4f       	sbci	r25, 0xFF	; 255
 c1c:	16 c0       	rjmp	.+44     	; 0xc4a <__floatsisf+0x6c>
 c1e:	88 23       	and	r24, r24
 c20:	11 f0       	breq	.+4      	; 0xc26 <__floatsisf+0x48>
 c22:	96 e9       	ldi	r25, 0x96	; 150
 c24:	11 c0       	rjmp	.+34     	; 0xc48 <__floatsisf+0x6a>
 c26:	77 23       	and	r23, r23
 c28:	21 f0       	breq	.+8      	; 0xc32 <__floatsisf+0x54>
 c2a:	9e e8       	ldi	r25, 0x8E	; 142
 c2c:	87 2f       	mov	r24, r23
 c2e:	76 2f       	mov	r23, r22
 c30:	05 c0       	rjmp	.+10     	; 0xc3c <__floatsisf+0x5e>
 c32:	66 23       	and	r22, r22
 c34:	71 f0       	breq	.+28     	; 0xc52 <__floatsisf+0x74>
 c36:	96 e8       	ldi	r25, 0x86	; 134
 c38:	86 2f       	mov	r24, r22
 c3a:	70 e0       	ldi	r23, 0x00	; 0
 c3c:	60 e0       	ldi	r22, 0x00	; 0
 c3e:	2a f0       	brmi	.+10     	; 0xc4a <__floatsisf+0x6c>
 c40:	9a 95       	dec	r25
 c42:	66 0f       	add	r22, r22
 c44:	77 1f       	adc	r23, r23
 c46:	88 1f       	adc	r24, r24
 c48:	da f7       	brpl	.-10     	; 0xc40 <__floatsisf+0x62>
 c4a:	88 0f       	add	r24, r24
 c4c:	96 95       	lsr	r25
 c4e:	87 95       	ror	r24
 c50:	97 f9       	bld	r25, 7
 c52:	08 95       	ret

00000c54 <__fp_cmp>:
 c54:	99 0f       	add	r25, r25
 c56:	00 08       	sbc	r0, r0
 c58:	55 0f       	add	r21, r21
 c5a:	aa 0b       	sbc	r26, r26
 c5c:	e0 e8       	ldi	r30, 0x80	; 128
 c5e:	fe ef       	ldi	r31, 0xFE	; 254
 c60:	16 16       	cp	r1, r22
 c62:	17 06       	cpc	r1, r23
 c64:	e8 07       	cpc	r30, r24
 c66:	f9 07       	cpc	r31, r25
 c68:	c0 f0       	brcs	.+48     	; 0xc9a <__fp_cmp+0x46>
 c6a:	12 16       	cp	r1, r18
 c6c:	13 06       	cpc	r1, r19
 c6e:	e4 07       	cpc	r30, r20
 c70:	f5 07       	cpc	r31, r21
 c72:	98 f0       	brcs	.+38     	; 0xc9a <__fp_cmp+0x46>
 c74:	62 1b       	sub	r22, r18
 c76:	73 0b       	sbc	r23, r19
 c78:	84 0b       	sbc	r24, r20
 c7a:	95 0b       	sbc	r25, r21
 c7c:	39 f4       	brne	.+14     	; 0xc8c <__fp_cmp+0x38>
 c7e:	0a 26       	eor	r0, r26
 c80:	61 f0       	breq	.+24     	; 0xc9a <__fp_cmp+0x46>
 c82:	23 2b       	or	r18, r19
 c84:	24 2b       	or	r18, r20
 c86:	25 2b       	or	r18, r21
 c88:	21 f4       	brne	.+8      	; 0xc92 <__fp_cmp+0x3e>
 c8a:	08 95       	ret
 c8c:	0a 26       	eor	r0, r26
 c8e:	09 f4       	brne	.+2      	; 0xc92 <__fp_cmp+0x3e>
 c90:	a1 40       	sbci	r26, 0x01	; 1
 c92:	a6 95       	lsr	r26
 c94:	8f ef       	ldi	r24, 0xFF	; 255
 c96:	81 1d       	adc	r24, r1
 c98:	81 1d       	adc	r24, r1
 c9a:	08 95       	ret

00000c9c <__fp_inf>:
 c9c:	97 f9       	bld	r25, 7
 c9e:	9f 67       	ori	r25, 0x7F	; 127
 ca0:	80 e8       	ldi	r24, 0x80	; 128
 ca2:	70 e0       	ldi	r23, 0x00	; 0
 ca4:	60 e0       	ldi	r22, 0x00	; 0
 ca6:	08 95       	ret

00000ca8 <__fp_nan>:
 ca8:	9f ef       	ldi	r25, 0xFF	; 255
 caa:	80 ec       	ldi	r24, 0xC0	; 192
 cac:	08 95       	ret

00000cae <__fp_pscA>:
 cae:	00 24       	eor	r0, r0
 cb0:	0a 94       	dec	r0
 cb2:	16 16       	cp	r1, r22
 cb4:	17 06       	cpc	r1, r23
 cb6:	18 06       	cpc	r1, r24
 cb8:	09 06       	cpc	r0, r25
 cba:	08 95       	ret

00000cbc <__fp_pscB>:
 cbc:	00 24       	eor	r0, r0
 cbe:	0a 94       	dec	r0
 cc0:	12 16       	cp	r1, r18
 cc2:	13 06       	cpc	r1, r19
 cc4:	14 06       	cpc	r1, r20
 cc6:	05 06       	cpc	r0, r21
 cc8:	08 95       	ret

00000cca <__fp_round>:
 cca:	09 2e       	mov	r0, r25
 ccc:	03 94       	inc	r0
 cce:	00 0c       	add	r0, r0
 cd0:	11 f4       	brne	.+4      	; 0xcd6 <__fp_round+0xc>
 cd2:	88 23       	and	r24, r24
 cd4:	52 f0       	brmi	.+20     	; 0xcea <__fp_round+0x20>
 cd6:	bb 0f       	add	r27, r27
 cd8:	40 f4       	brcc	.+16     	; 0xcea <__fp_round+0x20>
 cda:	bf 2b       	or	r27, r31
 cdc:	11 f4       	brne	.+4      	; 0xce2 <__fp_round+0x18>
 cde:	60 ff       	sbrs	r22, 0
 ce0:	04 c0       	rjmp	.+8      	; 0xcea <__fp_round+0x20>
 ce2:	6f 5f       	subi	r22, 0xFF	; 255
 ce4:	7f 4f       	sbci	r23, 0xFF	; 255
 ce6:	8f 4f       	sbci	r24, 0xFF	; 255
 ce8:	9f 4f       	sbci	r25, 0xFF	; 255
 cea:	08 95       	ret

00000cec <__fp_split3>:
 cec:	57 fd       	sbrc	r21, 7
 cee:	90 58       	subi	r25, 0x80	; 128
 cf0:	44 0f       	add	r20, r20
 cf2:	55 1f       	adc	r21, r21
 cf4:	59 f0       	breq	.+22     	; 0xd0c <__fp_splitA+0x10>
 cf6:	5f 3f       	cpi	r21, 0xFF	; 255
 cf8:	71 f0       	breq	.+28     	; 0xd16 <__fp_splitA+0x1a>
 cfa:	47 95       	ror	r20

00000cfc <__fp_splitA>:
 cfc:	88 0f       	add	r24, r24
 cfe:	97 fb       	bst	r25, 7
 d00:	99 1f       	adc	r25, r25
 d02:	61 f0       	breq	.+24     	; 0xd1c <__fp_splitA+0x20>
 d04:	9f 3f       	cpi	r25, 0xFF	; 255
 d06:	79 f0       	breq	.+30     	; 0xd26 <__fp_splitA+0x2a>
 d08:	87 95       	ror	r24
 d0a:	08 95       	ret
 d0c:	12 16       	cp	r1, r18
 d0e:	13 06       	cpc	r1, r19
 d10:	14 06       	cpc	r1, r20
 d12:	55 1f       	adc	r21, r21
 d14:	f2 cf       	rjmp	.-28     	; 0xcfa <__fp_split3+0xe>
 d16:	46 95       	lsr	r20
 d18:	f1 df       	rcall	.-30     	; 0xcfc <__fp_splitA>
 d1a:	08 c0       	rjmp	.+16     	; 0xd2c <__fp_splitA+0x30>
 d1c:	16 16       	cp	r1, r22
 d1e:	17 06       	cpc	r1, r23
 d20:	18 06       	cpc	r1, r24
 d22:	99 1f       	adc	r25, r25
 d24:	f1 cf       	rjmp	.-30     	; 0xd08 <__fp_splitA+0xc>
 d26:	86 95       	lsr	r24
 d28:	71 05       	cpc	r23, r1
 d2a:	61 05       	cpc	r22, r1
 d2c:	08 94       	sec
 d2e:	08 95       	ret

00000d30 <__fp_zero>:
 d30:	e8 94       	clt

00000d32 <__fp_szero>:
 d32:	bb 27       	eor	r27, r27
 d34:	66 27       	eor	r22, r22
 d36:	77 27       	eor	r23, r23
 d38:	cb 01       	movw	r24, r22
 d3a:	97 f9       	bld	r25, 7
 d3c:	08 95       	ret

00000d3e <__gesf2>:
 d3e:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fp_cmp>
 d42:	08 f4       	brcc	.+2      	; 0xd46 <__gesf2+0x8>
 d44:	8f ef       	ldi	r24, 0xFF	; 255
 d46:	08 95       	ret

00000d48 <__mulsf3>:
 d48:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__mulsf3x>
 d4c:	0c 94 65 06 	jmp	0xcca	; 0xcca <__fp_round>
 d50:	0e 94 57 06 	call	0xcae	; 0xcae <__fp_pscA>
 d54:	38 f0       	brcs	.+14     	; 0xd64 <__mulsf3+0x1c>
 d56:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fp_pscB>
 d5a:	20 f0       	brcs	.+8      	; 0xd64 <__mulsf3+0x1c>
 d5c:	95 23       	and	r25, r21
 d5e:	11 f0       	breq	.+4      	; 0xd64 <__mulsf3+0x1c>
 d60:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__fp_inf>
 d64:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_nan>
 d68:	11 24       	eor	r1, r1
 d6a:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__fp_szero>

00000d6e <__mulsf3x>:
 d6e:	0e 94 76 06 	call	0xcec	; 0xcec <__fp_split3>
 d72:	70 f3       	brcs	.-36     	; 0xd50 <__mulsf3+0x8>

00000d74 <__mulsf3_pse>:
 d74:	95 9f       	mul	r25, r21
 d76:	c1 f3       	breq	.-16     	; 0xd68 <__mulsf3+0x20>
 d78:	95 0f       	add	r25, r21
 d7a:	50 e0       	ldi	r21, 0x00	; 0
 d7c:	55 1f       	adc	r21, r21
 d7e:	62 9f       	mul	r22, r18
 d80:	f0 01       	movw	r30, r0
 d82:	72 9f       	mul	r23, r18
 d84:	bb 27       	eor	r27, r27
 d86:	f0 0d       	add	r31, r0
 d88:	b1 1d       	adc	r27, r1
 d8a:	63 9f       	mul	r22, r19
 d8c:	aa 27       	eor	r26, r26
 d8e:	f0 0d       	add	r31, r0
 d90:	b1 1d       	adc	r27, r1
 d92:	aa 1f       	adc	r26, r26
 d94:	64 9f       	mul	r22, r20
 d96:	66 27       	eor	r22, r22
 d98:	b0 0d       	add	r27, r0
 d9a:	a1 1d       	adc	r26, r1
 d9c:	66 1f       	adc	r22, r22
 d9e:	82 9f       	mul	r24, r18
 da0:	22 27       	eor	r18, r18
 da2:	b0 0d       	add	r27, r0
 da4:	a1 1d       	adc	r26, r1
 da6:	62 1f       	adc	r22, r18
 da8:	73 9f       	mul	r23, r19
 daa:	b0 0d       	add	r27, r0
 dac:	a1 1d       	adc	r26, r1
 dae:	62 1f       	adc	r22, r18
 db0:	83 9f       	mul	r24, r19
 db2:	a0 0d       	add	r26, r0
 db4:	61 1d       	adc	r22, r1
 db6:	22 1f       	adc	r18, r18
 db8:	74 9f       	mul	r23, r20
 dba:	33 27       	eor	r19, r19
 dbc:	a0 0d       	add	r26, r0
 dbe:	61 1d       	adc	r22, r1
 dc0:	23 1f       	adc	r18, r19
 dc2:	84 9f       	mul	r24, r20
 dc4:	60 0d       	add	r22, r0
 dc6:	21 1d       	adc	r18, r1
 dc8:	82 2f       	mov	r24, r18
 dca:	76 2f       	mov	r23, r22
 dcc:	6a 2f       	mov	r22, r26
 dce:	11 24       	eor	r1, r1
 dd0:	9f 57       	subi	r25, 0x7F	; 127
 dd2:	50 40       	sbci	r21, 0x00	; 0
 dd4:	9a f0       	brmi	.+38     	; 0xdfc <__mulsf3_pse+0x88>
 dd6:	f1 f0       	breq	.+60     	; 0xe14 <__mulsf3_pse+0xa0>
 dd8:	88 23       	and	r24, r24
 dda:	4a f0       	brmi	.+18     	; 0xdee <__mulsf3_pse+0x7a>
 ddc:	ee 0f       	add	r30, r30
 dde:	ff 1f       	adc	r31, r31
 de0:	bb 1f       	adc	r27, r27
 de2:	66 1f       	adc	r22, r22
 de4:	77 1f       	adc	r23, r23
 de6:	88 1f       	adc	r24, r24
 de8:	91 50       	subi	r25, 0x01	; 1
 dea:	50 40       	sbci	r21, 0x00	; 0
 dec:	a9 f7       	brne	.-22     	; 0xdd8 <__mulsf3_pse+0x64>
 dee:	9e 3f       	cpi	r25, 0xFE	; 254
 df0:	51 05       	cpc	r21, r1
 df2:	80 f0       	brcs	.+32     	; 0xe14 <__mulsf3_pse+0xa0>
 df4:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__fp_inf>
 df8:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__fp_szero>
 dfc:	5f 3f       	cpi	r21, 0xFF	; 255
 dfe:	e4 f3       	brlt	.-8      	; 0xdf8 <__mulsf3_pse+0x84>
 e00:	98 3e       	cpi	r25, 0xE8	; 232
 e02:	d4 f3       	brlt	.-12     	; 0xdf8 <__mulsf3_pse+0x84>
 e04:	86 95       	lsr	r24
 e06:	77 95       	ror	r23
 e08:	67 95       	ror	r22
 e0a:	b7 95       	ror	r27
 e0c:	f7 95       	ror	r31
 e0e:	e7 95       	ror	r30
 e10:	9f 5f       	subi	r25, 0xFF	; 255
 e12:	c1 f7       	brne	.-16     	; 0xe04 <__mulsf3_pse+0x90>
 e14:	fe 2b       	or	r31, r30
 e16:	88 0f       	add	r24, r24
 e18:	91 1d       	adc	r25, r1
 e1a:	96 95       	lsr	r25
 e1c:	87 95       	ror	r24
 e1e:	97 f9       	bld	r25, 7
 e20:	08 95       	ret

00000e22 <sin>:
 e22:	9f 93       	push	r25
 e24:	0e 94 1b 07 	call	0xe36	; 0xe36 <__fp_rempio2>
 e28:	0f 90       	pop	r0
 e2a:	07 fc       	sbrc	r0, 7
 e2c:	ee 5f       	subi	r30, 0xFE	; 254
 e2e:	0c 94 44 07 	jmp	0xe88	; 0xe88 <__fp_sinus>
 e32:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_nan>

00000e36 <__fp_rempio2>:
 e36:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fp_splitA>
 e3a:	d8 f3       	brcs	.-10     	; 0xe32 <sin+0x10>
 e3c:	e8 94       	clt
 e3e:	e0 e0       	ldi	r30, 0x00	; 0
 e40:	bb 27       	eor	r27, r27
 e42:	9f 57       	subi	r25, 0x7F	; 127
 e44:	f0 f0       	brcs	.+60     	; 0xe82 <__fp_rempio2+0x4c>
 e46:	2a ed       	ldi	r18, 0xDA	; 218
 e48:	3f e0       	ldi	r19, 0x0F	; 15
 e4a:	49 ec       	ldi	r20, 0xC9	; 201
 e4c:	06 c0       	rjmp	.+12     	; 0xe5a <__fp_rempio2+0x24>
 e4e:	ee 0f       	add	r30, r30
 e50:	bb 0f       	add	r27, r27
 e52:	66 1f       	adc	r22, r22
 e54:	77 1f       	adc	r23, r23
 e56:	88 1f       	adc	r24, r24
 e58:	28 f0       	brcs	.+10     	; 0xe64 <__fp_rempio2+0x2e>
 e5a:	b2 3a       	cpi	r27, 0xA2	; 162
 e5c:	62 07       	cpc	r22, r18
 e5e:	73 07       	cpc	r23, r19
 e60:	84 07       	cpc	r24, r20
 e62:	28 f0       	brcs	.+10     	; 0xe6e <__fp_rempio2+0x38>
 e64:	b2 5a       	subi	r27, 0xA2	; 162
 e66:	62 0b       	sbc	r22, r18
 e68:	73 0b       	sbc	r23, r19
 e6a:	84 0b       	sbc	r24, r20
 e6c:	e3 95       	inc	r30
 e6e:	9a 95       	dec	r25
 e70:	72 f7       	brpl	.-36     	; 0xe4e <__fp_rempio2+0x18>
 e72:	80 38       	cpi	r24, 0x80	; 128
 e74:	30 f4       	brcc	.+12     	; 0xe82 <__fp_rempio2+0x4c>
 e76:	9a 95       	dec	r25
 e78:	bb 0f       	add	r27, r27
 e7a:	66 1f       	adc	r22, r22
 e7c:	77 1f       	adc	r23, r23
 e7e:	88 1f       	adc	r24, r24
 e80:	d2 f7       	brpl	.-12     	; 0xe76 <__fp_rempio2+0x40>
 e82:	90 48       	sbci	r25, 0x80	; 128
 e84:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_mpack_finite>

00000e88 <__fp_sinus>:
 e88:	ef 93       	push	r30
 e8a:	e0 ff       	sbrs	r30, 0
 e8c:	07 c0       	rjmp	.+14     	; 0xe9c <__fp_sinus+0x14>
 e8e:	a2 ea       	ldi	r26, 0xA2	; 162
 e90:	2a ed       	ldi	r18, 0xDA	; 218
 e92:	3f e0       	ldi	r19, 0x0F	; 15
 e94:	49 ec       	ldi	r20, 0xC9	; 201
 e96:	5f eb       	ldi	r21, 0xBF	; 191
 e98:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__addsf3x>
 e9c:	0e 94 65 06 	call	0xcca	; 0xcca <__fp_round>
 ea0:	0f 90       	pop	r0
 ea2:	03 94       	inc	r0
 ea4:	01 fc       	sbrc	r0, 1
 ea6:	90 58       	subi	r25, 0x80	; 128
 ea8:	e8 e9       	ldi	r30, 0x98	; 152
 eaa:	f0 e0       	ldi	r31, 0x00	; 0
 eac:	0c 94 66 07 	jmp	0xecc	; 0xecc <__fp_powsodd>

00000eb0 <__fp_mpack>:
 eb0:	9f 3f       	cpi	r25, 0xFF	; 255
 eb2:	31 f0       	breq	.+12     	; 0xec0 <__fp_mpack_finite+0xc>

00000eb4 <__fp_mpack_finite>:
 eb4:	91 50       	subi	r25, 0x01	; 1
 eb6:	20 f4       	brcc	.+8      	; 0xec0 <__fp_mpack_finite+0xc>
 eb8:	87 95       	ror	r24
 eba:	77 95       	ror	r23
 ebc:	67 95       	ror	r22
 ebe:	b7 95       	ror	r27
 ec0:	88 0f       	add	r24, r24
 ec2:	91 1d       	adc	r25, r1
 ec4:	96 95       	lsr	r25
 ec6:	87 95       	ror	r24
 ec8:	97 f9       	bld	r25, 7
 eca:	08 95       	ret

00000ecc <__fp_powsodd>:
 ecc:	9f 93       	push	r25
 ece:	8f 93       	push	r24
 ed0:	7f 93       	push	r23
 ed2:	6f 93       	push	r22
 ed4:	ff 93       	push	r31
 ed6:	ef 93       	push	r30
 ed8:	9b 01       	movw	r18, r22
 eda:	ac 01       	movw	r20, r24
 edc:	0e 94 a4 06 	call	0xd48	; 0xd48 <__mulsf3>
 ee0:	ef 91       	pop	r30
 ee2:	ff 91       	pop	r31
 ee4:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_powser>
 ee8:	2f 91       	pop	r18
 eea:	3f 91       	pop	r19
 eec:	4f 91       	pop	r20
 eee:	5f 91       	pop	r21
 ef0:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__mulsf3>

00000ef4 <__fp_powser>:
 ef4:	df 93       	push	r29
 ef6:	cf 93       	push	r28
 ef8:	1f 93       	push	r17
 efa:	0f 93       	push	r16
 efc:	ff 92       	push	r15
 efe:	ef 92       	push	r14
 f00:	df 92       	push	r13
 f02:	7b 01       	movw	r14, r22
 f04:	8c 01       	movw	r16, r24
 f06:	68 94       	set
 f08:	06 c0       	rjmp	.+12     	; 0xf16 <__fp_powser+0x22>
 f0a:	da 2e       	mov	r13, r26
 f0c:	ef 01       	movw	r28, r30
 f0e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__mulsf3x>
 f12:	fe 01       	movw	r30, r28
 f14:	e8 94       	clt
 f16:	a5 91       	lpm	r26, Z+
 f18:	25 91       	lpm	r18, Z+
 f1a:	35 91       	lpm	r19, Z+
 f1c:	45 91       	lpm	r20, Z+
 f1e:	55 91       	lpm	r21, Z+
 f20:	a6 f3       	brts	.-24     	; 0xf0a <__fp_powser+0x16>
 f22:	ef 01       	movw	r28, r30
 f24:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__addsf3x>
 f28:	fe 01       	movw	r30, r28
 f2a:	97 01       	movw	r18, r14
 f2c:	a8 01       	movw	r20, r16
 f2e:	da 94       	dec	r13
 f30:	69 f7       	brne	.-38     	; 0xf0c <__fp_powser+0x18>
 f32:	df 90       	pop	r13
 f34:	ef 90       	pop	r14
 f36:	ff 90       	pop	r15
 f38:	0f 91       	pop	r16
 f3a:	1f 91       	pop	r17
 f3c:	cf 91       	pop	r28
 f3e:	df 91       	pop	r29
 f40:	08 95       	ret

00000f42 <__tablejump2__>:
 f42:	ee 0f       	add	r30, r30
 f44:	ff 1f       	adc	r31, r31
 f46:	05 90       	lpm	r0, Z+
 f48:	f4 91       	lpm	r31, Z
 f4a:	e0 2d       	mov	r30, r0
 f4c:	09 94       	ijmp

00000f4e <_exit>:
 f4e:	f8 94       	cli

00000f50 <__stop_program>:
 f50:	ff cf       	rjmp	.-2      	; 0xf50 <__stop_program>
