
piano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000b6a  00000bde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b6a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000114e  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092b  00000000  00000000  00001e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000088a  00000000  00000000  00002779  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00003004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004db  00000000  00000000  00003158  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000de9  00000000  00000000  00003633  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	69 02       	muls	r22, r25
  6a:	78 02       	muls	r23, r24
  6c:	87 02       	muls	r24, r23
  6e:	96 02       	muls	r25, r22
  70:	a5 02       	muls	r26, r21
  72:	b4 02       	muls	r27, r20
  74:	c3 02       	muls	r28, r19
  76:	d2 02       	muls	r29, r18
  78:	fe 02       	muls	r31, r30
  7a:	0d 03       	fmul	r16, r21
  7c:	1c 03       	fmul	r17, r20
  7e:	2b 03       	fmul	r18, r19
  80:	3a 03       	fmul	r19, r18
  82:	49 03       	fmul	r20, r17
  84:	58 03       	fmul	r21, r16
  86:	67 03       	mulsu	r22, r23
  88:	93 03       	fmuls	r17, r19
  8a:	a2 03       	fmuls	r18, r18
  8c:	b1 03       	fmuls	r19, r17
  8e:	c0 03       	fmuls	r20, r16
  90:	cf 03       	fmulsu	r20, r23
  92:	de 03       	fmulsu	r21, r22
  94:	ed 03       	fmulsu	r22, r21
  96:	fc 03       	fmulsu	r23, r20

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d8 e0       	ldi	r29, 0x08	; 8
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ea e6       	ldi	r30, 0x6A	; 106
  ac:	fb e0       	ldi	r31, 0x0B	; 11
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a2 32       	cpi	r26, 0x22	; 34
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>
  ba:	0e 94 1e 02 	call	0x43c	; 0x43c <main>
  be:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <lcd_send_command>:
	
}

void lcd_send_command (uint8_t command)
{
	DATA_BUS=(command&0b11110000);
  c6:	98 2f       	mov	r25, r24
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	9b b9       	out	0x0b, r25	; 11
	CTL_BUS &=~(1<<LCD_RS);
  cc:	43 98       	cbi	0x08, 3	; 8
	CTL_BUS |=(1<<LCD_EN);
  ce:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	e9 ef       	ldi	r30, 0xF9	; 249
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_send_command+0xe>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_send_command+0x14>
  da:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
  dc:	45 98       	cbi	0x08, 5	; 8
  de:	e9 ef       	ldi	r30, 0xF9	; 249
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_send_command+0x1c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_send_command+0x22>
  e8:	00 00       	nop
	_delay_ms(1);
	DATA_BUS=((command&0b00001111)<<4);
  ea:	f0 e1       	ldi	r31, 0x10	; 16
  ec:	8f 9f       	mul	r24, r31
  ee:	c0 01       	movw	r24, r0
  f0:	11 24       	eor	r1, r1
  f2:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS |=(1<<LCD_EN);
  f4:	45 9a       	sbi	0x08, 5	; 8
  f6:	89 ef       	ldi	r24, 0xF9	; 249
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_send_command+0x34>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_send_command+0x3a>
 100:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
 102:	45 98       	cbi	0x08, 5	; 8
 104:	e9 ef       	ldi	r30, 0xF9	; 249
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_send_command+0x42>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_send_command+0x48>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <lcd_init>:


void lcd_init(void)
{
	
	DATA_DDR = (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5)| (1<<LCD_D4);
 112:	80 ef       	ldi	r24, 0xF0	; 240
 114:	8a b9       	out	0x0a, r24	; 10
	CTL_DDR |= (1<<LCD_EN)|(1<<LCD_RW)|(1<<LCD_RS);
 116:	87 b1       	in	r24, 0x07	; 7
 118:	88 63       	ori	r24, 0x38	; 56
 11a:	87 b9       	out	0x07, r24	; 7

	
	DATA_BUS = (0<<LCD_D7)|(0<<LCD_D6)|(1<<LCD_D5)|(0<<LCD_D4);
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS|= (1<<LCD_EN)|(0<<LCD_RW)|(0<<LCD_RS);
 120:	45 9a       	sbi	0x08, 5	; 8
 122:	89 ef       	ldi	r24, 0xF9	; 249
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_init+0x14>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_init+0x1a>
 12c:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
 12e:	45 98       	cbi	0x08, 5	; 8
 130:	89 ef       	ldi	r24, 0xF9	; 249
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <lcd_init+0x22>
 138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_init+0x28>
 13a:	00 00       	nop
	_delay_ms(1);
	
	lcd_send_command(LCD_CMD_4BIT_2ROW_5X7);
 13c:	88 e2       	ldi	r24, 0x28	; 40
 13e:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
 142:	89 ef       	ldi	r24, 0xF9	; 249
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_init+0x34>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_init+0x3a>
 14c:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(LCD_CMD_DISPLAY_NO_CURSOR);
 14e:	8c e0       	ldi	r24, 0x0C	; 12
 150:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
 154:	89 ef       	ldi	r24, 0xF9	; 249
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_init+0x46>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <lcd_init+0x4c>
 15e:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(0x80);
 160:	80 e8       	ldi	r24, 0x80	; 128
 162:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
 166:	08 95       	ret

00000168 <lcd_write_character>:
	}
}
void lcd_write_character(uint8_t character)
{
	
	DATA_BUS=(character & 0b11110000);
 168:	98 2f       	mov	r25, r24
 16a:	90 7f       	andi	r25, 0xF0	; 240
 16c:	9b b9       	out	0x0b, r25	; 11
	CTL_BUS|=(1<<LCD_RS);
 16e:	43 9a       	sbi	0x08, 3	; 8
	CTL_BUS |=(1<<LCD_EN);
 170:	45 9a       	sbi	0x08, 5	; 8
 172:	e3 ef       	ldi	r30, 0xF3	; 243
 174:	f1 e0       	ldi	r31, 0x01	; 1
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_write_character+0xe>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_write_character+0x14>
 17c:	00 00       	nop
	_delay_ms(2);
	CTL_BUS &=~(1<<LCD_EN);
 17e:	45 98       	cbi	0x08, 5	; 8
 180:	e3 ef       	ldi	r30, 0xF3	; 243
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_write_character+0x1c>
 188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_write_character+0x22>
 18a:	00 00       	nop
	_delay_ms(2);
	DATA_BUS=((character & 0b00001111)<<4);
 18c:	f0 e1       	ldi	r31, 0x10	; 16
 18e:	8f 9f       	mul	r24, r31
 190:	c0 01       	movw	r24, r0
 192:	11 24       	eor	r1, r1
 194:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS |=(1<<LCD_EN);
 196:	45 9a       	sbi	0x08, 5	; 8
 198:	83 ef       	ldi	r24, 0xF3	; 243
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_write_character+0x34>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_write_character+0x3a>
 1a2:	00 00       	nop
	_delay_ms(2);
	CTL_BUS &=~(1<<LCD_EN);
 1a4:	45 98       	cbi	0x08, 5	; 8
 1a6:	e3 ef       	ldi	r30, 0xF3	; 243
 1a8:	f1 e0       	ldi	r31, 0x01	; 1
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_write_character+0x42>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_write_character+0x48>
 1b0:	00 00       	nop
 1b2:	08 95       	ret

000001b4 <lcd_write_word>:
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
	_delay_ms(1);
}
void lcd_write_word(uint8_t word[20])
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	ec 01       	movw	r28, r24
	int i=0;
	while(word[i]!='\0')
 1ba:	88 81       	ld	r24, Y
 1bc:	88 23       	and	r24, r24
 1be:	31 f0       	breq	.+12     	; 0x1cc <lcd_write_word+0x18>
 1c0:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_write_character(word[i]);
 1c2:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_write_character>
	_delay_ms(1);
}
void lcd_write_word(uint8_t word[20])
{
	int i=0;
	while(word[i]!='\0')
 1c6:	89 91       	ld	r24, Y+
 1c8:	81 11       	cpse	r24, r1
 1ca:	fb cf       	rjmp	.-10     	; 0x1c2 <lcd_write_word+0xe>
	{
		lcd_write_character(word[i]);
		i++;
	}
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <lcd_clear>:
	_delay_ms(2);
	
}
void lcd_clear(void)
{
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
 1d8:	08 95       	ret

000001da <lcd_goto_xy>:
	
}
void lcd_goto_xy (uint8_t line,uint8_t pos)				//line = 0 or 1
{
	lcd_send_command((0x80|(line<<6))+pos);
 1da:	20 e4       	ldi	r18, 0x40	; 64
 1dc:	82 9f       	mul	r24, r18
 1de:	c0 01       	movw	r24, r0
 1e0:	11 24       	eor	r1, r1
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	86 0f       	add	r24, r22
 1e6:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	8a 95       	dec	r24
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_goto_xy+0x12>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_goto_xy+0x18>
 1f2:	08 95       	ret

000001f4 <readInput1>:
/*74HC165 read function*/
volatile uint8_t readInput1(void){
	uint8_t reader = 0;

	/* Set PINC2 (PC2) as input */
	DDRC &= ~(1 << PC2);
 1f4:	3a 98       	cbi	0x07, 2	; 7

	/* Raise LD pin */
	PORTC |= (1 << PC1);
 1f6:	41 9a       	sbi	0x08, 1	; 8
 1f8:	28 e0       	ldi	r18, 0x08	; 8
 1fa:	30 e0       	ldi	r19, 0x00	; 0
void stop_sound(void);


/*74HC165 read function*/
volatile uint8_t readInput1(void){
	uint8_t reader = 0;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1fe:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PINC & (1 << PC2)) ? 1 : 0);
 200:	96 b1       	in	r25, 0x06	; 6
 202:	92 fb       	bst	r25, 2
 204:	99 27       	eor	r25, r25
 206:	90 f9       	bld	r25, 0
 208:	88 0f       	add	r24, r24
 20a:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
 20c:	40 98       	cbi	0x08, 0	; 8
 20e:	94 2f       	mov	r25, r20
 210:	9a 95       	dec	r25
 212:	f1 f7       	brne	.-4      	; 0x210 <readInput1+0x1c>
		_delay_us(1);
		PORTC |= (1 << PC0);
 214:	40 9a       	sbi	0x08, 0	; 8
 216:	21 50       	subi	r18, 0x01	; 1
 218:	31 09       	sbc	r19, r1
	DDRC &= ~(1 << PC2);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
 21a:	91 f7       	brne	.-28     	; 0x200 <readInput1+0xc>
		_delay_us(1);
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
 21c:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
 21e:	08 95       	ret

00000220 <readInput2>:

volatile uint8_t readInput2(void){
	uint8_t reader = 0;

	/* Set PIND3 (PD3) as input */
	DDRD &= ~(1 << PD3);
 220:	53 98       	cbi	0x0a, 3	; 10

	/* Raise LD pin */
	PORTC |= (1 << PC1);
 222:	41 9a       	sbi	0x08, 1	; 8
 224:	28 e0       	ldi	r18, 0x08	; 8
 226:	30 e0       	ldi	r19, 0x00	; 0

	return reader;
}

volatile uint8_t readInput2(void){
	uint8_t reader = 0;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PIND & (1 << PD3)) ? 1 : 0);
 22c:	99 b1       	in	r25, 0x09	; 9
 22e:	93 fb       	bst	r25, 3
 230:	99 27       	eor	r25, r25
 232:	90 f9       	bld	r25, 0
 234:	88 0f       	add	r24, r24
 236:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
 238:	40 98       	cbi	0x08, 0	; 8
 23a:	94 2f       	mov	r25, r20
 23c:	9a 95       	dec	r25
 23e:	f1 f7       	brne	.-4      	; 0x23c <readInput2+0x1c>
		_delay_us(1); 
		PORTC |= (1 << PC0);
 240:	40 9a       	sbi	0x08, 0	; 8
 242:	21 50       	subi	r18, 0x01	; 1
 244:	31 09       	sbc	r19, r1
	DDRD &= ~(1 << PD3);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
 246:	91 f7       	brne	.-28     	; 0x22c <readInput2+0xc>
		_delay_us(1); 
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
 248:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
 24a:	08 95       	ret

0000024c <readInput3>:

volatile uint8_t readInput3(void){
	uint8_t reader = 0;

	/* Set PIND2 (PD2) as input */
	DDRD &= ~(1 << PD2);
 24c:	52 98       	cbi	0x0a, 2	; 10

	/* Raise LD pin */
	PORTC |= (1 << PC1);
 24e:	41 9a       	sbi	0x08, 1	; 8
 250:	28 e0       	ldi	r18, 0x08	; 8
 252:	30 e0       	ldi	r19, 0x00	; 0

	return reader;
}

volatile uint8_t readInput3(void){
	uint8_t reader = 0;
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PIND & (1 << PD2)) ? 1 : 0);
 258:	99 b1       	in	r25, 0x09	; 9
 25a:	92 fb       	bst	r25, 2
 25c:	99 27       	eor	r25, r25
 25e:	90 f9       	bld	r25, 0
 260:	88 0f       	add	r24, r24
 262:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
 264:	40 98       	cbi	0x08, 0	; 8
 266:	94 2f       	mov	r25, r20
 268:	9a 95       	dec	r25
 26a:	f1 f7       	brne	.-4      	; 0x268 <readInput3+0x1c>
		_delay_us(1); // You can use delay functions for a more accurate timing
		PORTC |= (1 << PC0);
 26c:	40 9a       	sbi	0x08, 0	; 8
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	31 09       	sbc	r19, r1
	DDRD &= ~(1 << PD2);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
 272:	91 f7       	brne	.-28     	; 0x258 <readInput3+0xc>
		_delay_us(1); // You can use delay functions for a more accurate timing
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
 274:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
 276:	08 95       	ret

00000278 <Play_Sound>:

	}
}

void Play_Sound(float frequency)
{
 278:	2f 92       	push	r2
 27a:	3f 92       	push	r3
 27c:	4f 92       	push	r4
 27e:	5f 92       	push	r5
 280:	6f 92       	push	r6
 282:	7f 92       	push	r7
 284:	8f 92       	push	r8
 286:	9f 92       	push	r9
 288:	af 92       	push	r10
 28a:	bf 92       	push	r11
 28c:	cf 92       	push	r12
 28e:	df 92       	push	r13
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	1f 92       	push	r1
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
 2a2:	4b 01       	movw	r8, r22
 2a4:	5c 01       	movw	r10, r24
	long int i,cycles;
	float wavelength = 1.25;
	
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);
 2a6:	23 9a       	sbi	0x04, 3	; 4

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	4a e7       	ldi	r20, 0x7A	; 122
 2ae:	55 e4       	ldi	r21, 0x45	; 69
 2b0:	0e 94 40 05 	call	0xa80	; 0xa80 <__mulsf3>
 2b4:	6b 01       	movw	r12, r22
 2b6:	7c 01       	movw	r14, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2b8:	0e 94 97 04 	call	0x92e	; 0x92e <__fixunssfsi>
 2bc:	2b 01       	movw	r4, r22
 2be:	3c 01       	movw	r6, r24
 2c0:	69 83       	std	Y+1, r22	; 0x01
 2c2:	35 2c       	mov	r3, r5
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	40 e8       	ldi	r20, 0x80	; 128
 2ca:	5f e3       	ldi	r21, 0x3F	; 63
 2cc:	c7 01       	movw	r24, r14
 2ce:	b6 01       	movw	r22, r12
 2d0:	0e 94 92 04 	call	0x924	; 0x924 <__cmpsf2>
 2d4:	88 23       	and	r24, r24
 2d6:	1c f4       	brge	.+6      	; 0x2de <Play_Sound+0x66>
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <Play_Sound+0x6a>
 2de:	94 2d       	mov	r25, r4
 2e0:	85 2d       	mov	r24, r5
 2e2:	69 2e       	mov	r6, r25
 2e4:	78 2e       	mov	r7, r24
 2e6:	00 e0       	ldi	r16, 0x00	; 0
 2e8:	10 e0       	ldi	r17, 0x00	; 0

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 2ea:	55 24       	eor	r5, r5
 2ec:	53 94       	inc	r5
 2ee:	21 2c       	mov	r2, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2f0:	49 80       	ldd	r4, Y+1	; 0x01
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	40 e8       	ldi	r20, 0x80	; 128
 2f8:	5f e3       	ldi	r21, 0x3F	; 63
 2fa:	c7 01       	movw	r24, r14
 2fc:	b6 01       	movw	r22, r12
 2fe:	0e 94 92 04 	call	0x924	; 0x924 <__cmpsf2>
 302:	88 23       	and	r24, r24
 304:	04 f1       	brlt	.+64     	; 0x346 <Play_Sound+0xce>
		__ticks = 1;
	else if (__tmp > 65535)
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	3f ef       	ldi	r19, 0xFF	; 255
 30a:	4f e7       	ldi	r20, 0x7F	; 127
 30c:	57 e4       	ldi	r21, 0x47	; 71
 30e:	c7 01       	movw	r24, r14
 310:	b6 01       	movw	r22, r12
 312:	0e 94 3b 05 	call	0xa76	; 0xa76 <__gesf2>
 316:	18 16       	cp	r1, r24
 318:	b4 f4       	brge	.+44     	; 0x346 <Play_Sound+0xce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e2       	ldi	r20, 0x20	; 32
 320:	51 e4       	ldi	r21, 0x41	; 65
 322:	c5 01       	movw	r24, r10
 324:	b4 01       	movw	r22, r8
 326:	0e 94 40 05 	call	0xa80	; 0xa80 <__mulsf3>
 32a:	0e 94 97 04 	call	0x92e	; 0x92e <__fixunssfsi>
		while(__ticks)
 32e:	61 15       	cp	r22, r1
 330:	71 05       	cpc	r23, r1
 332:	09 f4       	brne	.+2      	; 0x336 <Play_Sound+0xbe>
 334:	61 c0       	rjmp	.+194    	; 0x3f8 <Play_Sound+0x180>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 336:	80 e9       	ldi	r24, 0x90	; 144
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <Play_Sound+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 33e:	61 50       	subi	r22, 0x01	; 1
 340:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 342:	c9 f7       	brne	.-14     	; 0x336 <Play_Sound+0xbe>
 344:	4d c0       	rjmp	.+154    	; 0x3e0 <Play_Sound+0x168>
 346:	c3 01       	movw	r24, r6
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <Play_Sound+0xd0>

	for (i=0;i<cycles;i++)
	{
		_delay_ms(frequency);
		BUZZER_PORT |= (1 << BUZZER_PIN);
 34c:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	40 e8       	ldi	r20, 0x80	; 128
 354:	5f e3       	ldi	r21, 0x3F	; 63
 356:	c7 01       	movw	r24, r14
 358:	b6 01       	movw	r22, r12
 35a:	0e 94 92 04 	call	0x924	; 0x924 <__cmpsf2>
 35e:	88 23       	and	r24, r24
 360:	fc f0       	brlt	.+62     	; 0x3a0 <Play_Sound+0x128>
		__ticks = 1;
	else if (__tmp > 65535)
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	3f ef       	ldi	r19, 0xFF	; 255
 366:	4f e7       	ldi	r20, 0x7F	; 127
 368:	57 e4       	ldi	r21, 0x47	; 71
 36a:	c7 01       	movw	r24, r14
 36c:	b6 01       	movw	r22, r12
 36e:	0e 94 3b 05 	call	0xa76	; 0xa76 <__gesf2>
 372:	18 16       	cp	r1, r24
 374:	c4 f4       	brge	.+48     	; 0x3a6 <Play_Sound+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	40 e2       	ldi	r20, 0x20	; 32
 37c:	51 e4       	ldi	r21, 0x41	; 65
 37e:	c5 01       	movw	r24, r10
 380:	b4 01       	movw	r22, r8
 382:	0e 94 40 05 	call	0xa80	; 0xa80 <__mulsf3>
 386:	0e 94 97 04 	call	0x92e	; 0x92e <__fixunssfsi>
		while(__ticks)
 38a:	61 15       	cp	r22, r1
 38c:	71 05       	cpc	r23, r1
 38e:	a9 f0       	breq	.+42     	; 0x3ba <Play_Sound+0x142>
 390:	80 e9       	ldi	r24, 0x90	; 144
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <Play_Sound+0x11c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 398:	61 50       	subi	r22, 0x01	; 1
 39a:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 39c:	c9 f7       	brne	.-14     	; 0x390 <Play_Sound+0x118>
 39e:	0d c0       	rjmp	.+26     	; 0x3ba <Play_Sound+0x142>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 3a0:	85 2d       	mov	r24, r5
 3a2:	92 2d       	mov	r25, r2
 3a4:	08 c0       	rjmp	.+16     	; 0x3b6 <Play_Sound+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3a6:	84 2d       	mov	r24, r4
 3a8:	93 2d       	mov	r25, r3
 3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <Play_Sound+0x13e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 3ac:	85 2d       	mov	r24, r5
 3ae:	92 2d       	mov	r25, r2
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <Play_Sound+0x13e>
 3b2:	85 2d       	mov	r24, r5
 3b4:	92 2d       	mov	r25, r2
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <Play_Sound+0x13e>
		_delay_ms(frequency);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
 3ba:	2b 98       	cbi	0x05, 3	; 5
 3bc:	0f 5f       	subi	r16, 0xFF	; 255
 3be:	1f 4f       	sbci	r17, 0xFF	; 255
	
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);

	for (i=0;i<cycles;i++)
 3c0:	04 30       	cpi	r16, 0x04	; 4
 3c2:	11 05       	cpc	r17, r1
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <Play_Sound+0x150>
 3c6:	95 cf       	rjmp	.-214    	; 0x2f2 <Play_Sound+0x7a>
 3c8:	23 c0       	rjmp	.+70     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	40 e2       	ldi	r20, 0x20	; 32
 3d0:	51 e4       	ldi	r21, 0x41	; 65
 3d2:	c5 01       	movw	r24, r10
 3d4:	b4 01       	movw	r22, r8
 3d6:	0e 94 40 05 	call	0xa80	; 0xa80 <__mulsf3>
 3da:	0e 94 97 04 	call	0x92e	; 0x92e <__fixunssfsi>
 3de:	d8 cf       	rjmp	.-80     	; 0x390 <Play_Sound+0x118>
	{
		_delay_ms(frequency);
		BUZZER_PORT |= (1 << BUZZER_PIN);
 3e0:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 3e2:	20 e0       	ldi	r18, 0x00	; 0
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	40 e8       	ldi	r20, 0x80	; 128
 3e8:	5f e3       	ldi	r21, 0x3F	; 63
 3ea:	c7 01       	movw	r24, r14
 3ec:	b6 01       	movw	r22, r12
 3ee:	0e 94 92 04 	call	0x924	; 0x924 <__cmpsf2>
 3f2:	88 23       	and	r24, r24
 3f4:	54 f7       	brge	.-44     	; 0x3ca <Play_Sound+0x152>
 3f6:	da cf       	rjmp	.-76     	; 0x3ac <Play_Sound+0x134>
 3f8:	2b 9a       	sbi	0x05, 3	; 5
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	40 e8       	ldi	r20, 0x80	; 128
 400:	5f e3       	ldi	r21, 0x3F	; 63
 402:	c7 01       	movw	r24, r14
 404:	b6 01       	movw	r22, r12
 406:	0e 94 92 04 	call	0x924	; 0x924 <__cmpsf2>
 40a:	88 23       	and	r24, r24
 40c:	b4 f6       	brge	.-84     	; 0x3ba <Play_Sound+0x142>
 40e:	d1 cf       	rjmp	.-94     	; 0x3b2 <Play_Sound+0x13a>
		_delay_ms(frequency);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
	}
}
 410:	0f 90       	pop	r0
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	ff 90       	pop	r15
 41c:	ef 90       	pop	r14
 41e:	df 90       	pop	r13
 420:	cf 90       	pop	r12
 422:	bf 90       	pop	r11
 424:	af 90       	pop	r10
 426:	9f 90       	pop	r9
 428:	8f 90       	pop	r8
 42a:	7f 90       	pop	r7
 42c:	6f 90       	pop	r6
 42e:	5f 90       	pop	r5
 430:	4f 90       	pop	r4
 432:	3f 90       	pop	r3
 434:	2f 90       	pop	r2
 436:	08 95       	ret

00000438 <stop_sound>:


void stop_sound(void)
{
	// Stop sound
	BUZZER_PORT &= ~(1 << BUZZER_PIN);
 438:	2b 98       	cbi	0x05, 3	; 5
 43a:	08 95       	ret

0000043c <main>:
}
int main(void)
{
	
	
	lcd_init();
 43c:	0e 94 89 00 	call	0x112	; 0x112 <lcd_init>
	lcd_clear();
 440:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_clear>
 444:	84 ef       	ldi	r24, 0xF4	; 244
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	20 e9       	ldi	r18, 0x90	; 144
 44a:	31 e0       	ldi	r19, 0x01	; 1
 44c:	f9 01       	movw	r30, r18
 44e:	31 97       	sbiw	r30, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <main+0x12>
 452:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 454:	d9 f7       	brne	.-10     	; 0x44c <main+0x10>
	_delay_ms (50);
	lcd_goto_xy(0, 0);
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
	lcd_write_word("Toy Piano Music!");
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
	lcd_goto_xy(1, 0);
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
	lcd_write_word("Play Piano......");
 46e:	81 e1       	ldi	r24, 0x11	; 17
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
	/* Initialize PORTC and set PC0, PC1, PC2 as output */
	DDRC |= 0b11111111;
 476:	87 b1       	in	r24, 0x07	; 7
 478:	8f ef       	ldi	r24, 0xFF	; 255
 47a:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b11111111;
 47c:	9a b1       	in	r25, 0x0a	; 10
 47e:	8a b9       	out	0x0a, r24	; 10
		/* Read the input value */
		uint8_t switchNo = readInput1();
		uint8_t switchNo2 = readInput2();
		uint8_t switchNo3 = readInput3();
		
		float freq = 0;
 480:	91 2c       	mov	r9, r1
 482:	81 2c       	mov	r8, r1
 484:	71 2c       	mov	r7, r1
 486:	61 2c       	mov	r6, r1
	/* Initialize PORTC and set PC0, PC1, PC2 as output */
	DDRC |= 0b11111111;
	DDRD |= 0b11111111;
	while (1){
		/* Read the input value */
		uint8_t switchNo = readInput1();
 488:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <readInput1>
 48c:	c8 2e       	mov	r12, r24
		uint8_t switchNo2 = readInput2();
 48e:	0e 94 10 01 	call	0x220	; 0x220 <readInput2>
 492:	b8 2e       	mov	r11, r24
		uint8_t switchNo3 = readInput3();
 494:	0e 94 26 01 	call	0x24c	; 0x24c <readInput3>
 498:	a8 2e       	mov	r10, r24
 49a:	c1 e0       	ldi	r28, 0x01	; 1
 49c:	d0 e0       	ldi	r29, 0x00	; 0
		
		float freq = 0;
 49e:	e9 2c       	mov	r14, r9
 4a0:	f8 2c       	mov	r15, r8
 4a2:	07 2d       	mov	r16, r7
 4a4:	16 2d       	mov	r17, r6
		/* Iterate through each bit of switchNo */
		for (int i = 0; i < 8; i++) {
			/* Check if the i-th bit of switchNo is set */
			if (switchNo & (1 << i)) {
 4a6:	d1 2c       	mov	r13, r1
 4a8:	01 c0       	rjmp	.+2      	; 0x4ac <main+0x70>
 4aa:	21 96       	adiw	r28, 0x01	; 1
 4ac:	fe 01       	movw	r30, r28
 4ae:	31 97       	sbiw	r30, 0x01	; 1
 4b0:	c6 01       	movw	r24, r12
 4b2:	0e 2e       	mov	r0, r30
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <main+0x7e>
 4b6:	95 95       	asr	r25
 4b8:	87 95       	ror	r24
 4ba:	0a 94       	dec	r0
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <main+0x7a>
 4be:	80 ff       	sbrs	r24, 0
 4c0:	80 c0       	rjmp	.+256    	; 0x5c2 <main+0x186>
				/* Set frequency based on which button is pressed */
				switch (i) {
 4c2:	e8 30       	cpi	r30, 0x08	; 8
 4c4:	f1 05       	cpc	r31, r1
 4c6:	08 f0       	brcs	.+2      	; 0x4ca <main+0x8e>
 4c8:	7c c0       	rjmp	.+248    	; 0x5c2 <main+0x186>
 4ca:	ec 5c       	subi	r30, 0xCC	; 204
 4cc:	ff 4f       	sbci	r31, 0xFF	; 255
 4ce:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__tablejump2__>
					case 0:freq += F3;break;
 4d2:	2a e6       	ldi	r18, 0x6A	; 106
 4d4:	3d e4       	ldi	r19, 0x4D	; 77
 4d6:	47 e3       	ldi	r20, 0x37	; 55
 4d8:	50 e4       	ldi	r21, 0x40	; 64
 4da:	6e 2d       	mov	r22, r14
 4dc:	7f 2d       	mov	r23, r15
 4de:	80 2f       	mov	r24, r16
 4e0:	91 2f       	mov	r25, r17
 4e2:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 4e6:	e6 2e       	mov	r14, r22
 4e8:	f7 2e       	mov	r15, r23
 4ea:	08 2f       	mov	r16, r24
 4ec:	19 2f       	mov	r17, r25
 4ee:	dd cf       	rjmp	.-70     	; 0x4aa <main+0x6e>
					case 1:freq += Gb3;break;
 4f0:	29 e0       	ldi	r18, 0x09	; 9
 4f2:	39 ef       	ldi	r19, 0xF9	; 249
 4f4:	4c e2       	ldi	r20, 0x2C	; 44
 4f6:	50 e4       	ldi	r21, 0x40	; 64
 4f8:	6e 2d       	mov	r22, r14
 4fa:	7f 2d       	mov	r23, r15
 4fc:	80 2f       	mov	r24, r16
 4fe:	91 2f       	mov	r25, r17
 500:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 504:	e6 2e       	mov	r14, r22
 506:	f7 2e       	mov	r15, r23
 508:	08 2f       	mov	r16, r24
 50a:	19 2f       	mov	r17, r25
 50c:	ce cf       	rjmp	.-100    	; 0x4aa <main+0x6e>
					case 2:freq += G3;break;
 50e:	26 e9       	ldi	r18, 0x96	; 150
 510:	33 e4       	ldi	r19, 0x43	; 67
 512:	43 e2       	ldi	r20, 0x23	; 35
 514:	50 e4       	ldi	r21, 0x40	; 64
 516:	6e 2d       	mov	r22, r14
 518:	7f 2d       	mov	r23, r15
 51a:	80 2f       	mov	r24, r16
 51c:	91 2f       	mov	r25, r17
 51e:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 522:	e6 2e       	mov	r14, r22
 524:	f7 2e       	mov	r15, r23
 526:	08 2f       	mov	r16, r24
 528:	19 2f       	mov	r17, r25
 52a:	bf cf       	rjmp	.-130    	; 0x4aa <main+0x6e>
					case 3:freq += Ab3;break;
 52c:	24 e2       	ldi	r18, 0x24	; 36
 52e:	38 e2       	ldi	r19, 0x28	; 40
 530:	4a e1       	ldi	r20, 0x1A	; 26
 532:	50 e4       	ldi	r21, 0x40	; 64
 534:	6e 2d       	mov	r22, r14
 536:	7f 2d       	mov	r23, r15
 538:	80 2f       	mov	r24, r16
 53a:	91 2f       	mov	r25, r17
 53c:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 540:	e6 2e       	mov	r14, r22
 542:	f7 2e       	mov	r15, r23
 544:	08 2f       	mov	r16, r24
 546:	19 2f       	mov	r17, r25
 548:	b0 cf       	rjmp	.-160    	; 0x4aa <main+0x6e>
					case 4:freq += A3;break;
 54a:	2b ee       	ldi	r18, 0xEB	; 235
 54c:	33 e7       	ldi	r19, 0x73	; 115
 54e:	41 e1       	ldi	r20, 0x11	; 17
 550:	50 e4       	ldi	r21, 0x40	; 64
 552:	6e 2d       	mov	r22, r14
 554:	7f 2d       	mov	r23, r15
 556:	80 2f       	mov	r24, r16
 558:	91 2f       	mov	r25, r17
 55a:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 55e:	e6 2e       	mov	r14, r22
 560:	f7 2e       	mov	r15, r23
 562:	08 2f       	mov	r16, r24
 564:	19 2f       	mov	r17, r25
 566:	a1 cf       	rjmp	.-190    	; 0x4aa <main+0x6e>
					case 5:freq += Bb3;break;
 568:	2b e1       	ldi	r18, 0x1B	; 27
 56a:	3f e2       	ldi	r19, 0x2F	; 47
 56c:	49 e0       	ldi	r20, 0x09	; 9
 56e:	50 e4       	ldi	r21, 0x40	; 64
 570:	6e 2d       	mov	r22, r14
 572:	7f 2d       	mov	r23, r15
 574:	80 2f       	mov	r24, r16
 576:	91 2f       	mov	r25, r17
 578:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 57c:	e6 2e       	mov	r14, r22
 57e:	f7 2e       	mov	r15, r23
 580:	08 2f       	mov	r16, r24
 582:	19 2f       	mov	r17, r25
 584:	92 cf       	rjmp	.-220    	; 0x4aa <main+0x6e>
					case 6:freq += B3;break;
 586:	23 e5       	ldi	r18, 0x53	; 83
 588:	36 e9       	ldi	r19, 0x96	; 150
 58a:	41 e0       	ldi	r20, 0x01	; 1
 58c:	50 e4       	ldi	r21, 0x40	; 64
 58e:	6e 2d       	mov	r22, r14
 590:	7f 2d       	mov	r23, r15
 592:	80 2f       	mov	r24, r16
 594:	91 2f       	mov	r25, r17
 596:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 59a:	e6 2e       	mov	r14, r22
 59c:	f7 2e       	mov	r15, r23
 59e:	08 2f       	mov	r16, r24
 5a0:	19 2f       	mov	r17, r25
 5a2:	83 cf       	rjmp	.-250    	; 0x4aa <main+0x6e>
					case 7:freq += C4;break;
 5a4:	2d e0       	ldi	r18, 0x0D	; 13
 5a6:	31 e7       	ldi	r19, 0x71	; 113
 5a8:	44 ef       	ldi	r20, 0xF4	; 244
 5aa:	5f e3       	ldi	r21, 0x3F	; 63
 5ac:	6e 2d       	mov	r22, r14
 5ae:	7f 2d       	mov	r23, r15
 5b0:	80 2f       	mov	r24, r16
 5b2:	91 2f       	mov	r25, r17
 5b4:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 5b8:	e6 2e       	mov	r14, r22
 5ba:	f7 2e       	mov	r15, r23
 5bc:	08 2f       	mov	r16, r24
 5be:	19 2f       	mov	r17, r25
 5c0:	04 c0       	rjmp	.+8      	; 0x5ca <main+0x18e>
		uint8_t switchNo2 = readInput2();
		uint8_t switchNo3 = readInput3();
		
		float freq = 0;
		/* Iterate through each bit of switchNo */
		for (int i = 0; i < 8; i++) {
 5c2:	c8 30       	cpi	r28, 0x08	; 8
 5c4:	d1 05       	cpc	r29, r1
 5c6:	0c f4       	brge	.+2      	; 0x5ca <main+0x18e>
 5c8:	70 cf       	rjmp	.-288    	; 0x4aa <main+0x6e>
		/* Read the input value */
		uint8_t switchNo = readInput1();
		uint8_t switchNo2 = readInput2();
		uint8_t switchNo3 = readInput3();
		
		float freq = 0;
 5ca:	c1 e0       	ldi	r28, 0x01	; 1
 5cc:	d0 e0       	ldi	r29, 0x00	; 0
		
		
		
		for (int i = 0; i < 8; i++) {
			/* Check if the i-th bit of switchNo is set */
			if (switchNo2 & (1 << i)) {
 5ce:	cb 2c       	mov	r12, r11
 5d0:	d1 2c       	mov	r13, r1
 5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <main+0x19a>
 5d4:	21 96       	adiw	r28, 0x01	; 1
 5d6:	fe 01       	movw	r30, r28
 5d8:	31 97       	sbiw	r30, 0x01	; 1
 5da:	c6 01       	movw	r24, r12
 5dc:	0e 2e       	mov	r0, r30
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <main+0x1a8>
 5e0:	95 95       	asr	r25
 5e2:	87 95       	ror	r24
 5e4:	0a 94       	dec	r0
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <main+0x1a4>
 5e8:	80 ff       	sbrs	r24, 0
 5ea:	80 c0       	rjmp	.+256    	; 0x6ec <main+0x2b0>
				/* Set frequency based on which button is pressed */
				switch (i) {
 5ec:	e8 30       	cpi	r30, 0x08	; 8
 5ee:	f1 05       	cpc	r31, r1
 5f0:	08 f0       	brcs	.+2      	; 0x5f4 <main+0x1b8>
 5f2:	7c c0       	rjmp	.+248    	; 0x6ec <main+0x2b0>
 5f4:	e4 5c       	subi	r30, 0xC4	; 196
 5f6:	ff 4f       	sbci	r31, 0xFF	; 255
 5f8:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__tablejump2__>
					case 0:freq += Db4;break;
 5fc:	2b ec       	ldi	r18, 0xCB	; 203
 5fe:	30 e1       	ldi	r19, 0x10	; 16
 600:	47 ee       	ldi	r20, 0xE7	; 231
 602:	5f e3       	ldi	r21, 0x3F	; 63
 604:	6e 2d       	mov	r22, r14
 606:	7f 2d       	mov	r23, r15
 608:	80 2f       	mov	r24, r16
 60a:	91 2f       	mov	r25, r17
 60c:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 610:	e6 2e       	mov	r14, r22
 612:	f7 2e       	mov	r15, r23
 614:	08 2f       	mov	r16, r24
 616:	19 2f       	mov	r17, r25
 618:	dd cf       	rjmp	.-70     	; 0x5d4 <main+0x198>
					case 1:freq += D4;break;
 61a:	2e e3       	ldi	r18, 0x3E	; 62
 61c:	38 ee       	ldi	r19, 0xE8	; 232
 61e:	49 ed       	ldi	r20, 0xD9	; 217
 620:	5f e3       	ldi	r21, 0x3F	; 63
 622:	6e 2d       	mov	r22, r14
 624:	7f 2d       	mov	r23, r15
 626:	80 2f       	mov	r24, r16
 628:	91 2f       	mov	r25, r17
 62a:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 62e:	e6 2e       	mov	r14, r22
 630:	f7 2e       	mov	r15, r23
 632:	08 2f       	mov	r16, r24
 634:	19 2f       	mov	r17, r25
 636:	ce cf       	rjmp	.-100    	; 0x5d4 <main+0x198>
					case 2:freq += Eb4;break;
 638:	2b ea       	ldi	r18, 0xAB	; 171
 63a:	3f ec       	ldi	r19, 0xCF	; 207
 63c:	4d ec       	ldi	r20, 0xCD	; 205
 63e:	5f e3       	ldi	r21, 0x3F	; 63
 640:	6e 2d       	mov	r22, r14
 642:	7f 2d       	mov	r23, r15
 644:	80 2f       	mov	r24, r16
 646:	91 2f       	mov	r25, r17
 648:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 64c:	e6 2e       	mov	r14, r22
 64e:	f7 2e       	mov	r15, r23
 650:	08 2f       	mov	r16, r24
 652:	19 2f       	mov	r17, r25
 654:	bf cf       	rjmp	.-130    	; 0x5d4 <main+0x198>
					case 3:freq += E4;break;
 656:	2a e1       	ldi	r18, 0x1A	; 26
 658:	31 e5       	ldi	r19, 0x51	; 81
 65a:	42 ec       	ldi	r20, 0xC2	; 194
 65c:	5f e3       	ldi	r21, 0x3F	; 63
 65e:	6e 2d       	mov	r22, r14
 660:	7f 2d       	mov	r23, r15
 662:	80 2f       	mov	r24, r16
 664:	91 2f       	mov	r25, r17
 666:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 66a:	e6 2e       	mov	r14, r22
 66c:	f7 2e       	mov	r15, r23
 66e:	08 2f       	mov	r16, r24
 670:	19 2f       	mov	r17, r25
 672:	b0 cf       	rjmp	.-160    	; 0x5d4 <main+0x198>
					case 4:freq += F4;break;
 674:	2b e9       	ldi	r18, 0x9B	; 155
 676:	35 e5       	ldi	r19, 0x55	; 85
 678:	47 eb       	ldi	r20, 0xB7	; 183
 67a:	5f e3       	ldi	r21, 0x3F	; 63
 67c:	6e 2d       	mov	r22, r14
 67e:	7f 2d       	mov	r23, r15
 680:	80 2f       	mov	r24, r16
 682:	91 2f       	mov	r25, r17
 684:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 688:	e6 2e       	mov	r14, r22
 68a:	f7 2e       	mov	r15, r23
 68c:	08 2f       	mov	r16, r24
 68e:	19 2f       	mov	r17, r25
 690:	a1 cf       	rjmp	.-190    	; 0x5d4 <main+0x198>
					case 5:freq += Gb4;break;
 692:	2d ea       	ldi	r18, 0xAD	; 173
 694:	3a ef       	ldi	r19, 0xFA	; 250
 696:	4c ea       	ldi	r20, 0xAC	; 172
 698:	5f e3       	ldi	r21, 0x3F	; 63
 69a:	6e 2d       	mov	r22, r14
 69c:	7f 2d       	mov	r23, r15
 69e:	80 2f       	mov	r24, r16
 6a0:	91 2f       	mov	r25, r17
 6a2:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 6a6:	e6 2e       	mov	r14, r22
 6a8:	f7 2e       	mov	r15, r23
 6aa:	08 2f       	mov	r16, r24
 6ac:	19 2f       	mov	r17, r25
 6ae:	92 cf       	rjmp	.-220    	; 0x5d4 <main+0x198>
					case 6:freq += G4;break;
 6b0:	26 e9       	ldi	r18, 0x96	; 150
 6b2:	33 e4       	ldi	r19, 0x43	; 67
 6b4:	43 ea       	ldi	r20, 0xA3	; 163
 6b6:	5f e3       	ldi	r21, 0x3F	; 63
 6b8:	6e 2d       	mov	r22, r14
 6ba:	7f 2d       	mov	r23, r15
 6bc:	80 2f       	mov	r24, r16
 6be:	91 2f       	mov	r25, r17
 6c0:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 6c4:	e6 2e       	mov	r14, r22
 6c6:	f7 2e       	mov	r15, r23
 6c8:	08 2f       	mov	r16, r24
 6ca:	19 2f       	mov	r17, r25
 6cc:	83 cf       	rjmp	.-250    	; 0x5d4 <main+0x198>
					case 7:freq += Ab4;break;
 6ce:	21 e9       	ldi	r18, 0x91	; 145
 6d0:	3f e0       	ldi	r19, 0x0F	; 15
 6d2:	4a e9       	ldi	r20, 0x9A	; 154
 6d4:	5f e3       	ldi	r21, 0x3F	; 63
 6d6:	6e 2d       	mov	r22, r14
 6d8:	7f 2d       	mov	r23, r15
 6da:	80 2f       	mov	r24, r16
 6dc:	91 2f       	mov	r25, r17
 6de:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 6e2:	e6 2e       	mov	r14, r22
 6e4:	f7 2e       	mov	r15, r23
 6e6:	08 2f       	mov	r16, r24
 6e8:	19 2f       	mov	r17, r25
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <main+0x2b8>
			}
		}
		
		
		
		for (int i = 0; i < 8; i++) {
 6ec:	c8 30       	cpi	r28, 0x08	; 8
 6ee:	d1 05       	cpc	r29, r1
 6f0:	0c f4       	brge	.+2      	; 0x6f4 <main+0x2b8>
 6f2:	70 cf       	rjmp	.-288    	; 0x5d4 <main+0x198>
		/* Read the input value */
		uint8_t switchNo = readInput1();
		uint8_t switchNo2 = readInput2();
		uint8_t switchNo3 = readInput3();
		
		float freq = 0;
 6f4:	c1 e0       	ldi	r28, 0x01	; 1
 6f6:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		
		for (int i = 0; i < 8; i++) {
			/* Check if the i-th bit of switchNo is set */
			if (switchNo3 & (1 << i)) {
 6f8:	ca 2c       	mov	r12, r10
 6fa:	d1 2c       	mov	r13, r1
 6fc:	01 c0       	rjmp	.+2      	; 0x700 <main+0x2c4>
 6fe:	21 96       	adiw	r28, 0x01	; 1
 700:	fe 01       	movw	r30, r28
 702:	31 97       	sbiw	r30, 0x01	; 1
 704:	c6 01       	movw	r24, r12
 706:	0e 2e       	mov	r0, r30
 708:	02 c0       	rjmp	.+4      	; 0x70e <main+0x2d2>
 70a:	95 95       	asr	r25
 70c:	87 95       	ror	r24
 70e:	0a 94       	dec	r0
 710:	e2 f7       	brpl	.-8      	; 0x70a <main+0x2ce>
 712:	80 ff       	sbrs	r24, 0
 714:	80 c0       	rjmp	.+256    	; 0x816 <main+0x3da>
				/* Set frequency based on which button is pressed */
				switch (i) {
 716:	e8 30       	cpi	r30, 0x08	; 8
 718:	f1 05       	cpc	r31, r1
 71a:	08 f0       	brcs	.+2      	; 0x71e <main+0x2e2>
 71c:	7c c0       	rjmp	.+248    	; 0x816 <main+0x3da>
 71e:	ec 5b       	subi	r30, 0xBC	; 188
 720:	ff 4f       	sbci	r31, 0xFF	; 255
 722:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__tablejump2__>
					case 0:freq += A4;break;
 726:	2e e8       	ldi	r18, 0x8E	; 142
 728:	35 e7       	ldi	r19, 0x75	; 117
 72a:	41 e9       	ldi	r20, 0x91	; 145
 72c:	5f e3       	ldi	r21, 0x3F	; 63
 72e:	6e 2d       	mov	r22, r14
 730:	7f 2d       	mov	r23, r15
 732:	80 2f       	mov	r24, r16
 734:	91 2f       	mov	r25, r17
 736:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 73a:	e6 2e       	mov	r14, r22
 73c:	f7 2e       	mov	r15, r23
 73e:	08 2f       	mov	r16, r24
 740:	19 2f       	mov	r17, r25
 742:	dd cf       	rjmp	.-70     	; 0x6fe <main+0x2c2>
					case 1:freq += Bb4;break;
 744:	27 e6       	ldi	r18, 0x67	; 103
 746:	34 e4       	ldi	r19, 0x44	; 68
 748:	49 e8       	ldi	r20, 0x89	; 137
 74a:	5f e3       	ldi	r21, 0x3F	; 63
 74c:	6e 2d       	mov	r22, r14
 74e:	7f 2d       	mov	r23, r15
 750:	80 2f       	mov	r24, r16
 752:	91 2f       	mov	r25, r17
 754:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 758:	e6 2e       	mov	r14, r22
 75a:	f7 2e       	mov	r15, r23
 75c:	08 2f       	mov	r16, r24
 75e:	19 2f       	mov	r17, r25
 760:	ce cf       	rjmp	.-100    	; 0x6fe <main+0x2c2>
					case 2:freq += B4;break;
 762:	20 ee       	ldi	r18, 0xE0	; 224
 764:	3c e9       	ldi	r19, 0x9C	; 156
 766:	41 e8       	ldi	r20, 0x81	; 129
 768:	5f e3       	ldi	r21, 0x3F	; 63
 76a:	6e 2d       	mov	r22, r14
 76c:	7f 2d       	mov	r23, r15
 76e:	80 2f       	mov	r24, r16
 770:	91 2f       	mov	r25, r17
 772:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 776:	e6 2e       	mov	r14, r22
 778:	f7 2e       	mov	r15, r23
 77a:	08 2f       	mov	r16, r24
 77c:	19 2f       	mov	r17, r25
 77e:	bf cf       	rjmp	.-130    	; 0x6fe <main+0x2c2>
					case 3:freq += C5;break;
 780:	27 ee       	ldi	r18, 0xE7	; 231
 782:	3d e1       	ldi	r19, 0x1D	; 29
 784:	47 e6       	ldi	r20, 0x67	; 103
 786:	5f e3       	ldi	r21, 0x3F	; 63
 788:	6e 2d       	mov	r22, r14
 78a:	7f 2d       	mov	r23, r15
 78c:	80 2f       	mov	r24, r16
 78e:	91 2f       	mov	r25, r17
 790:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 794:	e6 2e       	mov	r14, r22
 796:	f7 2e       	mov	r15, r23
 798:	08 2f       	mov	r16, r24
 79a:	19 2f       	mov	r17, r25
 79c:	b0 cf       	rjmp	.-160    	; 0x6fe <main+0x2c2>
					case 4:freq += Db5;break;
 79e:	2a e5       	ldi	r18, 0x5A	; 90
 7a0:	35 ef       	ldi	r19, 0xF5	; 245
 7a2:	49 e5       	ldi	r20, 0x59	; 89
 7a4:	5f e3       	ldi	r21, 0x3F	; 63
 7a6:	6e 2d       	mov	r22, r14
 7a8:	7f 2d       	mov	r23, r15
 7aa:	80 2f       	mov	r24, r16
 7ac:	91 2f       	mov	r25, r17
 7ae:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 7b2:	e6 2e       	mov	r14, r22
 7b4:	f7 2e       	mov	r15, r23
 7b6:	08 2f       	mov	r16, r24
 7b8:	19 2f       	mov	r17, r25
 7ba:	a1 cf       	rjmp	.-190    	; 0x6fe <main+0x2c2>
					case 5:freq += D5;break;
 7bc:	28 e4       	ldi	r18, 0x48	; 72
 7be:	3f eb       	ldi	r19, 0xBF	; 191
 7c0:	4d e4       	ldi	r20, 0x4D	; 77
 7c2:	5f e3       	ldi	r21, 0x3F	; 63
 7c4:	6e 2d       	mov	r22, r14
 7c6:	7f 2d       	mov	r23, r15
 7c8:	80 2f       	mov	r24, r16
 7ca:	91 2f       	mov	r25, r17
 7cc:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 7d0:	e6 2e       	mov	r14, r22
 7d2:	f7 2e       	mov	r15, r23
 7d4:	08 2f       	mov	r16, r24
 7d6:	19 2f       	mov	r17, r25
 7d8:	92 cf       	rjmp	.-220    	; 0x6fe <main+0x2c2>
					case 6:freq += Eb5;break;
 7da:	25 e4       	ldi	r18, 0x45	; 69
 7dc:	37 e4       	ldi	r19, 0x47	; 71
 7de:	42 e4       	ldi	r20, 0x42	; 66
 7e0:	5f e3       	ldi	r21, 0x3F	; 63
 7e2:	6e 2d       	mov	r22, r14
 7e4:	7f 2d       	mov	r23, r15
 7e6:	80 2f       	mov	r24, r16
 7e8:	91 2f       	mov	r25, r17
 7ea:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 7ee:	e6 2e       	mov	r14, r22
 7f0:	f7 2e       	mov	r15, r23
 7f2:	08 2f       	mov	r16, r24
 7f4:	19 2f       	mov	r17, r25
 7f6:	83 cf       	rjmp	.-250    	; 0x6fe <main+0x2c2>
					case 7:freq += E5;break;
 7f8:	20 e7       	ldi	r18, 0x70	; 112
 7fa:	3f e5       	ldi	r19, 0x5F	; 95
 7fc:	47 e3       	ldi	r20, 0x37	; 55
 7fe:	5f e3       	ldi	r21, 0x3F	; 63
 800:	6e 2d       	mov	r22, r14
 802:	7f 2d       	mov	r23, r15
 804:	80 2f       	mov	r24, r16
 806:	91 2f       	mov	r25, r17
 808:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3>
 80c:	e6 2e       	mov	r14, r22
 80e:	f7 2e       	mov	r15, r23
 810:	08 2f       	mov	r16, r24
 812:	19 2f       	mov	r17, r25
 814:	04 c0       	rjmp	.+8      	; 0x81e <main+0x3e2>
				}
			}
		}
		
		
		for (int i = 0; i < 8; i++) {
 816:	c8 30       	cpi	r28, 0x08	; 8
 818:	d1 05       	cpc	r29, r1
 81a:	0c f4       	brge	.+2      	; 0x81e <main+0x3e2>
 81c:	70 cf       	rjmp	.-288    	; 0x6fe <main+0x2c2>
					break;
				}
			}
		}
		
		if (freq > 0) {
 81e:	29 2d       	mov	r18, r9
 820:	38 2d       	mov	r19, r8
 822:	47 2d       	mov	r20, r7
 824:	56 2d       	mov	r21, r6
 826:	6e 2d       	mov	r22, r14
 828:	7f 2d       	mov	r23, r15
 82a:	80 2f       	mov	r24, r16
 82c:	91 2f       	mov	r25, r17
 82e:	0e 94 3b 05 	call	0xa76	; 0xa76 <__gesf2>
 832:	18 16       	cp	r1, r24
 834:	3c f4       	brge	.+14     	; 0x844 <main+0x408>
			Play_Sound(freq);
 836:	6e 2d       	mov	r22, r14
 838:	7f 2d       	mov	r23, r15
 83a:	80 2f       	mov	r24, r16
 83c:	91 2f       	mov	r25, r17
 83e:	0e 94 3c 01 	call	0x278	; 0x278 <Play_Sound>
 842:	22 ce       	rjmp	.-956    	; 0x488 <main+0x4c>
			}else{
			stop_sound();
 844:	0e 94 1c 02 	call	0x438	; 0x438 <stop_sound>
 848:	1f ce       	rjmp	.-962    	; 0x488 <main+0x4c>

0000084a <__subsf3>:
 84a:	50 58       	subi	r21, 0x80	; 128

0000084c <__addsf3>:
 84c:	bb 27       	eor	r27, r27
 84e:	aa 27       	eor	r26, r26
 850:	0e 94 3d 04 	call	0x87a	; 0x87a <__addsf3x>
 854:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_round>
 858:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__fp_pscA>
 85c:	38 f0       	brcs	.+14     	; 0x86c <__addsf3+0x20>
 85e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__fp_pscB>
 862:	20 f0       	brcs	.+8      	; 0x86c <__addsf3+0x20>
 864:	39 f4       	brne	.+14     	; 0x874 <__addsf3+0x28>
 866:	9f 3f       	cpi	r25, 0xFF	; 255
 868:	19 f4       	brne	.+6      	; 0x870 <__addsf3+0x24>
 86a:	26 f4       	brtc	.+8      	; 0x874 <__addsf3+0x28>
 86c:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_nan>
 870:	0e f4       	brtc	.+2      	; 0x874 <__addsf3+0x28>
 872:	e0 95       	com	r30
 874:	e7 fb       	bst	r30, 7
 876:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_inf>

0000087a <__addsf3x>:
 87a:	e9 2f       	mov	r30, r25
 87c:	0e 94 12 05 	call	0xa24	; 0xa24 <__fp_split3>
 880:	58 f3       	brcs	.-42     	; 0x858 <__addsf3+0xc>
 882:	ba 17       	cp	r27, r26
 884:	62 07       	cpc	r22, r18
 886:	73 07       	cpc	r23, r19
 888:	84 07       	cpc	r24, r20
 88a:	95 07       	cpc	r25, r21
 88c:	20 f0       	brcs	.+8      	; 0x896 <__addsf3x+0x1c>
 88e:	79 f4       	brne	.+30     	; 0x8ae <__addsf3x+0x34>
 890:	a6 f5       	brtc	.+104    	; 0x8fa <__addsf3x+0x80>
 892:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_zero>
 896:	0e f4       	brtc	.+2      	; 0x89a <__addsf3x+0x20>
 898:	e0 95       	com	r30
 89a:	0b 2e       	mov	r0, r27
 89c:	ba 2f       	mov	r27, r26
 89e:	a0 2d       	mov	r26, r0
 8a0:	0b 01       	movw	r0, r22
 8a2:	b9 01       	movw	r22, r18
 8a4:	90 01       	movw	r18, r0
 8a6:	0c 01       	movw	r0, r24
 8a8:	ca 01       	movw	r24, r20
 8aa:	a0 01       	movw	r20, r0
 8ac:	11 24       	eor	r1, r1
 8ae:	ff 27       	eor	r31, r31
 8b0:	59 1b       	sub	r21, r25
 8b2:	99 f0       	breq	.+38     	; 0x8da <__addsf3x+0x60>
 8b4:	59 3f       	cpi	r21, 0xF9	; 249
 8b6:	50 f4       	brcc	.+20     	; 0x8cc <__addsf3x+0x52>
 8b8:	50 3e       	cpi	r21, 0xE0	; 224
 8ba:	68 f1       	brcs	.+90     	; 0x916 <__stack+0x17>
 8bc:	1a 16       	cp	r1, r26
 8be:	f0 40       	sbci	r31, 0x00	; 0
 8c0:	a2 2f       	mov	r26, r18
 8c2:	23 2f       	mov	r18, r19
 8c4:	34 2f       	mov	r19, r20
 8c6:	44 27       	eor	r20, r20
 8c8:	58 5f       	subi	r21, 0xF8	; 248
 8ca:	f3 cf       	rjmp	.-26     	; 0x8b2 <__addsf3x+0x38>
 8cc:	46 95       	lsr	r20
 8ce:	37 95       	ror	r19
 8d0:	27 95       	ror	r18
 8d2:	a7 95       	ror	r26
 8d4:	f0 40       	sbci	r31, 0x00	; 0
 8d6:	53 95       	inc	r21
 8d8:	c9 f7       	brne	.-14     	; 0x8cc <__addsf3x+0x52>
 8da:	7e f4       	brtc	.+30     	; 0x8fa <__addsf3x+0x80>
 8dc:	1f 16       	cp	r1, r31
 8de:	ba 0b       	sbc	r27, r26
 8e0:	62 0b       	sbc	r22, r18
 8e2:	73 0b       	sbc	r23, r19
 8e4:	84 0b       	sbc	r24, r20
 8e6:	ba f0       	brmi	.+46     	; 0x916 <__stack+0x17>
 8e8:	91 50       	subi	r25, 0x01	; 1
 8ea:	a1 f0       	breq	.+40     	; 0x914 <__stack+0x15>
 8ec:	ff 0f       	add	r31, r31
 8ee:	bb 1f       	adc	r27, r27
 8f0:	66 1f       	adc	r22, r22
 8f2:	77 1f       	adc	r23, r23
 8f4:	88 1f       	adc	r24, r24
 8f6:	c2 f7       	brpl	.-16     	; 0x8e8 <__addsf3x+0x6e>
 8f8:	0e c0       	rjmp	.+28     	; 0x916 <__stack+0x17>
 8fa:	ba 0f       	add	r27, r26
 8fc:	62 1f       	adc	r22, r18
 8fe:	73 1f       	adc	r23, r19
 900:	84 1f       	adc	r24, r20
 902:	48 f4       	brcc	.+18     	; 0x916 <__stack+0x17>
 904:	87 95       	ror	r24
 906:	77 95       	ror	r23
 908:	67 95       	ror	r22
 90a:	b7 95       	ror	r27
 90c:	f7 95       	ror	r31
 90e:	9e 3f       	cpi	r25, 0xFE	; 254
 910:	08 f0       	brcs	.+2      	; 0x914 <__stack+0x15>
 912:	b0 cf       	rjmp	.-160    	; 0x874 <__addsf3+0x28>
 914:	93 95       	inc	r25
 916:	88 0f       	add	r24, r24
 918:	08 f0       	brcs	.+2      	; 0x91c <__stack+0x1d>
 91a:	99 27       	eor	r25, r25
 91c:	ee 0f       	add	r30, r30
 91e:	97 95       	ror	r25
 920:	87 95       	ror	r24
 922:	08 95       	ret

00000924 <__cmpsf2>:
 924:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_cmp>
 928:	08 f4       	brcc	.+2      	; 0x92c <__cmpsf2+0x8>
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	08 95       	ret

0000092e <__fixunssfsi>:
 92e:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fp_splitA>
 932:	88 f0       	brcs	.+34     	; 0x956 <__fixunssfsi+0x28>
 934:	9f 57       	subi	r25, 0x7F	; 127
 936:	98 f0       	brcs	.+38     	; 0x95e <__fixunssfsi+0x30>
 938:	b9 2f       	mov	r27, r25
 93a:	99 27       	eor	r25, r25
 93c:	b7 51       	subi	r27, 0x17	; 23
 93e:	b0 f0       	brcs	.+44     	; 0x96c <__fixunssfsi+0x3e>
 940:	e1 f0       	breq	.+56     	; 0x97a <__fixunssfsi+0x4c>
 942:	66 0f       	add	r22, r22
 944:	77 1f       	adc	r23, r23
 946:	88 1f       	adc	r24, r24
 948:	99 1f       	adc	r25, r25
 94a:	1a f0       	brmi	.+6      	; 0x952 <__fixunssfsi+0x24>
 94c:	ba 95       	dec	r27
 94e:	c9 f7       	brne	.-14     	; 0x942 <__fixunssfsi+0x14>
 950:	14 c0       	rjmp	.+40     	; 0x97a <__fixunssfsi+0x4c>
 952:	b1 30       	cpi	r27, 0x01	; 1
 954:	91 f0       	breq	.+36     	; 0x97a <__fixunssfsi+0x4c>
 956:	0e 94 34 05 	call	0xa68	; 0xa68 <__fp_zero>
 95a:	b1 e0       	ldi	r27, 0x01	; 1
 95c:	08 95       	ret
 95e:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_zero>
 962:	67 2f       	mov	r22, r23
 964:	78 2f       	mov	r23, r24
 966:	88 27       	eor	r24, r24
 968:	b8 5f       	subi	r27, 0xF8	; 248
 96a:	39 f0       	breq	.+14     	; 0x97a <__fixunssfsi+0x4c>
 96c:	b9 3f       	cpi	r27, 0xF9	; 249
 96e:	cc f3       	brlt	.-14     	; 0x962 <__fixunssfsi+0x34>
 970:	86 95       	lsr	r24
 972:	77 95       	ror	r23
 974:	67 95       	ror	r22
 976:	b3 95       	inc	r27
 978:	d9 f7       	brne	.-10     	; 0x970 <__fixunssfsi+0x42>
 97a:	3e f4       	brtc	.+14     	; 0x98a <__fixunssfsi+0x5c>
 97c:	90 95       	com	r25
 97e:	80 95       	com	r24
 980:	70 95       	com	r23
 982:	61 95       	neg	r22
 984:	7f 4f       	sbci	r23, 0xFF	; 255
 986:	8f 4f       	sbci	r24, 0xFF	; 255
 988:	9f 4f       	sbci	r25, 0xFF	; 255
 98a:	08 95       	ret

0000098c <__fp_cmp>:
 98c:	99 0f       	add	r25, r25
 98e:	00 08       	sbc	r0, r0
 990:	55 0f       	add	r21, r21
 992:	aa 0b       	sbc	r26, r26
 994:	e0 e8       	ldi	r30, 0x80	; 128
 996:	fe ef       	ldi	r31, 0xFE	; 254
 998:	16 16       	cp	r1, r22
 99a:	17 06       	cpc	r1, r23
 99c:	e8 07       	cpc	r30, r24
 99e:	f9 07       	cpc	r31, r25
 9a0:	c0 f0       	brcs	.+48     	; 0x9d2 <__fp_cmp+0x46>
 9a2:	12 16       	cp	r1, r18
 9a4:	13 06       	cpc	r1, r19
 9a6:	e4 07       	cpc	r30, r20
 9a8:	f5 07       	cpc	r31, r21
 9aa:	98 f0       	brcs	.+38     	; 0x9d2 <__fp_cmp+0x46>
 9ac:	62 1b       	sub	r22, r18
 9ae:	73 0b       	sbc	r23, r19
 9b0:	84 0b       	sbc	r24, r20
 9b2:	95 0b       	sbc	r25, r21
 9b4:	39 f4       	brne	.+14     	; 0x9c4 <__fp_cmp+0x38>
 9b6:	0a 26       	eor	r0, r26
 9b8:	61 f0       	breq	.+24     	; 0x9d2 <__fp_cmp+0x46>
 9ba:	23 2b       	or	r18, r19
 9bc:	24 2b       	or	r18, r20
 9be:	25 2b       	or	r18, r21
 9c0:	21 f4       	brne	.+8      	; 0x9ca <__fp_cmp+0x3e>
 9c2:	08 95       	ret
 9c4:	0a 26       	eor	r0, r26
 9c6:	09 f4       	brne	.+2      	; 0x9ca <__fp_cmp+0x3e>
 9c8:	a1 40       	sbci	r26, 0x01	; 1
 9ca:	a6 95       	lsr	r26
 9cc:	8f ef       	ldi	r24, 0xFF	; 255
 9ce:	81 1d       	adc	r24, r1
 9d0:	81 1d       	adc	r24, r1
 9d2:	08 95       	ret

000009d4 <__fp_inf>:
 9d4:	97 f9       	bld	r25, 7
 9d6:	9f 67       	ori	r25, 0x7F	; 127
 9d8:	80 e8       	ldi	r24, 0x80	; 128
 9da:	70 e0       	ldi	r23, 0x00	; 0
 9dc:	60 e0       	ldi	r22, 0x00	; 0
 9de:	08 95       	ret

000009e0 <__fp_nan>:
 9e0:	9f ef       	ldi	r25, 0xFF	; 255
 9e2:	80 ec       	ldi	r24, 0xC0	; 192
 9e4:	08 95       	ret

000009e6 <__fp_pscA>:
 9e6:	00 24       	eor	r0, r0
 9e8:	0a 94       	dec	r0
 9ea:	16 16       	cp	r1, r22
 9ec:	17 06       	cpc	r1, r23
 9ee:	18 06       	cpc	r1, r24
 9f0:	09 06       	cpc	r0, r25
 9f2:	08 95       	ret

000009f4 <__fp_pscB>:
 9f4:	00 24       	eor	r0, r0
 9f6:	0a 94       	dec	r0
 9f8:	12 16       	cp	r1, r18
 9fa:	13 06       	cpc	r1, r19
 9fc:	14 06       	cpc	r1, r20
 9fe:	05 06       	cpc	r0, r21
 a00:	08 95       	ret

00000a02 <__fp_round>:
 a02:	09 2e       	mov	r0, r25
 a04:	03 94       	inc	r0
 a06:	00 0c       	add	r0, r0
 a08:	11 f4       	brne	.+4      	; 0xa0e <__fp_round+0xc>
 a0a:	88 23       	and	r24, r24
 a0c:	52 f0       	brmi	.+20     	; 0xa22 <__fp_round+0x20>
 a0e:	bb 0f       	add	r27, r27
 a10:	40 f4       	brcc	.+16     	; 0xa22 <__fp_round+0x20>
 a12:	bf 2b       	or	r27, r31
 a14:	11 f4       	brne	.+4      	; 0xa1a <__fp_round+0x18>
 a16:	60 ff       	sbrs	r22, 0
 a18:	04 c0       	rjmp	.+8      	; 0xa22 <__fp_round+0x20>
 a1a:	6f 5f       	subi	r22, 0xFF	; 255
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	08 95       	ret

00000a24 <__fp_split3>:
 a24:	57 fd       	sbrc	r21, 7
 a26:	90 58       	subi	r25, 0x80	; 128
 a28:	44 0f       	add	r20, r20
 a2a:	55 1f       	adc	r21, r21
 a2c:	59 f0       	breq	.+22     	; 0xa44 <__fp_splitA+0x10>
 a2e:	5f 3f       	cpi	r21, 0xFF	; 255
 a30:	71 f0       	breq	.+28     	; 0xa4e <__fp_splitA+0x1a>
 a32:	47 95       	ror	r20

00000a34 <__fp_splitA>:
 a34:	88 0f       	add	r24, r24
 a36:	97 fb       	bst	r25, 7
 a38:	99 1f       	adc	r25, r25
 a3a:	61 f0       	breq	.+24     	; 0xa54 <__fp_splitA+0x20>
 a3c:	9f 3f       	cpi	r25, 0xFF	; 255
 a3e:	79 f0       	breq	.+30     	; 0xa5e <__fp_splitA+0x2a>
 a40:	87 95       	ror	r24
 a42:	08 95       	ret
 a44:	12 16       	cp	r1, r18
 a46:	13 06       	cpc	r1, r19
 a48:	14 06       	cpc	r1, r20
 a4a:	55 1f       	adc	r21, r21
 a4c:	f2 cf       	rjmp	.-28     	; 0xa32 <__fp_split3+0xe>
 a4e:	46 95       	lsr	r20
 a50:	f1 df       	rcall	.-30     	; 0xa34 <__fp_splitA>
 a52:	08 c0       	rjmp	.+16     	; 0xa64 <__fp_splitA+0x30>
 a54:	16 16       	cp	r1, r22
 a56:	17 06       	cpc	r1, r23
 a58:	18 06       	cpc	r1, r24
 a5a:	99 1f       	adc	r25, r25
 a5c:	f1 cf       	rjmp	.-30     	; 0xa40 <__fp_splitA+0xc>
 a5e:	86 95       	lsr	r24
 a60:	71 05       	cpc	r23, r1
 a62:	61 05       	cpc	r22, r1
 a64:	08 94       	sec
 a66:	08 95       	ret

00000a68 <__fp_zero>:
 a68:	e8 94       	clt

00000a6a <__fp_szero>:
 a6a:	bb 27       	eor	r27, r27
 a6c:	66 27       	eor	r22, r22
 a6e:	77 27       	eor	r23, r23
 a70:	cb 01       	movw	r24, r22
 a72:	97 f9       	bld	r25, 7
 a74:	08 95       	ret

00000a76 <__gesf2>:
 a76:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_cmp>
 a7a:	08 f4       	brcc	.+2      	; 0xa7e <__gesf2+0x8>
 a7c:	8f ef       	ldi	r24, 0xFF	; 255
 a7e:	08 95       	ret

00000a80 <__mulsf3>:
 a80:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__mulsf3x>
 a84:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_round>
 a88:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__fp_pscA>
 a8c:	38 f0       	brcs	.+14     	; 0xa9c <__mulsf3+0x1c>
 a8e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__fp_pscB>
 a92:	20 f0       	brcs	.+8      	; 0xa9c <__mulsf3+0x1c>
 a94:	95 23       	and	r25, r21
 a96:	11 f0       	breq	.+4      	; 0xa9c <__mulsf3+0x1c>
 a98:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_inf>
 a9c:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_nan>
 aa0:	11 24       	eor	r1, r1
 aa2:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__fp_szero>

00000aa6 <__mulsf3x>:
 aa6:	0e 94 12 05 	call	0xa24	; 0xa24 <__fp_split3>
 aaa:	70 f3       	brcs	.-36     	; 0xa88 <__mulsf3+0x8>

00000aac <__mulsf3_pse>:
 aac:	95 9f       	mul	r25, r21
 aae:	c1 f3       	breq	.-16     	; 0xaa0 <__mulsf3+0x20>
 ab0:	95 0f       	add	r25, r21
 ab2:	50 e0       	ldi	r21, 0x00	; 0
 ab4:	55 1f       	adc	r21, r21
 ab6:	62 9f       	mul	r22, r18
 ab8:	f0 01       	movw	r30, r0
 aba:	72 9f       	mul	r23, r18
 abc:	bb 27       	eor	r27, r27
 abe:	f0 0d       	add	r31, r0
 ac0:	b1 1d       	adc	r27, r1
 ac2:	63 9f       	mul	r22, r19
 ac4:	aa 27       	eor	r26, r26
 ac6:	f0 0d       	add	r31, r0
 ac8:	b1 1d       	adc	r27, r1
 aca:	aa 1f       	adc	r26, r26
 acc:	64 9f       	mul	r22, r20
 ace:	66 27       	eor	r22, r22
 ad0:	b0 0d       	add	r27, r0
 ad2:	a1 1d       	adc	r26, r1
 ad4:	66 1f       	adc	r22, r22
 ad6:	82 9f       	mul	r24, r18
 ad8:	22 27       	eor	r18, r18
 ada:	b0 0d       	add	r27, r0
 adc:	a1 1d       	adc	r26, r1
 ade:	62 1f       	adc	r22, r18
 ae0:	73 9f       	mul	r23, r19
 ae2:	b0 0d       	add	r27, r0
 ae4:	a1 1d       	adc	r26, r1
 ae6:	62 1f       	adc	r22, r18
 ae8:	83 9f       	mul	r24, r19
 aea:	a0 0d       	add	r26, r0
 aec:	61 1d       	adc	r22, r1
 aee:	22 1f       	adc	r18, r18
 af0:	74 9f       	mul	r23, r20
 af2:	33 27       	eor	r19, r19
 af4:	a0 0d       	add	r26, r0
 af6:	61 1d       	adc	r22, r1
 af8:	23 1f       	adc	r18, r19
 afa:	84 9f       	mul	r24, r20
 afc:	60 0d       	add	r22, r0
 afe:	21 1d       	adc	r18, r1
 b00:	82 2f       	mov	r24, r18
 b02:	76 2f       	mov	r23, r22
 b04:	6a 2f       	mov	r22, r26
 b06:	11 24       	eor	r1, r1
 b08:	9f 57       	subi	r25, 0x7F	; 127
 b0a:	50 40       	sbci	r21, 0x00	; 0
 b0c:	9a f0       	brmi	.+38     	; 0xb34 <__mulsf3_pse+0x88>
 b0e:	f1 f0       	breq	.+60     	; 0xb4c <__mulsf3_pse+0xa0>
 b10:	88 23       	and	r24, r24
 b12:	4a f0       	brmi	.+18     	; 0xb26 <__mulsf3_pse+0x7a>
 b14:	ee 0f       	add	r30, r30
 b16:	ff 1f       	adc	r31, r31
 b18:	bb 1f       	adc	r27, r27
 b1a:	66 1f       	adc	r22, r22
 b1c:	77 1f       	adc	r23, r23
 b1e:	88 1f       	adc	r24, r24
 b20:	91 50       	subi	r25, 0x01	; 1
 b22:	50 40       	sbci	r21, 0x00	; 0
 b24:	a9 f7       	brne	.-22     	; 0xb10 <__mulsf3_pse+0x64>
 b26:	9e 3f       	cpi	r25, 0xFE	; 254
 b28:	51 05       	cpc	r21, r1
 b2a:	80 f0       	brcs	.+32     	; 0xb4c <__mulsf3_pse+0xa0>
 b2c:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_inf>
 b30:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__fp_szero>
 b34:	5f 3f       	cpi	r21, 0xFF	; 255
 b36:	e4 f3       	brlt	.-8      	; 0xb30 <__mulsf3_pse+0x84>
 b38:	98 3e       	cpi	r25, 0xE8	; 232
 b3a:	d4 f3       	brlt	.-12     	; 0xb30 <__mulsf3_pse+0x84>
 b3c:	86 95       	lsr	r24
 b3e:	77 95       	ror	r23
 b40:	67 95       	ror	r22
 b42:	b7 95       	ror	r27
 b44:	f7 95       	ror	r31
 b46:	e7 95       	ror	r30
 b48:	9f 5f       	subi	r25, 0xFF	; 255
 b4a:	c1 f7       	brne	.-16     	; 0xb3c <__mulsf3_pse+0x90>
 b4c:	fe 2b       	or	r31, r30
 b4e:	88 0f       	add	r24, r24
 b50:	91 1d       	adc	r25, r1
 b52:	96 95       	lsr	r25
 b54:	87 95       	ror	r24
 b56:	97 f9       	bld	r25, 7
 b58:	08 95       	ret

00000b5a <__tablejump2__>:
 b5a:	ee 0f       	add	r30, r30
 b5c:	ff 1f       	adc	r31, r31
 b5e:	05 90       	lpm	r0, Z+
 b60:	f4 91       	lpm	r31, Z
 b62:	e0 2d       	mov	r30, r0
 b64:	09 94       	ijmp

00000b66 <_exit>:
 b66:	f8 94       	cli

00000b68 <__stop_program>:
 b68:	ff cf       	rjmp	.-2      	; 0xb68 <__stop_program>
