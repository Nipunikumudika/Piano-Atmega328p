
piano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  000011da  0000124e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001771  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000987  00000000  00000000  00002b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d39  00000000  00000000  000034ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a8  00000000  00000000  000041e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000054b  00000000  00000000  00004490  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001712  00000000  00000000  000049db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  000060ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__vector_1>
       8:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__vector_2>
       c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      68:	1b 05       	cpc	r17, r11
      6a:	22 05       	cpc	r18, r2
      6c:	29 05       	cpc	r18, r9
      6e:	30 05       	cpc	r19, r0
      70:	37 05       	cpc	r19, r7
      72:	3e 05       	cpc	r19, r14
      74:	45 05       	cpc	r20, r5
      76:	4c 05       	cpc	r20, r12
      78:	6e 05       	cpc	r22, r14
      7a:	75 05       	cpc	r23, r5
      7c:	7c 05       	cpc	r23, r12
      7e:	83 05       	cpc	r24, r3
      80:	8a 05       	cpc	r24, r10
      82:	91 05       	cpc	r25, r1
      84:	98 05       	cpc	r25, r8
      86:	9f 05       	cpc	r25, r15
      88:	c2 05       	cpc	r28, r2
      8a:	c9 05       	cpc	r28, r9
      8c:	d0 05       	cpc	r29, r0
      8e:	d7 05       	cpc	r29, r7
      90:	de 05       	cpc	r29, r14
      92:	e5 05       	cpc	r30, r5
      94:	ec 05       	cpc	r30, r12
      96:	f3 05       	cpc	r31, r3

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ea ed       	ldi	r30, 0xDA	; 218
      ac:	f1 e1       	ldi	r31, 0x11	; 17
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a6 34       	cpi	r26, 0x46	; 70
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>
      ba:	0e 94 79 06 	call	0xcf2	; 0xcf2 <main>
      be:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <_exit>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <lcd_send_command>:
	
}

void lcd_send_command (uint8_t command)
{
	DATA_BUS=(command&0b11110000);
      c6:	98 2f       	mov	r25, r24
      c8:	90 7f       	andi	r25, 0xF0	; 240
      ca:	9b b9       	out	0x0b, r25	; 11
	CTL_BUS &=~(1<<LCD_RS);
      cc:	43 98       	cbi	0x08, 3	; 8
	CTL_BUS |=(1<<LCD_EN);
      ce:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d0:	ef e9       	ldi	r30, 0x9F	; 159
      d2:	ff e0       	ldi	r31, 0x0F	; 15
      d4:	31 97       	sbiw	r30, 0x01	; 1
      d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_send_command+0xe>
      d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_send_command+0x14>
      da:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
      dc:	45 98       	cbi	0x08, 5	; 8
      de:	ef e9       	ldi	r30, 0x9F	; 159
      e0:	ff e0       	ldi	r31, 0x0F	; 15
      e2:	31 97       	sbiw	r30, 0x01	; 1
      e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_send_command+0x1c>
      e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_send_command+0x22>
      e8:	00 00       	nop
	_delay_ms(1);
	DATA_BUS=((command&0b00001111)<<4);
      ea:	f0 e1       	ldi	r31, 0x10	; 16
      ec:	8f 9f       	mul	r24, r31
      ee:	c0 01       	movw	r24, r0
      f0:	11 24       	eor	r1, r1
      f2:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS |=(1<<LCD_EN);
      f4:	45 9a       	sbi	0x08, 5	; 8
      f6:	8f e9       	ldi	r24, 0x9F	; 159
      f8:	9f e0       	ldi	r25, 0x0F	; 15
      fa:	01 97       	sbiw	r24, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_send_command+0x34>
      fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_send_command+0x3a>
     100:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
     102:	45 98       	cbi	0x08, 5	; 8
     104:	ef e9       	ldi	r30, 0x9F	; 159
     106:	ff e0       	ldi	r31, 0x0F	; 15
     108:	31 97       	sbiw	r30, 0x01	; 1
     10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_send_command+0x42>
     10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_send_command+0x48>
     10e:	00 00       	nop
     110:	08 95       	ret

00000112 <lcd_init>:


void lcd_init(void)
{
	
	DATA_DDR = (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5)| (1<<LCD_D4);
     112:	80 ef       	ldi	r24, 0xF0	; 240
     114:	8a b9       	out	0x0a, r24	; 10
	CTL_DDR |= (1<<LCD_EN)|(1<<LCD_RW)|(1<<LCD_RS);
     116:	87 b1       	in	r24, 0x07	; 7
     118:	88 63       	ori	r24, 0x38	; 56
     11a:	87 b9       	out	0x07, r24	; 7

	
	DATA_BUS = (0<<LCD_D7)|(0<<LCD_D6)|(1<<LCD_D5)|(0<<LCD_D4);
     11c:	80 e2       	ldi	r24, 0x20	; 32
     11e:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS|= (1<<LCD_EN)|(0<<LCD_RW)|(0<<LCD_RS);
     120:	45 9a       	sbi	0x08, 5	; 8
     122:	8f e9       	ldi	r24, 0x9F	; 159
     124:	9f e0       	ldi	r25, 0x0F	; 15
     126:	01 97       	sbiw	r24, 0x01	; 1
     128:	f1 f7       	brne	.-4      	; 0x126 <lcd_init+0x14>
     12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_init+0x1a>
     12c:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
     12e:	45 98       	cbi	0x08, 5	; 8
     130:	8f e9       	ldi	r24, 0x9F	; 159
     132:	9f e0       	ldi	r25, 0x0F	; 15
     134:	01 97       	sbiw	r24, 0x01	; 1
     136:	f1 f7       	brne	.-4      	; 0x134 <lcd_init+0x22>
     138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_init+0x28>
     13a:	00 00       	nop
	_delay_ms(1);
	
	lcd_send_command(LCD_CMD_4BIT_2ROW_5X7);
     13c:	88 e2       	ldi	r24, 0x28	; 40
     13e:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
     142:	8f e9       	ldi	r24, 0x9F	; 159
     144:	9f e0       	ldi	r25, 0x0F	; 15
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <lcd_init+0x34>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_init+0x3a>
     14c:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(LCD_CMD_DISPLAY_NO_CURSOR);
     14e:	8c e0       	ldi	r24, 0x0C	; 12
     150:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
     154:	8f e9       	ldi	r24, 0x9F	; 159
     156:	9f e0       	ldi	r25, 0x0F	; 15
     158:	01 97       	sbiw	r24, 0x01	; 1
     15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_init+0x46>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <lcd_init+0x4c>
     15e:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(0x80);
     160:	80 e8       	ldi	r24, 0x80	; 128
     162:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
     166:	08 95       	ret

00000168 <lcd_write_character>:
	}
}
void lcd_write_character(uint8_t character)
{
	
	DATA_BUS=(character & 0b11110000);
     168:	98 2f       	mov	r25, r24
     16a:	90 7f       	andi	r25, 0xF0	; 240
     16c:	9b b9       	out	0x0b, r25	; 11
	CTL_BUS|=(1<<LCD_RS);
     16e:	43 9a       	sbi	0x08, 3	; 8
	CTL_BUS |=(1<<LCD_EN);
     170:	45 9a       	sbi	0x08, 5	; 8
     172:	ef e3       	ldi	r30, 0x3F	; 63
     174:	ff e1       	ldi	r31, 0x1F	; 31
     176:	31 97       	sbiw	r30, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <lcd_write_character+0xe>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_write_character+0x14>
     17c:	00 00       	nop
	_delay_ms(2);
	CTL_BUS &=~(1<<LCD_EN);
     17e:	45 98       	cbi	0x08, 5	; 8
     180:	ef e3       	ldi	r30, 0x3F	; 63
     182:	ff e1       	ldi	r31, 0x1F	; 31
     184:	31 97       	sbiw	r30, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_write_character+0x1c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_write_character+0x22>
     18a:	00 00       	nop
	_delay_ms(2);
	DATA_BUS=((character & 0b00001111)<<4);
     18c:	f0 e1       	ldi	r31, 0x10	; 16
     18e:	8f 9f       	mul	r24, r31
     190:	c0 01       	movw	r24, r0
     192:	11 24       	eor	r1, r1
     194:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS |=(1<<LCD_EN);
     196:	45 9a       	sbi	0x08, 5	; 8
     198:	8f e3       	ldi	r24, 0x3F	; 63
     19a:	9f e1       	ldi	r25, 0x1F	; 31
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_write_character+0x34>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_write_character+0x3a>
     1a2:	00 00       	nop
	_delay_ms(2);
	CTL_BUS &=~(1<<LCD_EN);
     1a4:	45 98       	cbi	0x08, 5	; 8
     1a6:	ef e3       	ldi	r30, 0x3F	; 63
     1a8:	ff e1       	ldi	r31, 0x1F	; 31
     1aa:	31 97       	sbiw	r30, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_write_character+0x42>
     1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_write_character+0x48>
     1b0:	00 00       	nop
     1b2:	08 95       	ret

000001b4 <lcd_write_word>:
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
	_delay_ms(1);
}
void lcd_write_word(uint8_t word[20])
{
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	ec 01       	movw	r28, r24
	int i=0;
	while(word[i]!='\0')
     1ba:	88 81       	ld	r24, Y
     1bc:	88 23       	and	r24, r24
     1be:	31 f0       	breq	.+12     	; 0x1cc <lcd_write_word+0x18>
     1c0:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_write_character(word[i]);
     1c2:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_write_character>
	_delay_ms(1);
}
void lcd_write_word(uint8_t word[20])
{
	int i=0;
	while(word[i]!='\0')
     1c6:	89 91       	ld	r24, Y+
     1c8:	81 11       	cpse	r24, r1
     1ca:	fb cf       	rjmp	.-10     	; 0x1c2 <lcd_write_word+0xe>
	{
		lcd_write_character(word[i]);
		i++;
	}
}
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	08 95       	ret

000001d2 <lcd_clear>:
	_delay_ms(2);
	
}
void lcd_clear(void)
{
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
     1d8:	08 95       	ret

000001da <lcd_goto_xy>:
	
}
void lcd_goto_xy (uint8_t line,uint8_t pos)				//line = 0 or 1
{
	lcd_send_command((0x80|(line<<6))+pos);
     1da:	20 e4       	ldi	r18, 0x40	; 64
     1dc:	82 9f       	mul	r24, r18
     1de:	c0 01       	movw	r24, r0
     1e0:	11 24       	eor	r1, r1
     1e2:	80 68       	ori	r24, 0x80	; 128
     1e4:	86 0f       	add	r24, r22
     1e6:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ea:	87 ec       	ldi	r24, 0xC7	; 199
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_goto_xy+0x14>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_goto_xy+0x1a>
     1f4:	00 00       	nop
     1f6:	08 95       	ret

000001f8 <Play_Sound_violin>:
#define BUZZER_DDR      DDRB
#define BUZZER_PORT     PORTB
#define BUZZER_PIN      3

void Play_Sound_violin(float frequency)
{
     1f8:	2f 92       	push	r2
     1fa:	3f 92       	push	r3
     1fc:	4f 92       	push	r4
     1fe:	5f 92       	push	r5
     200:	6f 92       	push	r6
     202:	7f 92       	push	r7
     204:	8f 92       	push	r8
     206:	9f 92       	push	r9
     208:	af 92       	push	r10
     20a:	bf 92       	push	r11
     20c:	cf 92       	push	r12
     20e:	df 92       	push	r13
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	6c 97       	sbiw	r28, 0x1c	; 28
     222:	0f b6       	in	r0, 0x3f	; 63
     224:	f8 94       	cli
     226:	de bf       	out	0x3e, r29	; 62
     228:	0f be       	out	0x3f, r0	; 63
     22a:	cd bf       	out	0x3d, r28	; 61
     22c:	69 83       	std	Y+1, r22	; 0x01
     22e:	7a 83       	std	Y+2, r23	; 0x02
     230:	8b 83       	std	Y+3, r24	; 0x03
     232:	9c 83       	std	Y+4, r25	; 0x04
	long int i,cycles;
	float wavelength = 1.25;

	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);
     234:	23 9a       	sbi	0x04, 3	; 4


		for(int j=0;j<20;j++){
			_delay_ms(frequency / 10.5);
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	48 e2       	ldi	r20, 0x28	; 40
     23c:	51 e4       	ldi	r21, 0x41	; 65
     23e:	69 81       	ldd	r22, Y+1	; 0x01
     240:	7a 81       	ldd	r23, Y+2	; 0x02
     242:	8b 81       	ldd	r24, Y+3	; 0x03
     244:	9c 81       	ldd	r25, Y+4	; 0x04
     246:	0e 94 5d 07 	call	0xeba	; 0xeba <__divsf3>
     24a:	6d 83       	std	Y+5, r22	; 0x05
     24c:	7e 83       	std	Y+6, r23	; 0x06
     24e:	8f 83       	std	Y+7, r24	; 0x07
     250:	98 87       	std	Y+8, r25	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     252:	20 e0       	ldi	r18, 0x00	; 0
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	4a e7       	ldi	r20, 0x7A	; 122
     258:	55 e4       	ldi	r21, 0x45	; 69
     25a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     25e:	2b 01       	movw	r4, r22
     260:	3c 01       	movw	r6, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     262:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
     266:	6b 01       	movw	r12, r22
     268:	7c 01       	movw	r14, r24
     26a:	20 e0       	ldi	r18, 0x00	; 0
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	40 e8       	ldi	r20, 0x80	; 128
     270:	5f e3       	ldi	r21, 0x3F	; 63
     272:	c3 01       	movw	r24, r6
     274:	b2 01       	movw	r22, r4
     276:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__cmpsf2>
     27a:	88 23       	and	r24, r24
     27c:	1c f4       	brge	.+6      	; 0x284 <Play_Sound_violin+0x8c>
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	02 c0       	rjmp	.+4      	; 0x288 <Play_Sound_violin+0x90>
     284:	9c 2d       	mov	r25, r12
     286:	8d 2d       	mov	r24, r13
     288:	29 2e       	mov	r2, r25
     28a:	38 2e       	mov	r3, r24
     28c:	84 e1       	ldi	r24, 0x14	; 20
     28e:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     290:	00 e9       	ldi	r16, 0x90	; 144
     292:	11 e0       	ldi	r17, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     294:	9a 87       	std	Y+10, r25	; 0x0a
     296:	89 87       	std	Y+9, r24	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	40 e8       	ldi	r20, 0x80	; 128
     29e:	5f e3       	ldi	r21, 0x3F	; 63
     2a0:	c3 01       	movw	r24, r6
     2a2:	b2 01       	movw	r22, r4
     2a4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__cmpsf2>
     2a8:	88 23       	and	r24, r24
     2aa:	04 f1       	brlt	.+64     	; 0x2ec <Play_Sound_violin+0xf4>
		__ticks = 1;
	else if (__tmp > 65535)
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	3f ef       	ldi	r19, 0xFF	; 255
     2b0:	4f e7       	ldi	r20, 0x7F	; 127
     2b2:	57 e4       	ldi	r21, 0x47	; 71
     2b4:	c3 01       	movw	r24, r6
     2b6:	b2 01       	movw	r22, r4
     2b8:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__gesf2>
     2bc:	18 16       	cp	r1, r24
     2be:	b4 f4       	brge	.+44     	; 0x2ec <Play_Sound_violin+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	40 e2       	ldi	r20, 0x20	; 32
     2c6:	51 e4       	ldi	r21, 0x41	; 65
     2c8:	6d 81       	ldd	r22, Y+5	; 0x05
     2ca:	7e 81       	ldd	r23, Y+6	; 0x06
     2cc:	8f 81       	ldd	r24, Y+7	; 0x07
     2ce:	98 85       	ldd	r25, Y+8	; 0x08
     2d0:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     2d4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
		while(__ticks)
     2d8:	61 15       	cp	r22, r1
     2da:	71 05       	cpc	r23, r1
     2dc:	51 f0       	breq	.+20     	; 0x2f2 <Play_Sound_violin+0xfa>
     2de:	c8 01       	movw	r24, r16
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <Play_Sound_violin+0xe8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2e4:	61 50       	subi	r22, 0x01	; 1
     2e6:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2e8:	d1 f7       	brne	.-12     	; 0x2de <Play_Sound_violin+0xe6>
     2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <Play_Sound_violin+0xfa>
     2ec:	c1 01       	movw	r24, r2
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <Play_Sound_violin+0xf6>
			BUZZER_PORT |= (1 << BUZZER_PIN);
     2f2:	2b 9a       	sbi	0x05, 3	; 5
			_delay_ms(22 * frequency / 10.5); // Ensuring the same duty cycle for both on and off times
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 eb       	ldi	r20, 0xB0	; 176
     2fa:	51 e4       	ldi	r21, 0x41	; 65
     2fc:	69 81       	ldd	r22, Y+1	; 0x01
     2fe:	7a 81       	ldd	r23, Y+2	; 0x02
     300:	8b 81       	ldd	r24, Y+3	; 0x03
     302:	9c 81       	ldd	r25, Y+4	; 0x04
     304:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	48 e2       	ldi	r20, 0x28	; 40
     30e:	51 e4       	ldi	r21, 0x41	; 65
     310:	0e 94 5d 07 	call	0xeba	; 0xeba <__divsf3>
     314:	6b 01       	movw	r12, r22
     316:	7c 01       	movw	r14, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	4a e7       	ldi	r20, 0x7A	; 122
     31e:	55 e4       	ldi	r21, 0x45	; 69
     320:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     324:	4b 01       	movw	r8, r22
     326:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	40 e8       	ldi	r20, 0x80	; 128
     32e:	5f e3       	ldi	r21, 0x3F	; 63
     330:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__cmpsf2>
     334:	88 23       	and	r24, r24
     336:	1c f1       	brlt	.+70     	; 0x37e <Play_Sound_violin+0x186>
		__ticks = 1;
	else if (__tmp > 65535)
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	3f ef       	ldi	r19, 0xFF	; 255
     33c:	4f e7       	ldi	r20, 0x7F	; 127
     33e:	57 e4       	ldi	r21, 0x47	; 71
     340:	c5 01       	movw	r24, r10
     342:	b4 01       	movw	r22, r8
     344:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__gesf2>
     348:	18 16       	cp	r1, r24
     34a:	a4 f4       	brge	.+40     	; 0x374 <Play_Sound_violin+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	40 e2       	ldi	r20, 0x20	; 32
     352:	51 e4       	ldi	r21, 0x41	; 65
     354:	c7 01       	movw	r24, r14
     356:	b6 01       	movw	r22, r12
     358:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     35c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
		while(__ticks)
     360:	61 15       	cp	r22, r1
     362:	71 05       	cpc	r23, r1
     364:	89 f0       	breq	.+34     	; 0x388 <Play_Sound_violin+0x190>
     366:	c8 01       	movw	r24, r16
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	f1 f7       	brne	.-4      	; 0x368 <Play_Sound_violin+0x170>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     36c:	61 50       	subi	r22, 0x01	; 1
     36e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     370:	d1 f7       	brne	.-12     	; 0x366 <Play_Sound_violin+0x16e>
     372:	0a c0       	rjmp	.+20     	; 0x388 <Play_Sound_violin+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     374:	c5 01       	movw	r24, r10
     376:	b4 01       	movw	r22, r8
     378:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
     37c:	02 c0       	rjmp	.+4      	; 0x382 <Play_Sound_violin+0x18a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     37e:	61 e0       	ldi	r22, 0x01	; 1
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	cb 01       	movw	r24, r22
     384:	01 97       	sbiw	r24, 0x01	; 1
     386:	f1 f7       	brne	.-4      	; 0x384 <Play_Sound_violin+0x18c>
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     388:	2b 98       	cbi	0x05, 3	; 5
     38a:	89 85       	ldd	r24, Y+9	; 0x09
     38c:	9a 85       	ldd	r25, Y+10	; 0x0a
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	9a 87       	std	Y+10, r25	; 0x0a
     392:	89 87       	std	Y+9, r24	; 0x09
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);


		for(int j=0;j<20;j++){
     394:	89 2b       	or	r24, r25
     396:	09 f0       	breq	.+2      	; 0x39a <Play_Sound_violin+0x1a2>
     398:	7f cf       	rjmp	.-258    	; 0x298 <Play_Sound_violin+0xa0>
			BUZZER_PORT |= (1 << BUZZER_PIN);
			_delay_ms(22 * frequency / 10.5); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		for(int j=0;j<10;j++){
			_delay_ms(frequency / 10.55);
     39a:	2d ec       	ldi	r18, 0xCD	; 205
     39c:	3c ec       	ldi	r19, 0xCC	; 204
     39e:	48 e2       	ldi	r20, 0x28	; 40
     3a0:	51 e4       	ldi	r21, 0x41	; 65
     3a2:	69 81       	ldd	r22, Y+1	; 0x01
     3a4:	7a 81       	ldd	r23, Y+2	; 0x02
     3a6:	8b 81       	ldd	r24, Y+3	; 0x03
     3a8:	9c 81       	ldd	r25, Y+4	; 0x04
     3aa:	0e 94 5d 07 	call	0xeba	; 0xeba <__divsf3>
     3ae:	6d 87       	std	Y+13, r22	; 0x0d
     3b0:	7e 87       	std	Y+14, r23	; 0x0e
     3b2:	8f 87       	std	Y+15, r24	; 0x0f
     3b4:	98 8b       	std	Y+16, r25	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	4a e7       	ldi	r20, 0x7A	; 122
     3bc:	55 e4       	ldi	r21, 0x45	; 69
     3be:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     3c2:	2b 01       	movw	r4, r22
     3c4:	3c 01       	movw	r6, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3c6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
     3ca:	6b 01       	movw	r12, r22
     3cc:	7c 01       	movw	r14, r24
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	40 e8       	ldi	r20, 0x80	; 128
     3d4:	5f e3       	ldi	r21, 0x3F	; 63
     3d6:	c3 01       	movw	r24, r6
     3d8:	b2 01       	movw	r22, r4
     3da:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__cmpsf2>
     3de:	88 23       	and	r24, r24
     3e0:	1c f4       	brge	.+6      	; 0x3e8 <Play_Sound_violin+0x1f0>
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <Play_Sound_violin+0x1f4>
     3e8:	9c 2d       	mov	r25, r12
     3ea:	8d 2d       	mov	r24, r13
     3ec:	29 2e       	mov	r2, r25
     3ee:	38 2e       	mov	r3, r24
     3f0:	8a e0       	ldi	r24, 0x0A	; 10
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	00 e9       	ldi	r16, 0x90	; 144
     3f6:	11 e0       	ldi	r17, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     3f8:	bb 24       	eor	r11, r11
     3fa:	b3 94       	inc	r11
     3fc:	a1 2c       	mov	r10, r1
     3fe:	9a 8b       	std	Y+18, r25	; 0x12
     400:	89 8b       	std	Y+17, r24	; 0x11
     402:	bd 82       	std	Y+5, r11	; 0x05
     404:	a9 86       	std	Y+9, r10	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	40 e8       	ldi	r20, 0x80	; 128
     40c:	5f e3       	ldi	r21, 0x3F	; 63
     40e:	c3 01       	movw	r24, r6
     410:	b2 01       	movw	r22, r4
     412:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__cmpsf2>
     416:	88 23       	and	r24, r24
     418:	04 f1       	brlt	.+64     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		__ticks = 1;
	else if (__tmp > 65535)
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	3f ef       	ldi	r19, 0xFF	; 255
     41e:	4f e7       	ldi	r20, 0x7F	; 127
     420:	57 e4       	ldi	r21, 0x47	; 71
     422:	c3 01       	movw	r24, r6
     424:	b2 01       	movw	r22, r4
     426:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__gesf2>
     42a:	18 16       	cp	r1, r24
     42c:	b4 f4       	brge	.+44     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	40 e2       	ldi	r20, 0x20	; 32
     434:	51 e4       	ldi	r21, 0x41	; 65
     436:	6d 85       	ldd	r22, Y+13	; 0x0d
     438:	7e 85       	ldd	r23, Y+14	; 0x0e
     43a:	8f 85       	ldd	r24, Y+15	; 0x0f
     43c:	98 89       	ldd	r25, Y+16	; 0x10
     43e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     442:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
		while(__ticks)
     446:	61 15       	cp	r22, r1
     448:	71 05       	cpc	r23, r1
     44a:	51 f0       	breq	.+20     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     44c:	c8 01       	movw	r24, r16
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     452:	61 50       	subi	r22, 0x01	; 1
     454:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     456:	d1 f7       	brne	.-12     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     458:	03 c0       	rjmp	.+6      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45a:	c1 01       	movw	r24, r2
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			BUZZER_PORT |= (1 << BUZZER_PIN);
     460:	2b 9a       	sbi	0x05, 3	; 5
			_delay_ms(22.1 * frequency / 10.55); // Ensuring the same duty cycle for both on and off times
     462:	2d ec       	ldi	r18, 0xCD	; 205
     464:	3c ec       	ldi	r19, 0xCC	; 204
     466:	40 eb       	ldi	r20, 0xB0	; 176
     468:	51 e4       	ldi	r21, 0x41	; 65
     46a:	69 81       	ldd	r22, Y+1	; 0x01
     46c:	7a 81       	ldd	r23, Y+2	; 0x02
     46e:	8b 81       	ldd	r24, Y+3	; 0x03
     470:	9c 81       	ldd	r25, Y+4	; 0x04
     472:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     476:	2d ec       	ldi	r18, 0xCD	; 205
     478:	3c ec       	ldi	r19, 0xCC	; 204
     47a:	48 e2       	ldi	r20, 0x28	; 40
     47c:	51 e4       	ldi	r21, 0x41	; 65
     47e:	0e 94 5d 07 	call	0xeba	; 0xeba <__divsf3>
     482:	4b 01       	movw	r8, r22
     484:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	4a e7       	ldi	r20, 0x7A	; 122
     48c:	55 e4       	ldi	r21, 0x45	; 69
     48e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     492:	6b 01       	movw	r12, r22
     494:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	40 e8       	ldi	r20, 0x80	; 128
     49c:	5f e3       	ldi	r21, 0x3F	; 63
     49e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__cmpsf2>
     4a2:	88 23       	and	r24, r24
     4a4:	1c f1       	brlt	.+70     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		__ticks = 1;
	else if (__tmp > 65535)
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	3f ef       	ldi	r19, 0xFF	; 255
     4aa:	4f e7       	ldi	r20, 0x7F	; 127
     4ac:	57 e4       	ldi	r21, 0x47	; 71
     4ae:	c7 01       	movw	r24, r14
     4b0:	b6 01       	movw	r22, r12
     4b2:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__gesf2>
     4b6:	18 16       	cp	r1, r24
     4b8:	a4 f4       	brge	.+40     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	40 e2       	ldi	r20, 0x20	; 32
     4c0:	51 e4       	ldi	r21, 0x41	; 65
     4c2:	c5 01       	movw	r24, r10
     4c4:	b4 01       	movw	r22, r8
     4c6:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     4ca:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
		while(__ticks)
     4ce:	61 15       	cp	r22, r1
     4d0:	71 05       	cpc	r23, r1
     4d2:	89 f0       	breq	.+34     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4d4:	c8 01       	movw	r24, r16
     4d6:	01 97       	sbiw	r24, 0x01	; 1
     4d8:	f1 f7       	brne	.-4      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4da:	61 50       	subi	r22, 0x01	; 1
     4dc:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4de:	d1 f7       	brne	.-12     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4e0:	0a c0       	rjmp	.+20     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4e2:	c7 01       	movw	r24, r14
     4e4:	b6 01       	movw	r22, r12
     4e6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     4ec:	6d 81       	ldd	r22, Y+5	; 0x05
     4ee:	79 85       	ldd	r23, Y+9	; 0x09
     4f0:	cb 01       	movw	r24, r22
     4f2:	01 97       	sbiw	r24, 0x01	; 1
     4f4:	f1 f7       	brne	.-4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     4f6:	2b 98       	cbi	0x05, 3	; 5
     4f8:	89 89       	ldd	r24, Y+17	; 0x11
     4fa:	9a 89       	ldd	r25, Y+18	; 0x12
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	9a 8b       	std	Y+18, r25	; 0x12
     500:	89 8b       	std	Y+17, r24	; 0x11
			_delay_ms(frequency / 10.5);
			BUZZER_PORT |= (1 << BUZZER_PIN);
			_delay_ms(22 * frequency / 10.5); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		for(int j=0;j<10;j++){
     502:	89 2b       	or	r24, r25
     504:	09 f0       	breq	.+2      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     506:	7f cf       	rjmp	.-258    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     508:	8b 8a       	std	Y+19, r8	; 0x13
     50a:	9c 8a       	std	Y+20, r9	; 0x14
     50c:	ad 8a       	std	Y+21, r10	; 0x15
     50e:	be 8a       	std	Y+22, r11	; 0x16
			_delay_ms(22.1 * frequency / 10.55); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		
		for(int j=0;j<5;j++){
			_delay_ms(frequency / 10.6);
     510:	2a e9       	ldi	r18, 0x9A	; 154
     512:	39 e9       	ldi	r19, 0x99	; 153
     514:	49 e2       	ldi	r20, 0x29	; 41
     516:	51 e4       	ldi	r21, 0x41	; 65
     518:	69 81       	ldd	r22, Y+1	; 0x01
     51a:	7a 81       	ldd	r23, Y+2	; 0x02
     51c:	8b 81       	ldd	r24, Y+3	; 0x03
     51e:	9c 81       	ldd	r25, Y+4	; 0x04
     520:	0e 94 5d 07 	call	0xeba	; 0xeba <__divsf3>
     524:	6f 8b       	std	Y+23, r22	; 0x17
     526:	78 8f       	std	Y+24, r23	; 0x18
     528:	89 8f       	std	Y+25, r24	; 0x19
     52a:	9a 8f       	std	Y+26, r25	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	4a e7       	ldi	r20, 0x7A	; 122
     532:	55 e4       	ldi	r21, 0x45	; 69
     534:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     538:	69 87       	std	Y+9, r22	; 0x09
     53a:	7a 87       	std	Y+10, r23	; 0x0a
     53c:	8b 87       	std	Y+11, r24	; 0x0b
     53e:	9c 87       	std	Y+12, r25	; 0x0c
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     540:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
     544:	4b 01       	movw	r8, r22
     546:	5c 01       	movw	r10, r24
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	40 e8       	ldi	r20, 0x80	; 128
     54e:	5f e3       	ldi	r21, 0x3F	; 63
     550:	69 85       	ldd	r22, Y+9	; 0x09
     552:	7a 85       	ldd	r23, Y+10	; 0x0a
     554:	8b 85       	ldd	r24, Y+11	; 0x0b
     556:	9c 85       	ldd	r25, Y+12	; 0x0c
     558:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__cmpsf2>
     55c:	88 23       	and	r24, r24
     55e:	1c f4       	brge	.+6      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	02 c0       	rjmp	.+4      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     566:	98 2d       	mov	r25, r8
     568:	89 2d       	mov	r24, r9
     56a:	99 8b       	std	Y+17, r25	; 0x11
     56c:	8a 8b       	std	Y+18, r24	; 0x12
     56e:	85 e0       	ldi	r24, 0x05	; 5
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	00 e9       	ldi	r16, 0x90	; 144
     574:	11 e0       	ldi	r17, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     576:	9c 8f       	std	Y+28, r25	; 0x1c
     578:	8b 8f       	std	Y+27, r24	; 0x1b
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	40 e8       	ldi	r20, 0x80	; 128
     580:	5f e3       	ldi	r21, 0x3F	; 63
     582:	69 85       	ldd	r22, Y+9	; 0x09
     584:	7a 85       	ldd	r23, Y+10	; 0x0a
     586:	8b 85       	ldd	r24, Y+11	; 0x0b
     588:	9c 85       	ldd	r25, Y+12	; 0x0c
     58a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__cmpsf2>
     58e:	88 23       	and	r24, r24
     590:	14 f1       	brlt	.+68     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
		__ticks = 1;
	else if (__tmp > 65535)
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	3f ef       	ldi	r19, 0xFF	; 255
     596:	4f e7       	ldi	r20, 0x7F	; 127
     598:	57 e4       	ldi	r21, 0x47	; 71
     59a:	69 85       	ldd	r22, Y+9	; 0x09
     59c:	7a 85       	ldd	r23, Y+10	; 0x0a
     59e:	8b 85       	ldd	r24, Y+11	; 0x0b
     5a0:	9c 85       	ldd	r25, Y+12	; 0x0c
     5a2:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__gesf2>
     5a6:	18 16       	cp	r1, r24
     5a8:	b4 f4       	brge	.+44     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	40 e2       	ldi	r20, 0x20	; 32
     5b0:	51 e4       	ldi	r21, 0x41	; 65
     5b2:	6f 89       	ldd	r22, Y+23	; 0x17
     5b4:	78 8d       	ldd	r23, Y+24	; 0x18
     5b6:	89 8d       	ldd	r24, Y+25	; 0x19
     5b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5ba:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     5be:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
		while(__ticks)
     5c2:	61 15       	cp	r22, r1
     5c4:	71 05       	cpc	r23, r1
     5c6:	59 f0       	breq	.+22     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
     5c8:	c8 01       	movw	r24, r16
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ce:	61 50       	subi	r22, 0x01	; 1
     5d0:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5d2:	d1 f7       	brne	.-12     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
     5d6:	89 89       	ldd	r24, Y+17	; 0x11
     5d8:	9a 89       	ldd	r25, Y+18	; 0x12
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	f1 f7       	brne	.-4      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
			BUZZER_PORT |= (1 << BUZZER_PIN);
     5de:	2b 9a       	sbi	0x05, 3	; 5
			_delay_ms(22.2 * frequency / 10.6); // Ensuring the same duty cycle for both on and off times
     5e0:	2a e9       	ldi	r18, 0x9A	; 154
     5e2:	39 e9       	ldi	r19, 0x99	; 153
     5e4:	41 eb       	ldi	r20, 0xB1	; 177
     5e6:	51 e4       	ldi	r21, 0x41	; 65
     5e8:	69 81       	ldd	r22, Y+1	; 0x01
     5ea:	7a 81       	ldd	r23, Y+2	; 0x02
     5ec:	8b 81       	ldd	r24, Y+3	; 0x03
     5ee:	9c 81       	ldd	r25, Y+4	; 0x04
     5f0:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     5f4:	2a e9       	ldi	r18, 0x9A	; 154
     5f6:	39 e9       	ldi	r19, 0x99	; 153
     5f8:	49 e2       	ldi	r20, 0x29	; 41
     5fa:	51 e4       	ldi	r21, 0x41	; 65
     5fc:	0e 94 5d 07 	call	0xeba	; 0xeba <__divsf3>
     600:	6d 83       	std	Y+5, r22	; 0x05
     602:	7e 83       	std	Y+6, r23	; 0x06
     604:	8f 83       	std	Y+7, r24	; 0x07
     606:	98 87       	std	Y+8, r25	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	4a e7       	ldi	r20, 0x7A	; 122
     60e:	55 e4       	ldi	r21, 0x45	; 69
     610:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     614:	4b 01       	movw	r8, r22
     616:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	40 e8       	ldi	r20, 0x80	; 128
     61e:	5f e3       	ldi	r21, 0x3F	; 63
     620:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__cmpsf2>
     624:	88 23       	and	r24, r24
     626:	2c f1       	brlt	.+74     	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
		__ticks = 1;
	else if (__tmp > 65535)
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	3f ef       	ldi	r19, 0xFF	; 255
     62c:	4f e7       	ldi	r20, 0x7F	; 127
     62e:	57 e4       	ldi	r21, 0x47	; 71
     630:	c5 01       	movw	r24, r10
     632:	b4 01       	movw	r22, r8
     634:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__gesf2>
     638:	18 16       	cp	r1, r24
     63a:	b4 f4       	brge	.+44     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e2       	ldi	r20, 0x20	; 32
     642:	51 e4       	ldi	r21, 0x41	; 65
     644:	6d 81       	ldd	r22, Y+5	; 0x05
     646:	7e 81       	ldd	r23, Y+6	; 0x06
     648:	8f 81       	ldd	r24, Y+7	; 0x07
     64a:	98 85       	ldd	r25, Y+8	; 0x08
     64c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     650:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
		while(__ticks)
     654:	61 15       	cp	r22, r1
     656:	71 05       	cpc	r23, r1
     658:	89 f0       	breq	.+34     	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
     65a:	c8 01       	movw	r24, r16
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     660:	61 50       	subi	r22, 0x01	; 1
     662:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     664:	d1 f7       	brne	.-12     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
     666:	0a c0       	rjmp	.+20     	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     668:	c5 01       	movw	r24, r10
     66a:	b4 01       	movw	r22, r8
     66c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
     670:	02 c0       	rjmp	.+4      	; 0x676 <__LOCK_REGION_LENGTH__+0x276>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     672:	61 e0       	ldi	r22, 0x01	; 1
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	cb 01       	movw	r24, r22
     678:	01 97       	sbiw	r24, 0x01	; 1
     67a:	f1 f7       	brne	.-4      	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     67c:	2b 98       	cbi	0x05, 3	; 5
     67e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     680:	9c 8d       	ldd	r25, Y+28	; 0x1c
     682:	01 97       	sbiw	r24, 0x01	; 1
     684:	9c 8f       	std	Y+28, r25	; 0x1c
     686:	8b 8f       	std	Y+27, r24	; 0x1b
			BUZZER_PORT |= (1 << BUZZER_PIN);
			_delay_ms(22.1 * frequency / 10.55); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		
		for(int j=0;j<5;j++){
     688:	89 2b       	or	r24, r25
     68a:	09 f0       	breq	.+2      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
     68c:	76 cf       	rjmp	.-276    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     68e:	0a e0       	ldi	r16, 0x0A	; 10
     690:	10 e0       	ldi	r17, 0x00	; 0
     692:	bb 24       	eor	r11, r11
     694:	b3 94       	inc	r11
     696:	a1 2c       	mov	r10, r1
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	40 e8       	ldi	r20, 0x80	; 128
     69e:	5f e3       	ldi	r21, 0x3F	; 63
     6a0:	c3 01       	movw	r24, r6
     6a2:	b2 01       	movw	r22, r4
     6a4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__cmpsf2>
     6a8:	88 23       	and	r24, r24
     6aa:	0c f1       	brlt	.+66     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
		__ticks = 1;
	else if (__tmp > 65535)
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	3f ef       	ldi	r19, 0xFF	; 255
     6b0:	4f e7       	ldi	r20, 0x7F	; 127
     6b2:	57 e4       	ldi	r21, 0x47	; 71
     6b4:	c3 01       	movw	r24, r6
     6b6:	b2 01       	movw	r22, r4
     6b8:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__gesf2>
     6bc:	18 16       	cp	r1, r24
     6be:	bc f4       	brge	.+46     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e2       	ldi	r20, 0x20	; 32
     6c6:	51 e4       	ldi	r21, 0x41	; 65
     6c8:	6d 85       	ldd	r22, Y+13	; 0x0d
     6ca:	7e 85       	ldd	r23, Y+14	; 0x0e
     6cc:	8f 85       	ldd	r24, Y+15	; 0x0f
     6ce:	98 89       	ldd	r25, Y+16	; 0x10
     6d0:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     6d4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
		while(__ticks)
     6d8:	61 15       	cp	r22, r1
     6da:	71 05       	cpc	r23, r1
     6dc:	59 f0       	breq	.+22     	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     6de:	80 e9       	ldi	r24, 0x90	; 144
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6e6:	61 50       	subi	r22, 0x01	; 1
     6e8:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6ea:	c9 f7       	brne	.-14     	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     6ee:	c1 01       	movw	r24, r2
     6f0:	01 97       	sbiw	r24, 0x01	; 1
     6f2:	f1 f7       	brne	.-4      	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
			_delay_ms(22.2 * frequency / 10.6); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		for(int j=0;j<10;j++){
			_delay_ms(frequency / 10.55);
			BUZZER_PORT |= (1 << BUZZER_PIN);
     6f4:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e8       	ldi	r20, 0x80	; 128
     6fc:	5f e3       	ldi	r21, 0x3F	; 63
     6fe:	c7 01       	movw	r24, r14
     700:	b6 01       	movw	r22, r12
     702:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__cmpsf2>
     706:	88 23       	and	r24, r24
     708:	34 f1       	brlt	.+76     	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
		__ticks = 1;
	else if (__tmp > 65535)
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	3f ef       	ldi	r19, 0xFF	; 255
     70e:	4f e7       	ldi	r20, 0x7F	; 127
     710:	57 e4       	ldi	r21, 0x47	; 71
     712:	c7 01       	movw	r24, r14
     714:	b6 01       	movw	r22, r12
     716:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__gesf2>
     71a:	18 16       	cp	r1, r24
     71c:	bc f4       	brge	.+46     	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e2       	ldi	r20, 0x20	; 32
     724:	51 e4       	ldi	r21, 0x41	; 65
     726:	6b 89       	ldd	r22, Y+19	; 0x13
     728:	7c 89       	ldd	r23, Y+20	; 0x14
     72a:	8d 89       	ldd	r24, Y+21	; 0x15
     72c:	9e 89       	ldd	r25, Y+22	; 0x16
     72e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     732:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
		while(__ticks)
     736:	61 15       	cp	r22, r1
     738:	71 05       	cpc	r23, r1
     73a:	91 f0       	breq	.+36     	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
     73c:	80 e9       	ldi	r24, 0x90	; 144
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	f1 f7       	brne	.-4      	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     744:	61 50       	subi	r22, 0x01	; 1
     746:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     748:	c9 f7       	brne	.-14     	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
     74a:	0a c0       	rjmp	.+20     	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     74c:	c7 01       	movw	r24, r14
     74e:	b6 01       	movw	r22, r12
     750:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
     754:	02 c0       	rjmp	.+4      	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     756:	6b 2d       	mov	r22, r11
     758:	7a 2d       	mov	r23, r10
     75a:	cb 01       	movw	r24, r22
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
			_delay_ms(22.1 * frequency / 10.55); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     760:	2b 98       	cbi	0x05, 3	; 5
     762:	01 50       	subi	r16, 0x01	; 1
     764:	11 09       	sbc	r17, r1
			_delay_ms(frequency / 10.6);
			BUZZER_PORT |= (1 << BUZZER_PIN);
			_delay_ms(22.2 * frequency / 10.6); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		for(int j=0;j<10;j++){
     766:	09 f0       	breq	.+2      	; 0x76a <__LOCK_REGION_LENGTH__+0x36a>
     768:	97 cf       	rjmp	.-210    	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
			_delay_ms(22.1 * frequency / 10.55); // Ensuring the same duty cycle for both on and off times
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}

	
}
     76a:	6c 96       	adiw	r28, 0x1c	; 28
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	de bf       	out	0x3e, r29	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	cd bf       	out	0x3d, r28	; 61
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	bf 90       	pop	r11
     788:	af 90       	pop	r10
     78a:	9f 90       	pop	r9
     78c:	8f 90       	pop	r8
     78e:	7f 90       	pop	r7
     790:	6f 90       	pop	r6
     792:	5f 90       	pop	r5
     794:	4f 90       	pop	r4
     796:	3f 90       	pop	r3
     798:	2f 90       	pop	r2
     79a:	08 95       	ret

0000079c <Play_Sound_piano>:

void Play_Sound_piano(float frequency)
{
     79c:	2f 92       	push	r2
     79e:	3f 92       	push	r3
     7a0:	4f 92       	push	r4
     7a2:	5f 92       	push	r5
     7a4:	6f 92       	push	r6
     7a6:	7f 92       	push	r7
     7a8:	8f 92       	push	r8
     7aa:	9f 92       	push	r9
     7ac:	af 92       	push	r10
     7ae:	bf 92       	push	r11
     7b0:	cf 92       	push	r12
     7b2:	df 92       	push	r13
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	1f 92       	push	r1
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	4b 01       	movw	r8, r22
     7c8:	5c 01       	movw	r10, r24
	long int i,cycles;
	float wavelength = 1.25;
	
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);
     7ca:	23 9a       	sbi	0x04, 3	; 4

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	4a e7       	ldi	r20, 0x7A	; 122
     7d2:	55 e4       	ldi	r21, 0x45	; 69
     7d4:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     7d8:	6b 01       	movw	r12, r22
     7da:	7c 01       	movw	r14, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7dc:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
     7e0:	2b 01       	movw	r4, r22
     7e2:	3c 01       	movw	r6, r24
     7e4:	69 83       	std	Y+1, r22	; 0x01
     7e6:	35 2c       	mov	r3, r5
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	40 e8       	ldi	r20, 0x80	; 128
     7ee:	5f e3       	ldi	r21, 0x3F	; 63
     7f0:	c7 01       	movw	r24, r14
     7f2:	b6 01       	movw	r22, r12
     7f4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__cmpsf2>
     7f8:	88 23       	and	r24, r24
     7fa:	1c f4       	brge	.+6      	; 0x802 <Play_Sound_piano+0x66>
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	02 c0       	rjmp	.+4      	; 0x806 <Play_Sound_piano+0x6a>
     802:	94 2d       	mov	r25, r4
     804:	85 2d       	mov	r24, r5
     806:	69 2e       	mov	r6, r25
     808:	78 2e       	mov	r7, r24
     80a:	00 e0       	ldi	r16, 0x00	; 0
     80c:	10 e0       	ldi	r17, 0x00	; 0

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     80e:	55 24       	eor	r5, r5
     810:	53 94       	inc	r5
     812:	21 2c       	mov	r2, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     814:	49 80       	ldd	r4, Y+1	; 0x01
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e8       	ldi	r20, 0x80	; 128
     81c:	5f e3       	ldi	r21, 0x3F	; 63
     81e:	c7 01       	movw	r24, r14
     820:	b6 01       	movw	r22, r12
     822:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__cmpsf2>
     826:	88 23       	and	r24, r24
     828:	04 f1       	brlt	.+64     	; 0x86a <Play_Sound_piano+0xce>
		__ticks = 1;
	else if (__tmp > 65535)
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	3f ef       	ldi	r19, 0xFF	; 255
     82e:	4f e7       	ldi	r20, 0x7F	; 127
     830:	57 e4       	ldi	r21, 0x47	; 71
     832:	c7 01       	movw	r24, r14
     834:	b6 01       	movw	r22, r12
     836:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__gesf2>
     83a:	18 16       	cp	r1, r24
     83c:	b4 f4       	brge	.+44     	; 0x86a <Play_Sound_piano+0xce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	40 e2       	ldi	r20, 0x20	; 32
     844:	51 e4       	ldi	r21, 0x41	; 65
     846:	c5 01       	movw	r24, r10
     848:	b4 01       	movw	r22, r8
     84a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     84e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
		while(__ticks)
     852:	61 15       	cp	r22, r1
     854:	71 05       	cpc	r23, r1
     856:	09 f4       	brne	.+2      	; 0x85a <Play_Sound_piano+0xbe>
     858:	61 c0       	rjmp	.+194    	; 0x91c <__stack+0x1d>
     85a:	80 e9       	ldi	r24, 0x90	; 144
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <Play_Sound_piano+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     862:	61 50       	subi	r22, 0x01	; 1
     864:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     866:	c9 f7       	brne	.-14     	; 0x85a <Play_Sound_piano+0xbe>
     868:	4d c0       	rjmp	.+154    	; 0x904 <__stack+0x5>
     86a:	c3 01       	movw	r24, r6
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <Play_Sound_piano+0xd0>

	for (i=0;i<cycles;i++)
	{
		_delay_ms(frequency);
		BUZZER_PORT |= (1 << BUZZER_PIN);
     870:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 e8       	ldi	r20, 0x80	; 128
     878:	5f e3       	ldi	r21, 0x3F	; 63
     87a:	c7 01       	movw	r24, r14
     87c:	b6 01       	movw	r22, r12
     87e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__cmpsf2>
     882:	88 23       	and	r24, r24
     884:	fc f0       	brlt	.+62     	; 0x8c4 <Play_Sound_piano+0x128>
		__ticks = 1;
	else if (__tmp > 65535)
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	3f ef       	ldi	r19, 0xFF	; 255
     88a:	4f e7       	ldi	r20, 0x7F	; 127
     88c:	57 e4       	ldi	r21, 0x47	; 71
     88e:	c7 01       	movw	r24, r14
     890:	b6 01       	movw	r22, r12
     892:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__gesf2>
     896:	18 16       	cp	r1, r24
     898:	c4 f4       	brge	.+48     	; 0x8ca <Play_Sound_piano+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e2       	ldi	r20, 0x20	; 32
     8a0:	51 e4       	ldi	r21, 0x41	; 65
     8a2:	c5 01       	movw	r24, r10
     8a4:	b4 01       	movw	r22, r8
     8a6:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     8aa:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
		while(__ticks)
     8ae:	61 15       	cp	r22, r1
     8b0:	71 05       	cpc	r23, r1
     8b2:	a9 f0       	breq	.+42     	; 0x8de <Play_Sound_piano+0x142>
     8b4:	80 e9       	ldi	r24, 0x90	; 144
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <Play_Sound_piano+0x11c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8bc:	61 50       	subi	r22, 0x01	; 1
     8be:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c0:	c9 f7       	brne	.-14     	; 0x8b4 <Play_Sound_piano+0x118>
     8c2:	0d c0       	rjmp	.+26     	; 0x8de <Play_Sound_piano+0x142>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     8c4:	85 2d       	mov	r24, r5
     8c6:	92 2d       	mov	r25, r2
     8c8:	08 c0       	rjmp	.+16     	; 0x8da <Play_Sound_piano+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8ca:	84 2d       	mov	r24, r4
     8cc:	93 2d       	mov	r25, r3
     8ce:	05 c0       	rjmp	.+10     	; 0x8da <Play_Sound_piano+0x13e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     8d0:	85 2d       	mov	r24, r5
     8d2:	92 2d       	mov	r25, r2
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <Play_Sound_piano+0x13e>
     8d6:	85 2d       	mov	r24, r5
     8d8:	92 2d       	mov	r25, r2
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	f1 f7       	brne	.-4      	; 0x8da <Play_Sound_piano+0x13e>
		_delay_ms(frequency);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
     8de:	2b 98       	cbi	0x05, 3	; 5
     8e0:	0f 5f       	subi	r16, 0xFF	; 255
     8e2:	1f 4f       	sbci	r17, 0xFF	; 255
	
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);

	for (i=0;i<cycles;i++)
     8e4:	04 30       	cpi	r16, 0x04	; 4
     8e6:	11 05       	cpc	r17, r1
     8e8:	09 f0       	breq	.+2      	; 0x8ec <Play_Sound_piano+0x150>
     8ea:	95 cf       	rjmp	.-214    	; 0x816 <Play_Sound_piano+0x7a>
     8ec:	23 c0       	rjmp	.+70     	; 0x934 <__stack+0x35>
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e2       	ldi	r20, 0x20	; 32
     8f4:	51 e4       	ldi	r21, 0x41	; 65
     8f6:	c5 01       	movw	r24, r10
     8f8:	b4 01       	movw	r22, r8
     8fa:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__mulsf3>
     8fe:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
     902:	d8 cf       	rjmp	.-80     	; 0x8b4 <Play_Sound_piano+0x118>
	{
		_delay_ms(frequency);
		BUZZER_PORT |= (1 << BUZZER_PIN);
     904:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	40 e8       	ldi	r20, 0x80	; 128
     90c:	5f e3       	ldi	r21, 0x3F	; 63
     90e:	c7 01       	movw	r24, r14
     910:	b6 01       	movw	r22, r12
     912:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__cmpsf2>
     916:	88 23       	and	r24, r24
     918:	54 f7       	brge	.-44     	; 0x8ee <Play_Sound_piano+0x152>
     91a:	da cf       	rjmp	.-76     	; 0x8d0 <Play_Sound_piano+0x134>
     91c:	2b 9a       	sbi	0x05, 3	; 5
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	40 e8       	ldi	r20, 0x80	; 128
     924:	5f e3       	ldi	r21, 0x3F	; 63
     926:	c7 01       	movw	r24, r14
     928:	b6 01       	movw	r22, r12
     92a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__cmpsf2>
     92e:	88 23       	and	r24, r24
     930:	b4 f6       	brge	.-84     	; 0x8de <Play_Sound_piano+0x142>
     932:	d1 cf       	rjmp	.-94     	; 0x8d6 <Play_Sound_piano+0x13a>
		_delay_ms(frequency);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
	}
	
	
}
     934:	0f 90       	pop	r0
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	df 90       	pop	r13
     944:	cf 90       	pop	r12
     946:	bf 90       	pop	r11
     948:	af 90       	pop	r10
     94a:	9f 90       	pop	r9
     94c:	8f 90       	pop	r8
     94e:	7f 90       	pop	r7
     950:	6f 90       	pop	r6
     952:	5f 90       	pop	r5
     954:	4f 90       	pop	r4
     956:	3f 90       	pop	r3
     958:	2f 90       	pop	r2
     95a:	08 95       	ret

0000095c <stop_sound>:


void stop_sound(void)
{
	// Stop sound
	BUZZER_PORT &= ~(1 << BUZZER_PIN);
     95c:	2b 98       	cbi	0x05, 3	; 5
     95e:	08 95       	ret

00000960 <readInput1>:
/*74HC165 read function*/
volatile uint8_t readInput1(void){
	uint8_t reader = 0;

	/* Set PINC2 (PC2) as input */
	DDRC &= ~(1 << PC2);
     960:	3a 98       	cbi	0x07, 2	; 7

	/* Raise LD pin */
	PORTC |= (1 << PC1);
     962:	41 9a       	sbi	0x08, 1	; 8
     964:	28 e0       	ldi	r18, 0x08	; 8
     966:	30 e0       	ldi	r19, 0x00	; 0
}


/*74HC165 read function*/
volatile uint8_t readInput1(void){
	uint8_t reader = 0;
     968:	80 e0       	ldi	r24, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     96a:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PINC & (1 << PC2)) ? 1 : 0);
     96c:	96 b1       	in	r25, 0x06	; 6
     96e:	92 fb       	bst	r25, 2
     970:	99 27       	eor	r25, r25
     972:	90 f9       	bld	r25, 0
     974:	88 0f       	add	r24, r24
     976:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
     978:	40 98       	cbi	0x08, 0	; 8
     97a:	94 2f       	mov	r25, r20
     97c:	9a 95       	dec	r25
     97e:	f1 f7       	brne	.-4      	; 0x97c <readInput1+0x1c>
		_delay_us(1);
		PORTC |= (1 << PC0);
     980:	40 9a       	sbi	0x08, 0	; 8
     982:	21 50       	subi	r18, 0x01	; 1
     984:	31 09       	sbc	r19, r1
	DDRC &= ~(1 << PC2);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
     986:	91 f7       	brne	.-28     	; 0x96c <readInput1+0xc>
		_delay_us(1);
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
     988:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
     98a:	08 95       	ret

0000098c <readInput2>:

volatile uint8_t readInput2(void){
	uint8_t reader = 0;

	/* Set PIND3 (PD3) as input */
	DDRB &= ~(1 << PB4);
     98c:	24 98       	cbi	0x04, 4	; 4

	/* Raise LD pin */
	PORTC |= (1 << PC1);
     98e:	41 9a       	sbi	0x08, 1	; 8
     990:	28 e0       	ldi	r18, 0x08	; 8
     992:	30 e0       	ldi	r19, 0x00	; 0

	return reader;
}

volatile uint8_t readInput2(void){
	uint8_t reader = 0;
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PINB & (1 << PB4)) ? 1 : 0);
     998:	93 b1       	in	r25, 0x03	; 3
     99a:	92 95       	swap	r25
     99c:	91 70       	andi	r25, 0x01	; 1
     99e:	88 0f       	add	r24, r24
     9a0:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
     9a2:	40 98       	cbi	0x08, 0	; 8
     9a4:	94 2f       	mov	r25, r20
     9a6:	9a 95       	dec	r25
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <readInput2+0x1a>
		_delay_us(1);
		PORTC |= (1 << PC0);
     9aa:	40 9a       	sbi	0x08, 0	; 8
     9ac:	21 50       	subi	r18, 0x01	; 1
     9ae:	31 09       	sbc	r19, r1
	DDRB &= ~(1 << PB4);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
     9b0:	99 f7       	brne	.-26     	; 0x998 <readInput2+0xc>
		_delay_us(1);
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
     9b2:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
     9b4:	08 95       	ret

000009b6 <readInput3>:

volatile uint8_t readInput3(void){
	uint8_t reader = 0;

	/* Set PIND2 (PD2) as input */
	DDRB &= ~(1 << PB5);
     9b6:	25 98       	cbi	0x04, 5	; 4

	/* Raise LD pin */
	PORTC |= (1 << PC1);
     9b8:	41 9a       	sbi	0x08, 1	; 8
     9ba:	28 e0       	ldi	r18, 0x08	; 8
     9bc:	30 e0       	ldi	r19, 0x00	; 0
	return reader;
}


volatile uint8_t readInput3(void){
	uint8_t reader = 0;
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PINB & (1 << PB5 )) ? 1 : 0);
     9c2:	93 b1       	in	r25, 0x03	; 3
     9c4:	95 fb       	bst	r25, 5
     9c6:	99 27       	eor	r25, r25
     9c8:	90 f9       	bld	r25, 0
     9ca:	88 0f       	add	r24, r24
     9cc:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
     9ce:	40 98       	cbi	0x08, 0	; 8
     9d0:	94 2f       	mov	r25, r20
     9d2:	9a 95       	dec	r25
     9d4:	f1 f7       	brne	.-4      	; 0x9d2 <readInput3+0x1c>
		_delay_us(1); // You can use delay functions for a more accurate timing
		PORTC |= (1 << PC0);
     9d6:	40 9a       	sbi	0x08, 0	; 8
     9d8:	21 50       	subi	r18, 0x01	; 1
     9da:	31 09       	sbc	r19, r1
	DDRB &= ~(1 << PB5);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
     9dc:	91 f7       	brne	.-28     	; 0x9c2 <readInput3+0xc>
		_delay_us(1); // You can use delay functions for a more accurate timing
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
     9de:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
     9e0:	08 95       	ret

000009e2 <calculateFrequency>:


volatile float calculateFrequency(void){
     9e2:	cf 92       	push	r12
     9e4:	df 92       	push	r13
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
	float freq = 0;
/* Read the input value */
uint8_t switchNo = readInput1();
     9f0:	0e 94 b0 04 	call	0x960	; 0x960 <readInput1>
     9f4:	c8 2e       	mov	r12, r24
uint8_t switchNo2 = readInput2();
     9f6:	0e 94 c6 04 	call	0x98c	; 0x98c <readInput2>
     9fa:	08 2f       	mov	r16, r24
uint8_t switchNo3 = readInput3();
     9fc:	0e 94 db 04 	call	0x9b6	; 0x9b6 <readInput3>
     a00:	f8 2e       	mov	r15, r24
     a02:	c1 e0       	ldi	r28, 0x01	; 1
     a04:	d0 e0       	ldi	r29, 0x00	; 0
	return reader;
}


volatile float calculateFrequency(void){
	float freq = 0;
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	cb 01       	movw	r24, r22
uint8_t switchNo3 = readInput3();

	/* Iterate through each bit of switchNo */
	for (int i = 0; i < 8; i++) {
		/* Check if the i-th bit of switchNo is set */
		if (switchNo & (1 << i)) {
     a0c:	d1 2c       	mov	r13, r1
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <calculateFrequency+0x30>
     a10:	21 96       	adiw	r28, 0x01	; 1
     a12:	fe 01       	movw	r30, r28
     a14:	31 97       	sbiw	r30, 0x01	; 1
     a16:	96 01       	movw	r18, r12
     a18:	0e 2e       	mov	r0, r30
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <calculateFrequency+0x3e>
     a1c:	35 95       	asr	r19
     a1e:	27 95       	ror	r18
     a20:	0a 94       	dec	r0
     a22:	e2 f7       	brpl	.-8      	; 0xa1c <calculateFrequency+0x3a>
     a24:	20 ff       	sbrs	r18, 0
     a26:	3f c0       	rjmp	.+126    	; 0xaa6 <calculateFrequency+0xc4>
			/* Set frequency based on which button is pressed */
			switch (i) {
     a28:	e8 30       	cpi	r30, 0x08	; 8
     a2a:	f1 05       	cpc	r31, r1
     a2c:	e0 f5       	brcc	.+120    	; 0xaa6 <calculateFrequency+0xc4>
     a2e:	ec 5c       	subi	r30, 0xCC	; 204
     a30:	ff 4f       	sbci	r31, 0xFF	; 255
     a32:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__tablejump2__>
				case 0:freq += F3;break;
     a36:	2a e6       	ldi	r18, 0x6A	; 106
     a38:	3d e4       	ldi	r19, 0x4D	; 77
     a3a:	47 e3       	ldi	r20, 0x37	; 55
     a3c:	50 e4       	ldi	r21, 0x40	; 64
     a3e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     a42:	e6 cf       	rjmp	.-52     	; 0xa10 <calculateFrequency+0x2e>
				case 1:freq += Gb3;break;
     a44:	29 e0       	ldi	r18, 0x09	; 9
     a46:	39 ef       	ldi	r19, 0xF9	; 249
     a48:	4c e2       	ldi	r20, 0x2C	; 44
     a4a:	50 e4       	ldi	r21, 0x40	; 64
     a4c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     a50:	df cf       	rjmp	.-66     	; 0xa10 <calculateFrequency+0x2e>
				case 2:freq += G3;break;
     a52:	26 e9       	ldi	r18, 0x96	; 150
     a54:	33 e4       	ldi	r19, 0x43	; 67
     a56:	43 e2       	ldi	r20, 0x23	; 35
     a58:	50 e4       	ldi	r21, 0x40	; 64
     a5a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     a5e:	d8 cf       	rjmp	.-80     	; 0xa10 <calculateFrequency+0x2e>
				case 3:freq += Ab3;break;
     a60:	24 e2       	ldi	r18, 0x24	; 36
     a62:	38 e2       	ldi	r19, 0x28	; 40
     a64:	4a e1       	ldi	r20, 0x1A	; 26
     a66:	50 e4       	ldi	r21, 0x40	; 64
     a68:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     a6c:	d1 cf       	rjmp	.-94     	; 0xa10 <calculateFrequency+0x2e>
				case 4:freq += A3;break;
     a6e:	2b ee       	ldi	r18, 0xEB	; 235
     a70:	33 e7       	ldi	r19, 0x73	; 115
     a72:	41 e1       	ldi	r20, 0x11	; 17
     a74:	50 e4       	ldi	r21, 0x40	; 64
     a76:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     a7a:	ca cf       	rjmp	.-108    	; 0xa10 <calculateFrequency+0x2e>
				case 5:freq += Bb3;break;
     a7c:	2b e1       	ldi	r18, 0x1B	; 27
     a7e:	3f e2       	ldi	r19, 0x2F	; 47
     a80:	49 e0       	ldi	r20, 0x09	; 9
     a82:	50 e4       	ldi	r21, 0x40	; 64
     a84:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     a88:	c3 cf       	rjmp	.-122    	; 0xa10 <calculateFrequency+0x2e>
				case 6:freq += B3;break;
     a8a:	23 e5       	ldi	r18, 0x53	; 83
     a8c:	36 e9       	ldi	r19, 0x96	; 150
     a8e:	41 e0       	ldi	r20, 0x01	; 1
     a90:	50 e4       	ldi	r21, 0x40	; 64
     a92:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     a96:	bc cf       	rjmp	.-136    	; 0xa10 <calculateFrequency+0x2e>
				case 7:freq += C4;break;
     a98:	2d e0       	ldi	r18, 0x0D	; 13
     a9a:	31 e7       	ldi	r19, 0x71	; 113
     a9c:	44 ef       	ldi	r20, 0xF4	; 244
     a9e:	5f e3       	ldi	r21, 0x3F	; 63
     aa0:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     aa4:	04 c0       	rjmp	.+8      	; 0xaae <calculateFrequency+0xcc>
uint8_t switchNo = readInput1();
uint8_t switchNo2 = readInput2();
uint8_t switchNo3 = readInput3();

	/* Iterate through each bit of switchNo */
	for (int i = 0; i < 8; i++) {
     aa6:	c8 30       	cpi	r28, 0x08	; 8
     aa8:	d1 05       	cpc	r29, r1
     aaa:	0c f4       	brge	.+2      	; 0xaae <calculateFrequency+0xcc>
     aac:	b1 cf       	rjmp	.-158    	; 0xa10 <calculateFrequency+0x2e>
	return reader;
}


volatile float calculateFrequency(void){
	float freq = 0;
     aae:	c1 e0       	ldi	r28, 0x01	; 1
     ab0:	d0 e0       	ldi	r29, 0x00	; 0
	
	
	
	for (int i = 0; i < 8; i++) {
		/* Check if the i-th bit of switchNo is set */
		if (switchNo2 & (1 << i)) {
     ab2:	10 e0       	ldi	r17, 0x00	; 0
     ab4:	01 c0       	rjmp	.+2      	; 0xab8 <calculateFrequency+0xd6>
     ab6:	21 96       	adiw	r28, 0x01	; 1
     ab8:	fe 01       	movw	r30, r28
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	98 01       	movw	r18, r16
     abe:	0e 2e       	mov	r0, r30
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <calculateFrequency+0xe4>
     ac2:	35 95       	asr	r19
     ac4:	27 95       	ror	r18
     ac6:	0a 94       	dec	r0
     ac8:	e2 f7       	brpl	.-8      	; 0xac2 <calculateFrequency+0xe0>
     aca:	20 ff       	sbrs	r18, 0
     acc:	3f c0       	rjmp	.+126    	; 0xb4c <calculateFrequency+0x16a>
			/* Set frequency based on which button is pressed */
			switch (i) {
     ace:	e8 30       	cpi	r30, 0x08	; 8
     ad0:	f1 05       	cpc	r31, r1
     ad2:	e0 f5       	brcc	.+120    	; 0xb4c <calculateFrequency+0x16a>
     ad4:	e4 5c       	subi	r30, 0xC4	; 196
     ad6:	ff 4f       	sbci	r31, 0xFF	; 255
     ad8:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__tablejump2__>
				case 0:freq += Db4;break;
     adc:	2b ec       	ldi	r18, 0xCB	; 203
     ade:	30 e1       	ldi	r19, 0x10	; 16
     ae0:	47 ee       	ldi	r20, 0xE7	; 231
     ae2:	5f e3       	ldi	r21, 0x3F	; 63
     ae4:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     ae8:	e6 cf       	rjmp	.-52     	; 0xab6 <calculateFrequency+0xd4>
				case 1:freq += D4;break;
     aea:	2e e3       	ldi	r18, 0x3E	; 62
     aec:	38 ee       	ldi	r19, 0xE8	; 232
     aee:	49 ed       	ldi	r20, 0xD9	; 217
     af0:	5f e3       	ldi	r21, 0x3F	; 63
     af2:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     af6:	df cf       	rjmp	.-66     	; 0xab6 <calculateFrequency+0xd4>
				case 2:freq += Eb4;break;
     af8:	2b ea       	ldi	r18, 0xAB	; 171
     afa:	3f ec       	ldi	r19, 0xCF	; 207
     afc:	4d ec       	ldi	r20, 0xCD	; 205
     afe:	5f e3       	ldi	r21, 0x3F	; 63
     b00:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     b04:	d8 cf       	rjmp	.-80     	; 0xab6 <calculateFrequency+0xd4>
				case 3:freq += E4;break;
     b06:	2a e1       	ldi	r18, 0x1A	; 26
     b08:	31 e5       	ldi	r19, 0x51	; 81
     b0a:	42 ec       	ldi	r20, 0xC2	; 194
     b0c:	5f e3       	ldi	r21, 0x3F	; 63
     b0e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     b12:	d1 cf       	rjmp	.-94     	; 0xab6 <calculateFrequency+0xd4>
				case 4:freq += F4;break;
     b14:	2b e9       	ldi	r18, 0x9B	; 155
     b16:	35 e5       	ldi	r19, 0x55	; 85
     b18:	47 eb       	ldi	r20, 0xB7	; 183
     b1a:	5f e3       	ldi	r21, 0x3F	; 63
     b1c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     b20:	ca cf       	rjmp	.-108    	; 0xab6 <calculateFrequency+0xd4>
				case 5:freq += Gb4;break;
     b22:	2d ea       	ldi	r18, 0xAD	; 173
     b24:	3a ef       	ldi	r19, 0xFA	; 250
     b26:	4c ea       	ldi	r20, 0xAC	; 172
     b28:	5f e3       	ldi	r21, 0x3F	; 63
     b2a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     b2e:	c3 cf       	rjmp	.-122    	; 0xab6 <calculateFrequency+0xd4>
				case 6:freq += G4;break;
     b30:	26 e9       	ldi	r18, 0x96	; 150
     b32:	33 e4       	ldi	r19, 0x43	; 67
     b34:	43 ea       	ldi	r20, 0xA3	; 163
     b36:	5f e3       	ldi	r21, 0x3F	; 63
     b38:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     b3c:	bc cf       	rjmp	.-136    	; 0xab6 <calculateFrequency+0xd4>
				case 7:freq += Ab4;break;
     b3e:	21 e9       	ldi	r18, 0x91	; 145
     b40:	3f e0       	ldi	r19, 0x0F	; 15
     b42:	4a e9       	ldi	r20, 0x9A	; 154
     b44:	5f e3       	ldi	r21, 0x3F	; 63
     b46:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <calculateFrequency+0x172>
		}
	}
	
	
	
	for (int i = 0; i < 8; i++) {
     b4c:	c8 30       	cpi	r28, 0x08	; 8
     b4e:	d1 05       	cpc	r29, r1
     b50:	0c f4       	brge	.+2      	; 0xb54 <calculateFrequency+0x172>
     b52:	b1 cf       	rjmp	.-158    	; 0xab6 <calculateFrequency+0xd4>
	return reader;
}


volatile float calculateFrequency(void){
	float freq = 0;
     b54:	c1 e0       	ldi	r28, 0x01	; 1
     b56:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	
	for (int i = 0; i < 8; i++) {
		/* Check if the i-th bit of switchNo is set */
		if (switchNo3 & (1 << i)) {
     b58:	0f 2d       	mov	r16, r15
     b5a:	10 e0       	ldi	r17, 0x00	; 0
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <calculateFrequency+0x17e>
     b5e:	21 96       	adiw	r28, 0x01	; 1
     b60:	fe 01       	movw	r30, r28
     b62:	31 97       	sbiw	r30, 0x01	; 1
     b64:	98 01       	movw	r18, r16
     b66:	0e 2e       	mov	r0, r30
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <calculateFrequency+0x18c>
     b6a:	35 95       	asr	r19
     b6c:	27 95       	ror	r18
     b6e:	0a 94       	dec	r0
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <calculateFrequency+0x188>
     b72:	20 ff       	sbrs	r18, 0
     b74:	3f c0       	rjmp	.+126    	; 0xbf4 <calculateFrequency+0x212>
			/* Set frequency based on which button is pressed */
			switch (i) {
     b76:	e8 30       	cpi	r30, 0x08	; 8
     b78:	f1 05       	cpc	r31, r1
     b7a:	e0 f5       	brcc	.+120    	; 0xbf4 <calculateFrequency+0x212>
     b7c:	ec 5b       	subi	r30, 0xBC	; 188
     b7e:	ff 4f       	sbci	r31, 0xFF	; 255
     b80:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__tablejump2__>
				case 0:freq += A4;break;
     b84:	2e e8       	ldi	r18, 0x8E	; 142
     b86:	35 e7       	ldi	r19, 0x75	; 117
     b88:	41 e9       	ldi	r20, 0x91	; 145
     b8a:	5f e3       	ldi	r21, 0x3F	; 63
     b8c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     b90:	e6 cf       	rjmp	.-52     	; 0xb5e <calculateFrequency+0x17c>
				case 1:freq += Bb4;break;
     b92:	27 e6       	ldi	r18, 0x67	; 103
     b94:	34 e4       	ldi	r19, 0x44	; 68
     b96:	49 e8       	ldi	r20, 0x89	; 137
     b98:	5f e3       	ldi	r21, 0x3F	; 63
     b9a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     b9e:	df cf       	rjmp	.-66     	; 0xb5e <calculateFrequency+0x17c>
				case 2:freq += B4;break;
     ba0:	20 ee       	ldi	r18, 0xE0	; 224
     ba2:	3c e9       	ldi	r19, 0x9C	; 156
     ba4:	41 e8       	ldi	r20, 0x81	; 129
     ba6:	5f e3       	ldi	r21, 0x3F	; 63
     ba8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     bac:	d8 cf       	rjmp	.-80     	; 0xb5e <calculateFrequency+0x17c>
				case 3:freq += C5;break;
     bae:	27 ee       	ldi	r18, 0xE7	; 231
     bb0:	3d e1       	ldi	r19, 0x1D	; 29
     bb2:	47 e6       	ldi	r20, 0x67	; 103
     bb4:	5f e3       	ldi	r21, 0x3F	; 63
     bb6:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     bba:	d1 cf       	rjmp	.-94     	; 0xb5e <calculateFrequency+0x17c>
				case 4:freq += Db5;break;
     bbc:	2a e5       	ldi	r18, 0x5A	; 90
     bbe:	35 ef       	ldi	r19, 0xF5	; 245
     bc0:	49 e5       	ldi	r20, 0x59	; 89
     bc2:	5f e3       	ldi	r21, 0x3F	; 63
     bc4:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     bc8:	ca cf       	rjmp	.-108    	; 0xb5e <calculateFrequency+0x17c>
				case 5:freq += D5;break;
     bca:	28 e4       	ldi	r18, 0x48	; 72
     bcc:	3f eb       	ldi	r19, 0xBF	; 191
     bce:	4d e4       	ldi	r20, 0x4D	; 77
     bd0:	5f e3       	ldi	r21, 0x3F	; 63
     bd2:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     bd6:	c3 cf       	rjmp	.-122    	; 0xb5e <calculateFrequency+0x17c>
				case 6:freq += Eb5;break;
     bd8:	25 e4       	ldi	r18, 0x45	; 69
     bda:	37 e4       	ldi	r19, 0x47	; 71
     bdc:	42 e4       	ldi	r20, 0x42	; 66
     bde:	5f e3       	ldi	r21, 0x3F	; 63
     be0:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     be4:	bc cf       	rjmp	.-136    	; 0xb5e <calculateFrequency+0x17c>
				case 7:freq += E5;break;
     be6:	20 e7       	ldi	r18, 0x70	; 112
     be8:	3f e5       	ldi	r19, 0x5F	; 95
     bea:	47 e3       	ldi	r20, 0x37	; 55
     bec:	5f e3       	ldi	r21, 0x3F	; 63
     bee:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__addsf3>
     bf2:	04 c0       	rjmp	.+8      	; 0xbfc <calculateFrequency+0x21a>
			}
		}
	}
	
	
	for (int i = 0; i < 8; i++) {
     bf4:	c8 30       	cpi	r28, 0x08	; 8
     bf6:	d1 05       	cpc	r29, r1
     bf8:	0c f4       	brge	.+2      	; 0xbfc <calculateFrequency+0x21a>
     bfa:	b1 cf       	rjmp	.-158    	; 0xb5e <calculateFrequency+0x17c>
		}
	}


	return freq;
}
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	df 90       	pop	r13
     c08:	cf 90       	pop	r12
     c0a:	08 95       	ret

00000c0c <__vector_1>:

uint8_t instrument = -1;
uint8_t bluetooth = -1;

ISR( INT0_vect )
{
     c0c:	1f 92       	push	r1
     c0e:	0f 92       	push	r0
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	0f 92       	push	r0
     c14:	11 24       	eor	r1, r1
     c16:	2f 93       	push	r18
     c18:	3f 93       	push	r19
     c1a:	4f 93       	push	r20
     c1c:	5f 93       	push	r21
     c1e:	6f 93       	push	r22
     c20:	7f 93       	push	r23
     c22:	8f 93       	push	r24
     c24:	9f 93       	push	r25
     c26:	af 93       	push	r26
     c28:	bf 93       	push	r27
     c2a:	ef 93       	push	r30
     c2c:	ff 93       	push	r31
	if (PIND & (1 << PD2)) {
     c2e:	4a 9b       	sbis	0x09, 2	; 9
     c30:	0b c0       	rjmp	.+22     	; 0xc48 <__vector_1+0x3c>
		instrument=0;
     c32:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <instrument>
		lcd_goto_xy(1, 0);
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Play Piano......");
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
     c46:	0a c0       	rjmp	.+20     	; 0xc5c <__vector_1+0x50>
	}else{
		instrument=1;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <instrument>
		lcd_goto_xy(1, 0);
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Play Violin.....");
     c54:	83 e1       	ldi	r24, 0x13	; 19
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		
	}
	
}
     c5c:	ff 91       	pop	r31
     c5e:	ef 91       	pop	r30
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <__vector_2>:

ISR( INT1_vect )
{
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	2f 93       	push	r18
     c8a:	3f 93       	push	r19
     c8c:	4f 93       	push	r20
     c8e:	5f 93       	push	r21
     c90:	6f 93       	push	r22
     c92:	7f 93       	push	r23
     c94:	8f 93       	push	r24
     c96:	9f 93       	push	r25
     c98:	af 93       	push	r26
     c9a:	bf 93       	push	r27
     c9c:	ef 93       	push	r30
     c9e:	ff 93       	push	r31
	if (PIND & (1 << PD3)) {
     ca0:	4b 9b       	sbis	0x09, 3	; 9
     ca2:	0c c0       	rjmp	.+24     	; 0xcbc <__vector_2+0x3e>
		lcd_goto_xy(0, 0);
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Bluetooth.......");
     cac:	84 e2       	ldi	r24, 0x24	; 36
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		bluetooth=1;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     cba:	0a c0       	rjmp	.+20     	; 0xcd0 <__vector_2+0x52>
	}else{
		lcd_goto_xy(0, 0);
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Toy Piano Music!");
     cc4:	85 e3       	ldi	r24, 0x35	; 53
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		bluetooth=0;
     ccc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	}
}
     cd0:	ff 91       	pop	r31
     cd2:	ef 91       	pop	r30
     cd4:	bf 91       	pop	r27
     cd6:	af 91       	pop	r26
     cd8:	9f 91       	pop	r25
     cda:	8f 91       	pop	r24
     cdc:	7f 91       	pop	r23
     cde:	6f 91       	pop	r22
     ce0:	5f 91       	pop	r21
     ce2:	4f 91       	pop	r20
     ce4:	3f 91       	pop	r19
     ce6:	2f 91       	pop	r18
     ce8:	0f 90       	pop	r0
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	0f 90       	pop	r0
     cee:	1f 90       	pop	r1
     cf0:	18 95       	reti

00000cf2 <main>:

int main(void)
{
lcd_init();
     cf2:	0e 94 89 00 	call	0x112	; 0x112 <lcd_init>
lcd_clear();
     cf6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_clear>
     cfa:	84 ef       	ldi	r24, 0xF4	; 244
     cfc:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cfe:	20 e9       	ldi	r18, 0x90	; 144
     d00:	31 e0       	ldi	r19, 0x01	; 1
     d02:	f9 01       	movw	r30, r18
     d04:	31 97       	sbiw	r30, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <main+0x12>
     d08:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d0a:	d9 f7       	brne	.-10     	; 0xd02 <main+0x10>
_delay_ms (50);

	

	/* Initialize PORTC and set PC0, PC1, PC2 as output */
	DDRC |= 0b11111111;
     d0c:	87 b1       	in	r24, 0x07	; 7
     d0e:	8f ef       	ldi	r24, 0xFF	; 255
     d10:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b11111111;
     d12:	9a b1       	in	r25, 0x0a	; 10
     d14:	8a b9       	out	0x0a, r24	; 10
	
	  EICRA |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
     d16:	e9 e6       	ldi	r30, 0x69	; 105
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	81 60       	ori	r24, 0x01	; 1
     d1e:	80 83       	st	Z, r24
	  EIMSK |= (1 << INT0);     // Turns on INT0
     d20:	e8 9a       	sbi	0x1d, 0	; 29
	
	EICRA |= (1 << ISC10);    // set INT1 to trigger on ANY logic change
     d22:	80 81       	ld	r24, Z
     d24:	84 60       	ori	r24, 0x04	; 4
     d26:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);     // Turns on INT1
     d28:	e9 9a       	sbi	0x1d, 1	; 29
	
	if (PIND & (1 << PD2)) {
     d2a:	4a 9b       	sbis	0x09, 2	; 9
     d2c:	0b c0       	rjmp	.+22     	; 0xd44 <main+0x52>
		instrument=0;
     d2e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <instrument>
		lcd_goto_xy(1, 0);
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Play Piano......");
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
     d42:	0a c0       	rjmp	.+20     	; 0xd58 <main+0x66>
		}else{
		instrument=1;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <instrument>
		lcd_goto_xy(1, 0);
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Play Violin.....");
     d50:	83 e1       	ldi	r24, 0x13	; 19
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		
	}
	if (PIND & (1 << PD3)) {
     d58:	4b 9b       	sbis	0x09, 3	; 9
     d5a:	0c c0       	rjmp	.+24     	; 0xd74 <main+0x82>
		lcd_goto_xy(0, 0);
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Bluetooth.......");
     d64:	84 e2       	ldi	r24, 0x24	; 36
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		bluetooth=1;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     d72:	0a c0       	rjmp	.+20     	; 0xd88 <main+0x96>
	}else{
		lcd_goto_xy(0, 0);
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Toy Piano Music!");
     d7c:	85 e3       	ldi	r24, 0x35	; 53
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		bluetooth=0;
     d84:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	}
	sei();			/* Enable Global Interrupt */
     d88:	78 94       	sei
	
	
	
	while (1){
		float frequecy = calculateFrequency();
     d8a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <calculateFrequency>
     d8e:	6b 01       	movw	r12, r22
     d90:	7c 01       	movw	r14, r24
		
			if (frequecy > 0) {
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	a9 01       	movw	r20, r18
     d98:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__gesf2>
     d9c:	18 16       	cp	r1, r24
     d9e:	c4 f4       	brge	.+48     	; 0xdd0 <main+0xde>
				if(instrument==0 && bluetooth==0){
     da0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <instrument>
     da4:	81 11       	cpse	r24, r1
     da6:	09 c0       	rjmp	.+18     	; 0xdba <main+0xc8>
     da8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     dac:	81 11       	cpse	r24, r1
     dae:	ed cf       	rjmp	.-38     	; 0xd8a <main+0x98>
					Play_Sound_piano(frequecy);
     db0:	c7 01       	movw	r24, r14
     db2:	b6 01       	movw	r22, r12
     db4:	0e 94 ce 03 	call	0x79c	; 0x79c <Play_Sound_piano>
     db8:	e8 cf       	rjmp	.-48     	; 0xd8a <main+0x98>
				}else if(instrument==1 && bluetooth==0){
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	31 f7       	brne	.-52     	; 0xd8a <main+0x98>
     dbe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     dc2:	81 11       	cpse	r24, r1
     dc4:	e2 cf       	rjmp	.-60     	; 0xd8a <main+0x98>
					Play_Sound_violin(frequecy);
     dc6:	c7 01       	movw	r24, r14
     dc8:	b6 01       	movw	r22, r12
     dca:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Play_Sound_violin>
     dce:	dd cf       	rjmp	.-70     	; 0xd8a <main+0x98>
				}
				
				}else{
				stop_sound();
     dd0:	0e 94 ae 04 	call	0x95c	; 0x95c <stop_sound>
     dd4:	da cf       	rjmp	.-76     	; 0xd8a <main+0x98>

00000dd6 <__subsf3>:
     dd6:	50 58       	subi	r21, 0x80	; 128

00000dd8 <__addsf3>:
     dd8:	bb 27       	eor	r27, r27
     dda:	aa 27       	eor	r26, r26
     ddc:	0e 94 03 07 	call	0xe06	; 0xe06 <__addsf3x>
     de0:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__fp_round>
     de4:	0e 94 2b 08 	call	0x1056	; 0x1056 <__fp_pscA>
     de8:	38 f0       	brcs	.+14     	; 0xdf8 <__addsf3+0x20>
     dea:	0e 94 32 08 	call	0x1064	; 0x1064 <__fp_pscB>
     dee:	20 f0       	brcs	.+8      	; 0xdf8 <__addsf3+0x20>
     df0:	39 f4       	brne	.+14     	; 0xe00 <__addsf3+0x28>
     df2:	9f 3f       	cpi	r25, 0xFF	; 255
     df4:	19 f4       	brne	.+6      	; 0xdfc <__addsf3+0x24>
     df6:	26 f4       	brtc	.+8      	; 0xe00 <__addsf3+0x28>
     df8:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_nan>
     dfc:	0e f4       	brtc	.+2      	; 0xe00 <__addsf3+0x28>
     dfe:	e0 95       	com	r30
     e00:	e7 fb       	bst	r30, 7
     e02:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__fp_inf>

00000e06 <__addsf3x>:
     e06:	e9 2f       	mov	r30, r25
     e08:	0e 94 4a 08 	call	0x1094	; 0x1094 <__fp_split3>
     e0c:	58 f3       	brcs	.-42     	; 0xde4 <__addsf3+0xc>
     e0e:	ba 17       	cp	r27, r26
     e10:	62 07       	cpc	r22, r18
     e12:	73 07       	cpc	r23, r19
     e14:	84 07       	cpc	r24, r20
     e16:	95 07       	cpc	r25, r21
     e18:	20 f0       	brcs	.+8      	; 0xe22 <__addsf3x+0x1c>
     e1a:	79 f4       	brne	.+30     	; 0xe3a <__addsf3x+0x34>
     e1c:	a6 f5       	brtc	.+104    	; 0xe86 <__addsf3x+0x80>
     e1e:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_zero>
     e22:	0e f4       	brtc	.+2      	; 0xe26 <__addsf3x+0x20>
     e24:	e0 95       	com	r30
     e26:	0b 2e       	mov	r0, r27
     e28:	ba 2f       	mov	r27, r26
     e2a:	a0 2d       	mov	r26, r0
     e2c:	0b 01       	movw	r0, r22
     e2e:	b9 01       	movw	r22, r18
     e30:	90 01       	movw	r18, r0
     e32:	0c 01       	movw	r0, r24
     e34:	ca 01       	movw	r24, r20
     e36:	a0 01       	movw	r20, r0
     e38:	11 24       	eor	r1, r1
     e3a:	ff 27       	eor	r31, r31
     e3c:	59 1b       	sub	r21, r25
     e3e:	99 f0       	breq	.+38     	; 0xe66 <__addsf3x+0x60>
     e40:	59 3f       	cpi	r21, 0xF9	; 249
     e42:	50 f4       	brcc	.+20     	; 0xe58 <__addsf3x+0x52>
     e44:	50 3e       	cpi	r21, 0xE0	; 224
     e46:	68 f1       	brcs	.+90     	; 0xea2 <__addsf3x+0x9c>
     e48:	1a 16       	cp	r1, r26
     e4a:	f0 40       	sbci	r31, 0x00	; 0
     e4c:	a2 2f       	mov	r26, r18
     e4e:	23 2f       	mov	r18, r19
     e50:	34 2f       	mov	r19, r20
     e52:	44 27       	eor	r20, r20
     e54:	58 5f       	subi	r21, 0xF8	; 248
     e56:	f3 cf       	rjmp	.-26     	; 0xe3e <__addsf3x+0x38>
     e58:	46 95       	lsr	r20
     e5a:	37 95       	ror	r19
     e5c:	27 95       	ror	r18
     e5e:	a7 95       	ror	r26
     e60:	f0 40       	sbci	r31, 0x00	; 0
     e62:	53 95       	inc	r21
     e64:	c9 f7       	brne	.-14     	; 0xe58 <__addsf3x+0x52>
     e66:	7e f4       	brtc	.+30     	; 0xe86 <__addsf3x+0x80>
     e68:	1f 16       	cp	r1, r31
     e6a:	ba 0b       	sbc	r27, r26
     e6c:	62 0b       	sbc	r22, r18
     e6e:	73 0b       	sbc	r23, r19
     e70:	84 0b       	sbc	r24, r20
     e72:	ba f0       	brmi	.+46     	; 0xea2 <__addsf3x+0x9c>
     e74:	91 50       	subi	r25, 0x01	; 1
     e76:	a1 f0       	breq	.+40     	; 0xea0 <__addsf3x+0x9a>
     e78:	ff 0f       	add	r31, r31
     e7a:	bb 1f       	adc	r27, r27
     e7c:	66 1f       	adc	r22, r22
     e7e:	77 1f       	adc	r23, r23
     e80:	88 1f       	adc	r24, r24
     e82:	c2 f7       	brpl	.-16     	; 0xe74 <__addsf3x+0x6e>
     e84:	0e c0       	rjmp	.+28     	; 0xea2 <__addsf3x+0x9c>
     e86:	ba 0f       	add	r27, r26
     e88:	62 1f       	adc	r22, r18
     e8a:	73 1f       	adc	r23, r19
     e8c:	84 1f       	adc	r24, r20
     e8e:	48 f4       	brcc	.+18     	; 0xea2 <__addsf3x+0x9c>
     e90:	87 95       	ror	r24
     e92:	77 95       	ror	r23
     e94:	67 95       	ror	r22
     e96:	b7 95       	ror	r27
     e98:	f7 95       	ror	r31
     e9a:	9e 3f       	cpi	r25, 0xFE	; 254
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <__addsf3x+0x9a>
     e9e:	b0 cf       	rjmp	.-160    	; 0xe00 <__addsf3+0x28>
     ea0:	93 95       	inc	r25
     ea2:	88 0f       	add	r24, r24
     ea4:	08 f0       	brcs	.+2      	; 0xea8 <__addsf3x+0xa2>
     ea6:	99 27       	eor	r25, r25
     ea8:	ee 0f       	add	r30, r30
     eaa:	97 95       	ror	r25
     eac:	87 95       	ror	r24
     eae:	08 95       	ret

00000eb0 <__cmpsf2>:
     eb0:	0e 94 fe 07 	call	0xffc	; 0xffc <__fp_cmp>
     eb4:	08 f4       	brcc	.+2      	; 0xeb8 <__cmpsf2+0x8>
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	08 95       	ret

00000eba <__divsf3>:
     eba:	0e 94 71 07 	call	0xee2	; 0xee2 <__divsf3x>
     ebe:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__fp_round>
     ec2:	0e 94 32 08 	call	0x1064	; 0x1064 <__fp_pscB>
     ec6:	58 f0       	brcs	.+22     	; 0xede <__divsf3+0x24>
     ec8:	0e 94 2b 08 	call	0x1056	; 0x1056 <__fp_pscA>
     ecc:	40 f0       	brcs	.+16     	; 0xede <__divsf3+0x24>
     ece:	29 f4       	brne	.+10     	; 0xeda <__divsf3+0x20>
     ed0:	5f 3f       	cpi	r21, 0xFF	; 255
     ed2:	29 f0       	breq	.+10     	; 0xede <__divsf3+0x24>
     ed4:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__fp_inf>
     ed8:	51 11       	cpse	r21, r1
     eda:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__fp_szero>
     ede:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_nan>

00000ee2 <__divsf3x>:
     ee2:	0e 94 4a 08 	call	0x1094	; 0x1094 <__fp_split3>
     ee6:	68 f3       	brcs	.-38     	; 0xec2 <__divsf3+0x8>

00000ee8 <__divsf3_pse>:
     ee8:	99 23       	and	r25, r25
     eea:	b1 f3       	breq	.-20     	; 0xed8 <__divsf3+0x1e>
     eec:	55 23       	and	r21, r21
     eee:	91 f3       	breq	.-28     	; 0xed4 <__divsf3+0x1a>
     ef0:	95 1b       	sub	r25, r21
     ef2:	55 0b       	sbc	r21, r21
     ef4:	bb 27       	eor	r27, r27
     ef6:	aa 27       	eor	r26, r26
     ef8:	62 17       	cp	r22, r18
     efa:	73 07       	cpc	r23, r19
     efc:	84 07       	cpc	r24, r20
     efe:	38 f0       	brcs	.+14     	; 0xf0e <__divsf3_pse+0x26>
     f00:	9f 5f       	subi	r25, 0xFF	; 255
     f02:	5f 4f       	sbci	r21, 0xFF	; 255
     f04:	22 0f       	add	r18, r18
     f06:	33 1f       	adc	r19, r19
     f08:	44 1f       	adc	r20, r20
     f0a:	aa 1f       	adc	r26, r26
     f0c:	a9 f3       	breq	.-22     	; 0xef8 <__divsf3_pse+0x10>
     f0e:	35 d0       	rcall	.+106    	; 0xf7a <__divsf3_pse+0x92>
     f10:	0e 2e       	mov	r0, r30
     f12:	3a f0       	brmi	.+14     	; 0xf22 <__divsf3_pse+0x3a>
     f14:	e0 e8       	ldi	r30, 0x80	; 128
     f16:	32 d0       	rcall	.+100    	; 0xf7c <__divsf3_pse+0x94>
     f18:	91 50       	subi	r25, 0x01	; 1
     f1a:	50 40       	sbci	r21, 0x00	; 0
     f1c:	e6 95       	lsr	r30
     f1e:	00 1c       	adc	r0, r0
     f20:	ca f7       	brpl	.-14     	; 0xf14 <__divsf3_pse+0x2c>
     f22:	2b d0       	rcall	.+86     	; 0xf7a <__divsf3_pse+0x92>
     f24:	fe 2f       	mov	r31, r30
     f26:	29 d0       	rcall	.+82     	; 0xf7a <__divsf3_pse+0x92>
     f28:	66 0f       	add	r22, r22
     f2a:	77 1f       	adc	r23, r23
     f2c:	88 1f       	adc	r24, r24
     f2e:	bb 1f       	adc	r27, r27
     f30:	26 17       	cp	r18, r22
     f32:	37 07       	cpc	r19, r23
     f34:	48 07       	cpc	r20, r24
     f36:	ab 07       	cpc	r26, r27
     f38:	b0 e8       	ldi	r27, 0x80	; 128
     f3a:	09 f0       	breq	.+2      	; 0xf3e <__divsf3_pse+0x56>
     f3c:	bb 0b       	sbc	r27, r27
     f3e:	80 2d       	mov	r24, r0
     f40:	bf 01       	movw	r22, r30
     f42:	ff 27       	eor	r31, r31
     f44:	93 58       	subi	r25, 0x83	; 131
     f46:	5f 4f       	sbci	r21, 0xFF	; 255
     f48:	3a f0       	brmi	.+14     	; 0xf58 <__divsf3_pse+0x70>
     f4a:	9e 3f       	cpi	r25, 0xFE	; 254
     f4c:	51 05       	cpc	r21, r1
     f4e:	78 f0       	brcs	.+30     	; 0xf6e <__divsf3_pse+0x86>
     f50:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__fp_inf>
     f54:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__fp_szero>
     f58:	5f 3f       	cpi	r21, 0xFF	; 255
     f5a:	e4 f3       	brlt	.-8      	; 0xf54 <__divsf3_pse+0x6c>
     f5c:	98 3e       	cpi	r25, 0xE8	; 232
     f5e:	d4 f3       	brlt	.-12     	; 0xf54 <__divsf3_pse+0x6c>
     f60:	86 95       	lsr	r24
     f62:	77 95       	ror	r23
     f64:	67 95       	ror	r22
     f66:	b7 95       	ror	r27
     f68:	f7 95       	ror	r31
     f6a:	9f 5f       	subi	r25, 0xFF	; 255
     f6c:	c9 f7       	brne	.-14     	; 0xf60 <__divsf3_pse+0x78>
     f6e:	88 0f       	add	r24, r24
     f70:	91 1d       	adc	r25, r1
     f72:	96 95       	lsr	r25
     f74:	87 95       	ror	r24
     f76:	97 f9       	bld	r25, 7
     f78:	08 95       	ret
     f7a:	e1 e0       	ldi	r30, 0x01	; 1
     f7c:	66 0f       	add	r22, r22
     f7e:	77 1f       	adc	r23, r23
     f80:	88 1f       	adc	r24, r24
     f82:	bb 1f       	adc	r27, r27
     f84:	62 17       	cp	r22, r18
     f86:	73 07       	cpc	r23, r19
     f88:	84 07       	cpc	r24, r20
     f8a:	ba 07       	cpc	r27, r26
     f8c:	20 f0       	brcs	.+8      	; 0xf96 <__divsf3_pse+0xae>
     f8e:	62 1b       	sub	r22, r18
     f90:	73 0b       	sbc	r23, r19
     f92:	84 0b       	sbc	r24, r20
     f94:	ba 0b       	sbc	r27, r26
     f96:	ee 1f       	adc	r30, r30
     f98:	88 f7       	brcc	.-30     	; 0xf7c <__divsf3_pse+0x94>
     f9a:	e0 95       	com	r30
     f9c:	08 95       	ret

00000f9e <__fixunssfsi>:
     f9e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fp_splitA>
     fa2:	88 f0       	brcs	.+34     	; 0xfc6 <__fixunssfsi+0x28>
     fa4:	9f 57       	subi	r25, 0x7F	; 127
     fa6:	98 f0       	brcs	.+38     	; 0xfce <__fixunssfsi+0x30>
     fa8:	b9 2f       	mov	r27, r25
     faa:	99 27       	eor	r25, r25
     fac:	b7 51       	subi	r27, 0x17	; 23
     fae:	b0 f0       	brcs	.+44     	; 0xfdc <__fixunssfsi+0x3e>
     fb0:	e1 f0       	breq	.+56     	; 0xfea <__fixunssfsi+0x4c>
     fb2:	66 0f       	add	r22, r22
     fb4:	77 1f       	adc	r23, r23
     fb6:	88 1f       	adc	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	1a f0       	brmi	.+6      	; 0xfc2 <__fixunssfsi+0x24>
     fbc:	ba 95       	dec	r27
     fbe:	c9 f7       	brne	.-14     	; 0xfb2 <__fixunssfsi+0x14>
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <__fixunssfsi+0x4c>
     fc2:	b1 30       	cpi	r27, 0x01	; 1
     fc4:	91 f0       	breq	.+36     	; 0xfea <__fixunssfsi+0x4c>
     fc6:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_zero>
     fca:	b1 e0       	ldi	r27, 0x01	; 1
     fcc:	08 95       	ret
     fce:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_zero>
     fd2:	67 2f       	mov	r22, r23
     fd4:	78 2f       	mov	r23, r24
     fd6:	88 27       	eor	r24, r24
     fd8:	b8 5f       	subi	r27, 0xF8	; 248
     fda:	39 f0       	breq	.+14     	; 0xfea <__fixunssfsi+0x4c>
     fdc:	b9 3f       	cpi	r27, 0xF9	; 249
     fde:	cc f3       	brlt	.-14     	; 0xfd2 <__fixunssfsi+0x34>
     fe0:	86 95       	lsr	r24
     fe2:	77 95       	ror	r23
     fe4:	67 95       	ror	r22
     fe6:	b3 95       	inc	r27
     fe8:	d9 f7       	brne	.-10     	; 0xfe0 <__fixunssfsi+0x42>
     fea:	3e f4       	brtc	.+14     	; 0xffa <__fixunssfsi+0x5c>
     fec:	90 95       	com	r25
     fee:	80 95       	com	r24
     ff0:	70 95       	com	r23
     ff2:	61 95       	neg	r22
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255
     ff6:	8f 4f       	sbci	r24, 0xFF	; 255
     ff8:	9f 4f       	sbci	r25, 0xFF	; 255
     ffa:	08 95       	ret

00000ffc <__fp_cmp>:
     ffc:	99 0f       	add	r25, r25
     ffe:	00 08       	sbc	r0, r0
    1000:	55 0f       	add	r21, r21
    1002:	aa 0b       	sbc	r26, r26
    1004:	e0 e8       	ldi	r30, 0x80	; 128
    1006:	fe ef       	ldi	r31, 0xFE	; 254
    1008:	16 16       	cp	r1, r22
    100a:	17 06       	cpc	r1, r23
    100c:	e8 07       	cpc	r30, r24
    100e:	f9 07       	cpc	r31, r25
    1010:	c0 f0       	brcs	.+48     	; 0x1042 <__fp_cmp+0x46>
    1012:	12 16       	cp	r1, r18
    1014:	13 06       	cpc	r1, r19
    1016:	e4 07       	cpc	r30, r20
    1018:	f5 07       	cpc	r31, r21
    101a:	98 f0       	brcs	.+38     	; 0x1042 <__fp_cmp+0x46>
    101c:	62 1b       	sub	r22, r18
    101e:	73 0b       	sbc	r23, r19
    1020:	84 0b       	sbc	r24, r20
    1022:	95 0b       	sbc	r25, r21
    1024:	39 f4       	brne	.+14     	; 0x1034 <__fp_cmp+0x38>
    1026:	0a 26       	eor	r0, r26
    1028:	61 f0       	breq	.+24     	; 0x1042 <__fp_cmp+0x46>
    102a:	23 2b       	or	r18, r19
    102c:	24 2b       	or	r18, r20
    102e:	25 2b       	or	r18, r21
    1030:	21 f4       	brne	.+8      	; 0x103a <__fp_cmp+0x3e>
    1032:	08 95       	ret
    1034:	0a 26       	eor	r0, r26
    1036:	09 f4       	brne	.+2      	; 0x103a <__fp_cmp+0x3e>
    1038:	a1 40       	sbci	r26, 0x01	; 1
    103a:	a6 95       	lsr	r26
    103c:	8f ef       	ldi	r24, 0xFF	; 255
    103e:	81 1d       	adc	r24, r1
    1040:	81 1d       	adc	r24, r1
    1042:	08 95       	ret

00001044 <__fp_inf>:
    1044:	97 f9       	bld	r25, 7
    1046:	9f 67       	ori	r25, 0x7F	; 127
    1048:	80 e8       	ldi	r24, 0x80	; 128
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	08 95       	ret

00001050 <__fp_nan>:
    1050:	9f ef       	ldi	r25, 0xFF	; 255
    1052:	80 ec       	ldi	r24, 0xC0	; 192
    1054:	08 95       	ret

00001056 <__fp_pscA>:
    1056:	00 24       	eor	r0, r0
    1058:	0a 94       	dec	r0
    105a:	16 16       	cp	r1, r22
    105c:	17 06       	cpc	r1, r23
    105e:	18 06       	cpc	r1, r24
    1060:	09 06       	cpc	r0, r25
    1062:	08 95       	ret

00001064 <__fp_pscB>:
    1064:	00 24       	eor	r0, r0
    1066:	0a 94       	dec	r0
    1068:	12 16       	cp	r1, r18
    106a:	13 06       	cpc	r1, r19
    106c:	14 06       	cpc	r1, r20
    106e:	05 06       	cpc	r0, r21
    1070:	08 95       	ret

00001072 <__fp_round>:
    1072:	09 2e       	mov	r0, r25
    1074:	03 94       	inc	r0
    1076:	00 0c       	add	r0, r0
    1078:	11 f4       	brne	.+4      	; 0x107e <__fp_round+0xc>
    107a:	88 23       	and	r24, r24
    107c:	52 f0       	brmi	.+20     	; 0x1092 <__fp_round+0x20>
    107e:	bb 0f       	add	r27, r27
    1080:	40 f4       	brcc	.+16     	; 0x1092 <__fp_round+0x20>
    1082:	bf 2b       	or	r27, r31
    1084:	11 f4       	brne	.+4      	; 0x108a <__fp_round+0x18>
    1086:	60 ff       	sbrs	r22, 0
    1088:	04 c0       	rjmp	.+8      	; 0x1092 <__fp_round+0x20>
    108a:	6f 5f       	subi	r22, 0xFF	; 255
    108c:	7f 4f       	sbci	r23, 0xFF	; 255
    108e:	8f 4f       	sbci	r24, 0xFF	; 255
    1090:	9f 4f       	sbci	r25, 0xFF	; 255
    1092:	08 95       	ret

00001094 <__fp_split3>:
    1094:	57 fd       	sbrc	r21, 7
    1096:	90 58       	subi	r25, 0x80	; 128
    1098:	44 0f       	add	r20, r20
    109a:	55 1f       	adc	r21, r21
    109c:	59 f0       	breq	.+22     	; 0x10b4 <__fp_splitA+0x10>
    109e:	5f 3f       	cpi	r21, 0xFF	; 255
    10a0:	71 f0       	breq	.+28     	; 0x10be <__fp_splitA+0x1a>
    10a2:	47 95       	ror	r20

000010a4 <__fp_splitA>:
    10a4:	88 0f       	add	r24, r24
    10a6:	97 fb       	bst	r25, 7
    10a8:	99 1f       	adc	r25, r25
    10aa:	61 f0       	breq	.+24     	; 0x10c4 <__fp_splitA+0x20>
    10ac:	9f 3f       	cpi	r25, 0xFF	; 255
    10ae:	79 f0       	breq	.+30     	; 0x10ce <__fp_splitA+0x2a>
    10b0:	87 95       	ror	r24
    10b2:	08 95       	ret
    10b4:	12 16       	cp	r1, r18
    10b6:	13 06       	cpc	r1, r19
    10b8:	14 06       	cpc	r1, r20
    10ba:	55 1f       	adc	r21, r21
    10bc:	f2 cf       	rjmp	.-28     	; 0x10a2 <__fp_split3+0xe>
    10be:	46 95       	lsr	r20
    10c0:	f1 df       	rcall	.-30     	; 0x10a4 <__fp_splitA>
    10c2:	08 c0       	rjmp	.+16     	; 0x10d4 <__fp_splitA+0x30>
    10c4:	16 16       	cp	r1, r22
    10c6:	17 06       	cpc	r1, r23
    10c8:	18 06       	cpc	r1, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	f1 cf       	rjmp	.-30     	; 0x10b0 <__fp_splitA+0xc>
    10ce:	86 95       	lsr	r24
    10d0:	71 05       	cpc	r23, r1
    10d2:	61 05       	cpc	r22, r1
    10d4:	08 94       	sec
    10d6:	08 95       	ret

000010d8 <__fp_zero>:
    10d8:	e8 94       	clt

000010da <__fp_szero>:
    10da:	bb 27       	eor	r27, r27
    10dc:	66 27       	eor	r22, r22
    10de:	77 27       	eor	r23, r23
    10e0:	cb 01       	movw	r24, r22
    10e2:	97 f9       	bld	r25, 7
    10e4:	08 95       	ret

000010e6 <__gesf2>:
    10e6:	0e 94 fe 07 	call	0xffc	; 0xffc <__fp_cmp>
    10ea:	08 f4       	brcc	.+2      	; 0x10ee <__gesf2+0x8>
    10ec:	8f ef       	ldi	r24, 0xFF	; 255
    10ee:	08 95       	ret

000010f0 <__mulsf3>:
    10f0:	0e 94 8b 08 	call	0x1116	; 0x1116 <__mulsf3x>
    10f4:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__fp_round>
    10f8:	0e 94 2b 08 	call	0x1056	; 0x1056 <__fp_pscA>
    10fc:	38 f0       	brcs	.+14     	; 0x110c <__mulsf3+0x1c>
    10fe:	0e 94 32 08 	call	0x1064	; 0x1064 <__fp_pscB>
    1102:	20 f0       	brcs	.+8      	; 0x110c <__mulsf3+0x1c>
    1104:	95 23       	and	r25, r21
    1106:	11 f0       	breq	.+4      	; 0x110c <__mulsf3+0x1c>
    1108:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__fp_inf>
    110c:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_nan>
    1110:	11 24       	eor	r1, r1
    1112:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__fp_szero>

00001116 <__mulsf3x>:
    1116:	0e 94 4a 08 	call	0x1094	; 0x1094 <__fp_split3>
    111a:	70 f3       	brcs	.-36     	; 0x10f8 <__mulsf3+0x8>

0000111c <__mulsf3_pse>:
    111c:	95 9f       	mul	r25, r21
    111e:	c1 f3       	breq	.-16     	; 0x1110 <__mulsf3+0x20>
    1120:	95 0f       	add	r25, r21
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	55 1f       	adc	r21, r21
    1126:	62 9f       	mul	r22, r18
    1128:	f0 01       	movw	r30, r0
    112a:	72 9f       	mul	r23, r18
    112c:	bb 27       	eor	r27, r27
    112e:	f0 0d       	add	r31, r0
    1130:	b1 1d       	adc	r27, r1
    1132:	63 9f       	mul	r22, r19
    1134:	aa 27       	eor	r26, r26
    1136:	f0 0d       	add	r31, r0
    1138:	b1 1d       	adc	r27, r1
    113a:	aa 1f       	adc	r26, r26
    113c:	64 9f       	mul	r22, r20
    113e:	66 27       	eor	r22, r22
    1140:	b0 0d       	add	r27, r0
    1142:	a1 1d       	adc	r26, r1
    1144:	66 1f       	adc	r22, r22
    1146:	82 9f       	mul	r24, r18
    1148:	22 27       	eor	r18, r18
    114a:	b0 0d       	add	r27, r0
    114c:	a1 1d       	adc	r26, r1
    114e:	62 1f       	adc	r22, r18
    1150:	73 9f       	mul	r23, r19
    1152:	b0 0d       	add	r27, r0
    1154:	a1 1d       	adc	r26, r1
    1156:	62 1f       	adc	r22, r18
    1158:	83 9f       	mul	r24, r19
    115a:	a0 0d       	add	r26, r0
    115c:	61 1d       	adc	r22, r1
    115e:	22 1f       	adc	r18, r18
    1160:	74 9f       	mul	r23, r20
    1162:	33 27       	eor	r19, r19
    1164:	a0 0d       	add	r26, r0
    1166:	61 1d       	adc	r22, r1
    1168:	23 1f       	adc	r18, r19
    116a:	84 9f       	mul	r24, r20
    116c:	60 0d       	add	r22, r0
    116e:	21 1d       	adc	r18, r1
    1170:	82 2f       	mov	r24, r18
    1172:	76 2f       	mov	r23, r22
    1174:	6a 2f       	mov	r22, r26
    1176:	11 24       	eor	r1, r1
    1178:	9f 57       	subi	r25, 0x7F	; 127
    117a:	50 40       	sbci	r21, 0x00	; 0
    117c:	9a f0       	brmi	.+38     	; 0x11a4 <__mulsf3_pse+0x88>
    117e:	f1 f0       	breq	.+60     	; 0x11bc <__mulsf3_pse+0xa0>
    1180:	88 23       	and	r24, r24
    1182:	4a f0       	brmi	.+18     	; 0x1196 <__mulsf3_pse+0x7a>
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	bb 1f       	adc	r27, r27
    118a:	66 1f       	adc	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	88 1f       	adc	r24, r24
    1190:	91 50       	subi	r25, 0x01	; 1
    1192:	50 40       	sbci	r21, 0x00	; 0
    1194:	a9 f7       	brne	.-22     	; 0x1180 <__mulsf3_pse+0x64>
    1196:	9e 3f       	cpi	r25, 0xFE	; 254
    1198:	51 05       	cpc	r21, r1
    119a:	80 f0       	brcs	.+32     	; 0x11bc <__mulsf3_pse+0xa0>
    119c:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__fp_inf>
    11a0:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__fp_szero>
    11a4:	5f 3f       	cpi	r21, 0xFF	; 255
    11a6:	e4 f3       	brlt	.-8      	; 0x11a0 <__mulsf3_pse+0x84>
    11a8:	98 3e       	cpi	r25, 0xE8	; 232
    11aa:	d4 f3       	brlt	.-12     	; 0x11a0 <__mulsf3_pse+0x84>
    11ac:	86 95       	lsr	r24
    11ae:	77 95       	ror	r23
    11b0:	67 95       	ror	r22
    11b2:	b7 95       	ror	r27
    11b4:	f7 95       	ror	r31
    11b6:	e7 95       	ror	r30
    11b8:	9f 5f       	subi	r25, 0xFF	; 255
    11ba:	c1 f7       	brne	.-16     	; 0x11ac <__mulsf3_pse+0x90>
    11bc:	fe 2b       	or	r31, r30
    11be:	88 0f       	add	r24, r24
    11c0:	91 1d       	adc	r25, r1
    11c2:	96 95       	lsr	r25
    11c4:	87 95       	ror	r24
    11c6:	97 f9       	bld	r25, 7
    11c8:	08 95       	ret

000011ca <__tablejump2__>:
    11ca:	ee 0f       	add	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	05 90       	lpm	r0, Z+
    11d0:	f4 91       	lpm	r31, Z
    11d2:	e0 2d       	mov	r30, r0
    11d4:	09 94       	ijmp

000011d6 <_exit>:
    11d6:	f8 94       	cli

000011d8 <__stop_program>:
    11d8:	ff cf       	rjmp	.-2      	; 0x11d8 <__stop_program>
