
piano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000019dc  00001a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00001aa2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b00  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000193b  00000000  00000000  00001c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a38  00000000  00000000  00003553  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e3b  00000000  00000000  00003f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000364  00000000  00000000  00004dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005d4  00000000  00000000  0000512c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018e2  00000000  00000000  00005700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  00006fe2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__vector_1>
       8:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__vector_2>
       c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      68:	d0 05       	cpc	r29, r0
      6a:	d7 05       	cpc	r29, r7
      6c:	de 05       	cpc	r29, r14
      6e:	e5 05       	cpc	r30, r5
      70:	ec 05       	cpc	r30, r12
      72:	f3 05       	cpc	r31, r3
      74:	fa 05       	cpc	r31, r10
      76:	01 06       	cpc	r0, r17
      78:	23 06       	cpc	r2, r19
      7a:	2a 06       	cpc	r2, r26
      7c:	31 06       	cpc	r3, r17
      7e:	38 06       	cpc	r3, r24
      80:	3f 06       	cpc	r3, r31
      82:	46 06       	cpc	r4, r22
      84:	4d 06       	cpc	r4, r29
      86:	54 06       	cpc	r5, r20
      88:	77 06       	cpc	r7, r23
      8a:	7e 06       	cpc	r7, r30
      8c:	85 06       	cpc	r8, r21
      8e:	8c 06       	cpc	r8, r28
      90:	93 06       	cpc	r9, r19
      92:	9a 06       	cpc	r9, r26
      94:	a1 06       	cpc	r10, r17
      96:	a8 06       	cpc	r10, r24

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ec ed       	ldi	r30, 0xDC	; 220
      ac:	f9 e1       	ldi	r31, 0x19	; 25
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a2 35       	cpi	r26, 0x52	; 82
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>
      ba:	0e 94 30 07 	call	0xe60	; 0xe60 <main>
      be:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <_exit>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <lcd_send_command>:
	
}

void lcd_send_command (uint8_t command)
{
	DATA_BUS=(command&0b11110000);
      c6:	98 2f       	mov	r25, r24
      c8:	90 7f       	andi	r25, 0xF0	; 240
      ca:	9b b9       	out	0x0b, r25	; 11
	CTL_BUS &=~(1<<LCD_RS);
      cc:	43 98       	cbi	0x08, 3	; 8
	CTL_BUS |=(1<<LCD_EN);
      ce:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d0:	ef e9       	ldi	r30, 0x9F	; 159
      d2:	ff e0       	ldi	r31, 0x0F	; 15
      d4:	31 97       	sbiw	r30, 0x01	; 1
      d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_send_command+0xe>
      d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_send_command+0x14>
      da:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
      dc:	45 98       	cbi	0x08, 5	; 8
      de:	ef e9       	ldi	r30, 0x9F	; 159
      e0:	ff e0       	ldi	r31, 0x0F	; 15
      e2:	31 97       	sbiw	r30, 0x01	; 1
      e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_send_command+0x1c>
      e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_send_command+0x22>
      e8:	00 00       	nop
	_delay_ms(1);
	DATA_BUS=((command&0b00001111)<<4);
      ea:	f0 e1       	ldi	r31, 0x10	; 16
      ec:	8f 9f       	mul	r24, r31
      ee:	c0 01       	movw	r24, r0
      f0:	11 24       	eor	r1, r1
      f2:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS |=(1<<LCD_EN);
      f4:	45 9a       	sbi	0x08, 5	; 8
      f6:	8f e9       	ldi	r24, 0x9F	; 159
      f8:	9f e0       	ldi	r25, 0x0F	; 15
      fa:	01 97       	sbiw	r24, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_send_command+0x34>
      fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_send_command+0x3a>
     100:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
     102:	45 98       	cbi	0x08, 5	; 8
     104:	ef e9       	ldi	r30, 0x9F	; 159
     106:	ff e0       	ldi	r31, 0x0F	; 15
     108:	31 97       	sbiw	r30, 0x01	; 1
     10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_send_command+0x42>
     10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_send_command+0x48>
     10e:	00 00       	nop
     110:	08 95       	ret

00000112 <lcd_init>:


void lcd_init(void)
{
	
	DATA_DDR = (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5)| (1<<LCD_D4);
     112:	80 ef       	ldi	r24, 0xF0	; 240
     114:	8a b9       	out	0x0a, r24	; 10
	CTL_DDR |= (1<<LCD_EN)|(1<<LCD_RW)|(1<<LCD_RS);
     116:	87 b1       	in	r24, 0x07	; 7
     118:	88 63       	ori	r24, 0x38	; 56
     11a:	87 b9       	out	0x07, r24	; 7

	
	DATA_BUS = (0<<LCD_D7)|(0<<LCD_D6)|(1<<LCD_D5)|(0<<LCD_D4);
     11c:	80 e2       	ldi	r24, 0x20	; 32
     11e:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS|= (1<<LCD_EN)|(0<<LCD_RW)|(0<<LCD_RS);
     120:	45 9a       	sbi	0x08, 5	; 8
     122:	8f e9       	ldi	r24, 0x9F	; 159
     124:	9f e0       	ldi	r25, 0x0F	; 15
     126:	01 97       	sbiw	r24, 0x01	; 1
     128:	f1 f7       	brne	.-4      	; 0x126 <lcd_init+0x14>
     12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_init+0x1a>
     12c:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
     12e:	45 98       	cbi	0x08, 5	; 8
     130:	8f e9       	ldi	r24, 0x9F	; 159
     132:	9f e0       	ldi	r25, 0x0F	; 15
     134:	01 97       	sbiw	r24, 0x01	; 1
     136:	f1 f7       	brne	.-4      	; 0x134 <lcd_init+0x22>
     138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_init+0x28>
     13a:	00 00       	nop
	_delay_ms(1);
	
	lcd_send_command(LCD_CMD_4BIT_2ROW_5X7);
     13c:	88 e2       	ldi	r24, 0x28	; 40
     13e:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
     142:	8f e9       	ldi	r24, 0x9F	; 159
     144:	9f e0       	ldi	r25, 0x0F	; 15
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <lcd_init+0x34>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_init+0x3a>
     14c:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(LCD_CMD_DISPLAY_NO_CURSOR);
     14e:	8c e0       	ldi	r24, 0x0C	; 12
     150:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
     154:	8f e9       	ldi	r24, 0x9F	; 159
     156:	9f e0       	ldi	r25, 0x0F	; 15
     158:	01 97       	sbiw	r24, 0x01	; 1
     15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_init+0x46>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <lcd_init+0x4c>
     15e:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(0x80);
     160:	80 e8       	ldi	r24, 0x80	; 128
     162:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
     166:	08 95       	ret

00000168 <lcd_write_character>:
	}
}
void lcd_write_character(uint8_t character)
{
	
	DATA_BUS=(character & 0b11110000);
     168:	98 2f       	mov	r25, r24
     16a:	90 7f       	andi	r25, 0xF0	; 240
     16c:	9b b9       	out	0x0b, r25	; 11
	CTL_BUS|=(1<<LCD_RS);
     16e:	43 9a       	sbi	0x08, 3	; 8
	CTL_BUS |=(1<<LCD_EN);
     170:	45 9a       	sbi	0x08, 5	; 8
     172:	ef e3       	ldi	r30, 0x3F	; 63
     174:	ff e1       	ldi	r31, 0x1F	; 31
     176:	31 97       	sbiw	r30, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <lcd_write_character+0xe>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_write_character+0x14>
     17c:	00 00       	nop
	_delay_ms(2);
	CTL_BUS &=~(1<<LCD_EN);
     17e:	45 98       	cbi	0x08, 5	; 8
     180:	ef e3       	ldi	r30, 0x3F	; 63
     182:	ff e1       	ldi	r31, 0x1F	; 31
     184:	31 97       	sbiw	r30, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_write_character+0x1c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_write_character+0x22>
     18a:	00 00       	nop
	_delay_ms(2);
	DATA_BUS=((character & 0b00001111)<<4);
     18c:	f0 e1       	ldi	r31, 0x10	; 16
     18e:	8f 9f       	mul	r24, r31
     190:	c0 01       	movw	r24, r0
     192:	11 24       	eor	r1, r1
     194:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS |=(1<<LCD_EN);
     196:	45 9a       	sbi	0x08, 5	; 8
     198:	8f e3       	ldi	r24, 0x3F	; 63
     19a:	9f e1       	ldi	r25, 0x1F	; 31
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_write_character+0x34>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_write_character+0x3a>
     1a2:	00 00       	nop
	_delay_ms(2);
	CTL_BUS &=~(1<<LCD_EN);
     1a4:	45 98       	cbi	0x08, 5	; 8
     1a6:	ef e3       	ldi	r30, 0x3F	; 63
     1a8:	ff e1       	ldi	r31, 0x1F	; 31
     1aa:	31 97       	sbiw	r30, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_write_character+0x42>
     1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_write_character+0x48>
     1b0:	00 00       	nop
     1b2:	08 95       	ret

000001b4 <lcd_write_word>:
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
	_delay_ms(1);
}
void lcd_write_word(uint8_t word[20])
{
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	ec 01       	movw	r28, r24
	int i=0;
	while(word[i]!='\0')
     1ba:	88 81       	ld	r24, Y
     1bc:	88 23       	and	r24, r24
     1be:	31 f0       	breq	.+12     	; 0x1cc <lcd_write_word+0x18>
     1c0:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_write_character(word[i]);
     1c2:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_write_character>
	_delay_ms(1);
}
void lcd_write_word(uint8_t word[20])
{
	int i=0;
	while(word[i]!='\0')
     1c6:	89 91       	ld	r24, Y+
     1c8:	81 11       	cpse	r24, r1
     1ca:	fb cf       	rjmp	.-10     	; 0x1c2 <lcd_write_word+0xe>
	{
		lcd_write_character(word[i]);
		i++;
	}
}
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	08 95       	ret

000001d2 <lcd_clear>:
	_delay_ms(2);
	
}
void lcd_clear(void)
{
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
     1d8:	08 95       	ret

000001da <lcd_goto_xy>:
	
}
void lcd_goto_xy (uint8_t line,uint8_t pos)				//line = 0 or 1
{
	lcd_send_command((0x80|(line<<6))+pos);
     1da:	20 e4       	ldi	r18, 0x40	; 64
     1dc:	82 9f       	mul	r24, r18
     1de:	c0 01       	movw	r24, r0
     1e0:	11 24       	eor	r1, r1
     1e2:	80 68       	ori	r24, 0x80	; 128
     1e4:	86 0f       	add	r24, r22
     1e6:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ea:	87 ec       	ldi	r24, 0xC7	; 199
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_goto_xy+0x14>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_goto_xy+0x1a>
     1f4:	00 00       	nop
     1f6:	08 95       	ret

000001f8 <USART_Init>:
#define DATA_BIT   (3<<UCSZ00)  // USART Data Bit Selection

void USART_Init()
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
     1f8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALER;
     1fc:	87 e6       	ldi	r24, 0x67	; 103
     1fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
     202:	86 e0       	ldi	r24, 0x06	; 6
     204:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     208:	88 e1       	ldi	r24, 0x18	; 24
     20a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     20e:	08 95       	ret

00000210 <USART_TransmitChar>:
}


void USART_TransmitChar(uint8_t DataByte) {
	while (!(UCSR0A & (1<<UDRE0))); // Wait until UDR is ready
     210:	e0 ec       	ldi	r30, 0xC0	; 192
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	90 81       	ld	r25, Z
     216:	95 ff       	sbrs	r25, 5
     218:	fd cf       	rjmp	.-6      	; 0x214 <USART_TransmitChar+0x4>
	UDR0 = DataByte;
     21a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     21e:	08 95       	ret

00000220 <USART_TransmitString>:
}

void USART_TransmitString(char *str) {
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	ec 01       	movw	r28, r24
	while (*str) {
     226:	88 81       	ld	r24, Y
     228:	88 23       	and	r24, r24
     22a:	31 f0       	breq	.+12     	; 0x238 <USART_TransmitString+0x18>
     22c:	21 96       	adiw	r28, 0x01	; 1
		USART_TransmitChar(*str);
     22e:	0e 94 08 01 	call	0x210	; 0x210 <USART_TransmitChar>
	while (!(UCSR0A & (1<<UDRE0))); // Wait until UDR is ready
	UDR0 = DataByte;
}

void USART_TransmitString(char *str) {
	while (*str) {
     232:	89 91       	ld	r24, Y+
     234:	81 11       	cpse	r24, r1
     236:	fb cf       	rjmp	.-10     	; 0x22e <USART_TransmitString+0xe>
		USART_TransmitChar(*str);
		str++;
	}
}
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	08 95       	ret

0000023e <USART_TransmitInteger>:

void USART_TransmitInteger(int value) {
     23e:	0f 93       	push	r16
     240:	1f 93       	push	r17
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
     24a:	2a 97       	sbiw	r28, 0x0a	; 10
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
	char buffer[10]; // Assuming a maximum of 10 digits for the integer
	sprintf(buffer, "%d", value);
     256:	9f 93       	push	r25
     258:	8f 93       	push	r24
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	9f 93       	push	r25
     260:	8f 93       	push	r24
     262:	8e 01       	movw	r16, r28
     264:	0f 5f       	subi	r16, 0xFF	; 255
     266:	1f 4f       	sbci	r17, 0xFF	; 255
     268:	1f 93       	push	r17
     26a:	0f 93       	push	r16
     26c:	0e 94 02 0a 	call	0x1404	; 0x1404 <sprintf>
	USART_TransmitString(buffer);
     270:	c8 01       	movw	r24, r16
     272:	0e 94 10 01 	call	0x220	; 0x220 <USART_TransmitString>
}
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	2a 96       	adiw	r28, 0x0a	; 10
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	f8 94       	cli
     288:	de bf       	out	0x3e, r29	; 62
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	cd bf       	out	0x3d, r28	; 61
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	08 95       	ret

00000298 <USART_TransmitFixedPoint>:

void USART_TransmitFixedPoint(float value) {
     298:	8f 92       	push	r8
     29a:	9f 92       	push	r9
     29c:	af 92       	push	r10
     29e:	bf 92       	push	r11
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	2a 97       	sbiw	r28, 0x0a	; 10
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	4b 01       	movw	r8, r22
     2c2:	5c 01       	movw	r10, r24
	char buffer[10]; // Assuming a maximum of 10 digits for the integer
	sprintf(buffer, "%d.%04u ", (int)value , (int) ((value*10000)-(int)value*10000) );
     2c4:	0e 94 a2 08 	call	0x1144	; 0x1144 <__fixsfsi>
     2c8:	6b 01       	movw	r12, r22
     2ca:	7c 01       	movw	r14, r24
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e4       	ldi	r19, 0x40	; 64
     2d0:	4c e1       	ldi	r20, 0x1C	; 28
     2d2:	56 e4       	ldi	r21, 0x46	; 70
     2d4:	c5 01       	movw	r24, r10
     2d6:	b4 01       	movw	r22, r8
     2d8:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     2dc:	4b 01       	movw	r8, r22
     2de:	5c 01       	movw	r10, r24
     2e0:	80 e1       	ldi	r24, 0x10	; 16
     2e2:	97 e2       	ldi	r25, 0x27	; 39
     2e4:	8c 9d       	mul	r24, r12
     2e6:	b0 01       	movw	r22, r0
     2e8:	8d 9d       	mul	r24, r13
     2ea:	70 0d       	add	r23, r0
     2ec:	9c 9d       	mul	r25, r12
     2ee:	70 0d       	add	r23, r0
     2f0:	11 24       	eor	r1, r1
     2f2:	07 2e       	mov	r0, r23
     2f4:	00 0c       	add	r0, r0
     2f6:	88 0b       	sbc	r24, r24
     2f8:	99 0b       	sbc	r25, r25
     2fa:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__floatsisf>
     2fe:	9b 01       	movw	r18, r22
     300:	ac 01       	movw	r20, r24
     302:	c5 01       	movw	r24, r10
     304:	b4 01       	movw	r22, r8
     306:	0e 94 be 07 	call	0xf7c	; 0xf7c <__subsf3>
     30a:	0e 94 a2 08 	call	0x1144	; 0x1144 <__fixsfsi>
     30e:	7f 93       	push	r23
     310:	6f 93       	push	r22
     312:	df 92       	push	r13
     314:	cf 92       	push	r12
     316:	85 e0       	ldi	r24, 0x05	; 5
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	9f 93       	push	r25
     31c:	8f 93       	push	r24
     31e:	8e 01       	movw	r16, r28
     320:	0f 5f       	subi	r16, 0xFF	; 255
     322:	1f 4f       	sbci	r17, 0xFF	; 255
     324:	1f 93       	push	r17
     326:	0f 93       	push	r16
     328:	0e 94 02 0a 	call	0x1404	; 0x1404 <sprintf>
	USART_TransmitString(buffer);
     32c:	c8 01       	movw	r24, r16
     32e:	0e 94 10 01 	call	0x220	; 0x220 <USART_TransmitString>
}
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	de bf       	out	0x3e, r29	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	cd bf       	out	0x3d, r28	; 61
     33c:	2a 96       	adiw	r28, 0x0a	; 10
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	bf 90       	pop	r11
     35a:	af 90       	pop	r10
     35c:	9f 90       	pop	r9
     35e:	8f 90       	pop	r8
     360:	08 95       	ret

00000362 <Play_Sound_violin>:


void Play_Sound_violin(float frequency)
{
     362:	2f 92       	push	r2
     364:	3f 92       	push	r3
     366:	4f 92       	push	r4
     368:	5f 92       	push	r5
     36a:	6f 92       	push	r6
     36c:	7f 92       	push	r7
     36e:	8f 92       	push	r8
     370:	9f 92       	push	r9
     372:	af 92       	push	r10
     374:	bf 92       	push	r11
     376:	cf 92       	push	r12
     378:	df 92       	push	r13
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
     38a:	6c 97       	sbiw	r28, 0x1c	; 28
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	de bf       	out	0x3e, r29	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	cd bf       	out	0x3d, r28	; 61
     396:	69 83       	std	Y+1, r22	; 0x01
     398:	7a 83       	std	Y+2, r23	; 0x02
     39a:	8b 83       	std	Y+3, r24	; 0x03
     39c:	9c 83       	std	Y+4, r25	; 0x04
	long int i,cycles;
	float wavelength = 1.25;

	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);
     39e:	23 9a       	sbi	0x04, 3	; 4


		for(int j=0;j<20;j++){
			_delay_ms(frequency / 10.5);
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	48 e2       	ldi	r20, 0x28	; 40
     3a6:	51 e4       	ldi	r21, 0x41	; 65
     3a8:	69 81       	ldd	r22, Y+1	; 0x01
     3aa:	7a 81       	ldd	r23, Y+2	; 0x02
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	9c 81       	ldd	r25, Y+4	; 0x04
     3b0:	0e 94 30 08 	call	0x1060	; 0x1060 <__divsf3>
     3b4:	6d 83       	std	Y+5, r22	; 0x05
     3b6:	7e 83       	std	Y+6, r23	; 0x06
     3b8:	8f 83       	std	Y+7, r24	; 0x07
     3ba:	98 87       	std	Y+8, r25	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	4a e7       	ldi	r20, 0x7A	; 122
     3c2:	55 e4       	ldi	r21, 0x45	; 69
     3c4:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     3c8:	2b 01       	movw	r4, r22
     3ca:	3c 01       	movw	r6, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3cc:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
     3d0:	6b 01       	movw	r12, r22
     3d2:	7c 01       	movw	r14, r24
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	40 e8       	ldi	r20, 0x80	; 128
     3da:	5f e3       	ldi	r21, 0x3F	; 63
     3dc:	c3 01       	movw	r24, r6
     3de:	b2 01       	movw	r22, r4
     3e0:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     3e4:	88 23       	and	r24, r24
     3e6:	1c f4       	brge	.+6      	; 0x3ee <Play_Sound_violin+0x8c>
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <Play_Sound_violin+0x90>
     3ee:	9c 2d       	mov	r25, r12
     3f0:	8d 2d       	mov	r24, r13
     3f2:	29 2e       	mov	r2, r25
     3f4:	38 2e       	mov	r3, r24
     3f6:	84 e1       	ldi	r24, 0x14	; 20
     3f8:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3fa:	00 e9       	ldi	r16, 0x90	; 144
     3fc:	11 e0       	ldi	r17, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     3fe:	9a 87       	std	Y+10, r25	; 0x0a
     400:	89 87       	std	Y+9, r24	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e8       	ldi	r20, 0x80	; 128
     408:	5f e3       	ldi	r21, 0x3F	; 63
     40a:	c3 01       	movw	r24, r6
     40c:	b2 01       	movw	r22, r4
     40e:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     412:	88 23       	and	r24, r24
     414:	04 f1       	brlt	.+64     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		__ticks = 1;
	else if (__tmp > 65535)
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	3f ef       	ldi	r19, 0xFF	; 255
     41a:	4f e7       	ldi	r20, 0x7F	; 127
     41c:	57 e4       	ldi	r21, 0x47	; 71
     41e:	c3 01       	movw	r24, r6
     420:	b2 01       	movw	r22, r4
     422:	0e 94 8a 09 	call	0x1314	; 0x1314 <__gesf2>
     426:	18 16       	cp	r1, r24
     428:	b4 f4       	brge	.+44     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	40 e2       	ldi	r20, 0x20	; 32
     430:	51 e4       	ldi	r21, 0x41	; 65
     432:	6d 81       	ldd	r22, Y+5	; 0x05
     434:	7e 81       	ldd	r23, Y+6	; 0x06
     436:	8f 81       	ldd	r24, Y+7	; 0x07
     438:	98 85       	ldd	r25, Y+8	; 0x08
     43a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     43e:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
		while(__ticks)
     442:	61 15       	cp	r22, r1
     444:	71 05       	cpc	r23, r1
     446:	51 f0       	breq	.+20     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     448:	c8 01       	movw	r24, r16
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     44e:	61 50       	subi	r22, 0x01	; 1
     450:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     452:	d1 f7       	brne	.-12     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     454:	03 c0       	rjmp	.+6      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     456:	c1 01       	movw	r24, r2
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			BUZZER_PORT |= (1 << BUZZER_PIN);
     45c:	2b 9a       	sbi	0x05, 3	; 5
			_delay_ms(22 * frequency / 10.5); 
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	40 eb       	ldi	r20, 0xB0	; 176
     464:	51 e4       	ldi	r21, 0x41	; 65
     466:	69 81       	ldd	r22, Y+1	; 0x01
     468:	7a 81       	ldd	r23, Y+2	; 0x02
     46a:	8b 81       	ldd	r24, Y+3	; 0x03
     46c:	9c 81       	ldd	r25, Y+4	; 0x04
     46e:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	48 e2       	ldi	r20, 0x28	; 40
     478:	51 e4       	ldi	r21, 0x41	; 65
     47a:	0e 94 30 08 	call	0x1060	; 0x1060 <__divsf3>
     47e:	6b 01       	movw	r12, r22
     480:	7c 01       	movw	r14, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	4a e7       	ldi	r20, 0x7A	; 122
     488:	55 e4       	ldi	r21, 0x45	; 69
     48a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     48e:	4b 01       	movw	r8, r22
     490:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	40 e8       	ldi	r20, 0x80	; 128
     498:	5f e3       	ldi	r21, 0x3F	; 63
     49a:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     49e:	88 23       	and	r24, r24
     4a0:	1c f1       	brlt	.+70     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		__ticks = 1;
	else if (__tmp > 65535)
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	3f ef       	ldi	r19, 0xFF	; 255
     4a6:	4f e7       	ldi	r20, 0x7F	; 127
     4a8:	57 e4       	ldi	r21, 0x47	; 71
     4aa:	c5 01       	movw	r24, r10
     4ac:	b4 01       	movw	r22, r8
     4ae:	0e 94 8a 09 	call	0x1314	; 0x1314 <__gesf2>
     4b2:	18 16       	cp	r1, r24
     4b4:	a4 f4       	brge	.+40     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e2       	ldi	r20, 0x20	; 32
     4bc:	51 e4       	ldi	r21, 0x41	; 65
     4be:	c7 01       	movw	r24, r14
     4c0:	b6 01       	movw	r22, r12
     4c2:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     4c6:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
		while(__ticks)
     4ca:	61 15       	cp	r22, r1
     4cc:	71 05       	cpc	r23, r1
     4ce:	89 f0       	breq	.+34     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4d0:	c8 01       	movw	r24, r16
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4d6:	61 50       	subi	r22, 0x01	; 1
     4d8:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4da:	d1 f7       	brne	.-12     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4dc:	0a c0       	rjmp	.+20     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4de:	c5 01       	movw	r24, r10
     4e0:	b4 01       	movw	r22, r8
     4e2:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	cb 01       	movw	r24, r22
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     4f2:	2b 98       	cbi	0x05, 3	; 5
     4f4:	89 85       	ldd	r24, Y+9	; 0x09
     4f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	9a 87       	std	Y+10, r25	; 0x0a
     4fc:	89 87       	std	Y+9, r24	; 0x09
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);


		for(int j=0;j<20;j++){
     4fe:	89 2b       	or	r24, r25
     500:	09 f0       	breq	.+2      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     502:	7f cf       	rjmp	.-258    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			BUZZER_PORT |= (1 << BUZZER_PIN);
			_delay_ms(22 * frequency / 10.5); 
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		for(int j=0;j<10;j++){
			_delay_ms(frequency / 10.55);
     504:	2d ec       	ldi	r18, 0xCD	; 205
     506:	3c ec       	ldi	r19, 0xCC	; 204
     508:	48 e2       	ldi	r20, 0x28	; 40
     50a:	51 e4       	ldi	r21, 0x41	; 65
     50c:	69 81       	ldd	r22, Y+1	; 0x01
     50e:	7a 81       	ldd	r23, Y+2	; 0x02
     510:	8b 81       	ldd	r24, Y+3	; 0x03
     512:	9c 81       	ldd	r25, Y+4	; 0x04
     514:	0e 94 30 08 	call	0x1060	; 0x1060 <__divsf3>
     518:	6d 87       	std	Y+13, r22	; 0x0d
     51a:	7e 87       	std	Y+14, r23	; 0x0e
     51c:	8f 87       	std	Y+15, r24	; 0x0f
     51e:	98 8b       	std	Y+16, r25	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	4a e7       	ldi	r20, 0x7A	; 122
     526:	55 e4       	ldi	r21, 0x45	; 69
     528:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     52c:	2b 01       	movw	r4, r22
     52e:	3c 01       	movw	r6, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     530:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
     534:	6b 01       	movw	r12, r22
     536:	7c 01       	movw	r14, r24
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	40 e8       	ldi	r20, 0x80	; 128
     53e:	5f e3       	ldi	r21, 0x3F	; 63
     540:	c3 01       	movw	r24, r6
     542:	b2 01       	movw	r22, r4
     544:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     548:	88 23       	and	r24, r24
     54a:	1c f4       	brge	.+6      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	02 c0       	rjmp	.+4      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     552:	9c 2d       	mov	r25, r12
     554:	8d 2d       	mov	r24, r13
     556:	29 2e       	mov	r2, r25
     558:	38 2e       	mov	r3, r24
     55a:	8a e0       	ldi	r24, 0x0A	; 10
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	00 e9       	ldi	r16, 0x90	; 144
     560:	11 e0       	ldi	r17, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     562:	bb 24       	eor	r11, r11
     564:	b3 94       	inc	r11
     566:	a1 2c       	mov	r10, r1
     568:	9a 8b       	std	Y+18, r25	; 0x12
     56a:	89 8b       	std	Y+17, r24	; 0x11
     56c:	bd 82       	std	Y+5, r11	; 0x05
     56e:	a9 86       	std	Y+9, r10	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 e8       	ldi	r20, 0x80	; 128
     576:	5f e3       	ldi	r21, 0x3F	; 63
     578:	c3 01       	movw	r24, r6
     57a:	b2 01       	movw	r22, r4
     57c:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     580:	88 23       	and	r24, r24
     582:	04 f1       	brlt	.+64     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
		__ticks = 1;
	else if (__tmp > 65535)
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	3f ef       	ldi	r19, 0xFF	; 255
     588:	4f e7       	ldi	r20, 0x7F	; 127
     58a:	57 e4       	ldi	r21, 0x47	; 71
     58c:	c3 01       	movw	r24, r6
     58e:	b2 01       	movw	r22, r4
     590:	0e 94 8a 09 	call	0x1314	; 0x1314 <__gesf2>
     594:	18 16       	cp	r1, r24
     596:	b4 f4       	brge	.+44     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e2       	ldi	r20, 0x20	; 32
     59e:	51 e4       	ldi	r21, 0x41	; 65
     5a0:	6d 85       	ldd	r22, Y+13	; 0x0d
     5a2:	7e 85       	ldd	r23, Y+14	; 0x0e
     5a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     5a6:	98 89       	ldd	r25, Y+16	; 0x10
     5a8:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     5ac:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
		while(__ticks)
     5b0:	61 15       	cp	r22, r1
     5b2:	71 05       	cpc	r23, r1
     5b4:	51 f0       	breq	.+20     	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
     5b6:	c8 01       	movw	r24, r16
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5bc:	61 50       	subi	r22, 0x01	; 1
     5be:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5c0:	d1 f7       	brne	.-12     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     5c2:	03 c0       	rjmp	.+6      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
     5c4:	c1 01       	movw	r24, r2
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
			BUZZER_PORT |= (1 << BUZZER_PIN);
     5ca:	2b 9a       	sbi	0x05, 3	; 5
			_delay_ms(22.1 * frequency / 10.55);
     5cc:	2d ec       	ldi	r18, 0xCD	; 205
     5ce:	3c ec       	ldi	r19, 0xCC	; 204
     5d0:	40 eb       	ldi	r20, 0xB0	; 176
     5d2:	51 e4       	ldi	r21, 0x41	; 65
     5d4:	69 81       	ldd	r22, Y+1	; 0x01
     5d6:	7a 81       	ldd	r23, Y+2	; 0x02
     5d8:	8b 81       	ldd	r24, Y+3	; 0x03
     5da:	9c 81       	ldd	r25, Y+4	; 0x04
     5dc:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     5e0:	2d ec       	ldi	r18, 0xCD	; 205
     5e2:	3c ec       	ldi	r19, 0xCC	; 204
     5e4:	48 e2       	ldi	r20, 0x28	; 40
     5e6:	51 e4       	ldi	r21, 0x41	; 65
     5e8:	0e 94 30 08 	call	0x1060	; 0x1060 <__divsf3>
     5ec:	4b 01       	movw	r8, r22
     5ee:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	4a e7       	ldi	r20, 0x7A	; 122
     5f6:	55 e4       	ldi	r21, 0x45	; 69
     5f8:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     5fc:	6b 01       	movw	r12, r22
     5fe:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	40 e8       	ldi	r20, 0x80	; 128
     606:	5f e3       	ldi	r21, 0x3F	; 63
     608:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     60c:	88 23       	and	r24, r24
     60e:	1c f1       	brlt	.+70     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
		__ticks = 1;
	else if (__tmp > 65535)
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	3f ef       	ldi	r19, 0xFF	; 255
     614:	4f e7       	ldi	r20, 0x7F	; 127
     616:	57 e4       	ldi	r21, 0x47	; 71
     618:	c7 01       	movw	r24, r14
     61a:	b6 01       	movw	r22, r12
     61c:	0e 94 8a 09 	call	0x1314	; 0x1314 <__gesf2>
     620:	18 16       	cp	r1, r24
     622:	a4 f4       	brge	.+40     	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	40 e2       	ldi	r20, 0x20	; 32
     62a:	51 e4       	ldi	r21, 0x41	; 65
     62c:	c5 01       	movw	r24, r10
     62e:	b4 01       	movw	r22, r8
     630:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     634:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
		while(__ticks)
     638:	61 15       	cp	r22, r1
     63a:	71 05       	cpc	r23, r1
     63c:	89 f0       	breq	.+34     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
     63e:	c8 01       	movw	r24, r16
     640:	01 97       	sbiw	r24, 0x01	; 1
     642:	f1 f7       	brne	.-4      	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     644:	61 50       	subi	r22, 0x01	; 1
     646:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     648:	d1 f7       	brne	.-12     	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
     64a:	0a c0       	rjmp	.+20     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     64c:	c7 01       	movw	r24, r14
     64e:	b6 01       	movw	r22, r12
     650:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
     654:	02 c0       	rjmp	.+4      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     656:	6d 81       	ldd	r22, Y+5	; 0x05
     658:	79 85       	ldd	r23, Y+9	; 0x09
     65a:	cb 01       	movw	r24, r22
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     660:	2b 98       	cbi	0x05, 3	; 5
     662:	89 89       	ldd	r24, Y+17	; 0x11
     664:	9a 89       	ldd	r25, Y+18	; 0x12
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	9a 8b       	std	Y+18, r25	; 0x12
     66a:	89 8b       	std	Y+17, r24	; 0x11
			_delay_ms(frequency / 10.5);
			BUZZER_PORT |= (1 << BUZZER_PIN);
			_delay_ms(22 * frequency / 10.5); 
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		for(int j=0;j<10;j++){
     66c:	89 2b       	or	r24, r25
     66e:	09 f0       	breq	.+2      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
     670:	7f cf       	rjmp	.-258    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     672:	8b 8a       	std	Y+19, r8	; 0x13
     674:	9c 8a       	std	Y+20, r9	; 0x14
     676:	ad 8a       	std	Y+21, r10	; 0x15
     678:	be 8a       	std	Y+22, r11	; 0x16
			_delay_ms(22.1 * frequency / 10.55);
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		
		for(int j=0;j<5;j++){
			_delay_ms(frequency / 10.6);
     67a:	2a e9       	ldi	r18, 0x9A	; 154
     67c:	39 e9       	ldi	r19, 0x99	; 153
     67e:	49 e2       	ldi	r20, 0x29	; 41
     680:	51 e4       	ldi	r21, 0x41	; 65
     682:	69 81       	ldd	r22, Y+1	; 0x01
     684:	7a 81       	ldd	r23, Y+2	; 0x02
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	9c 81       	ldd	r25, Y+4	; 0x04
     68a:	0e 94 30 08 	call	0x1060	; 0x1060 <__divsf3>
     68e:	6f 8b       	std	Y+23, r22	; 0x17
     690:	78 8f       	std	Y+24, r23	; 0x18
     692:	89 8f       	std	Y+25, r24	; 0x19
     694:	9a 8f       	std	Y+26, r25	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	4a e7       	ldi	r20, 0x7A	; 122
     69c:	55 e4       	ldi	r21, 0x45	; 69
     69e:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     6a2:	69 87       	std	Y+9, r22	; 0x09
     6a4:	7a 87       	std	Y+10, r23	; 0x0a
     6a6:	8b 87       	std	Y+11, r24	; 0x0b
     6a8:	9c 87       	std	Y+12, r25	; 0x0c
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6aa:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
     6ae:	4b 01       	movw	r8, r22
     6b0:	5c 01       	movw	r10, r24
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	40 e8       	ldi	r20, 0x80	; 128
     6b8:	5f e3       	ldi	r21, 0x3F	; 63
     6ba:	69 85       	ldd	r22, Y+9	; 0x09
     6bc:	7a 85       	ldd	r23, Y+10	; 0x0a
     6be:	8b 85       	ldd	r24, Y+11	; 0x0b
     6c0:	9c 85       	ldd	r25, Y+12	; 0x0c
     6c2:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     6c6:	88 23       	and	r24, r24
     6c8:	1c f4       	brge	.+6      	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
     6d0:	98 2d       	mov	r25, r8
     6d2:	89 2d       	mov	r24, r9
     6d4:	99 8b       	std	Y+17, r25	; 0x11
     6d6:	8a 8b       	std	Y+18, r24	; 0x12
     6d8:	85 e0       	ldi	r24, 0x05	; 5
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	00 e9       	ldi	r16, 0x90	; 144
     6de:	11 e0       	ldi	r17, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     6e0:	9c 8f       	std	Y+28, r25	; 0x1c
     6e2:	8b 8f       	std	Y+27, r24	; 0x1b
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	40 e8       	ldi	r20, 0x80	; 128
     6ea:	5f e3       	ldi	r21, 0x3F	; 63
     6ec:	69 85       	ldd	r22, Y+9	; 0x09
     6ee:	7a 85       	ldd	r23, Y+10	; 0x0a
     6f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     6f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     6f4:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     6f8:	88 23       	and	r24, r24
     6fa:	14 f1       	brlt	.+68     	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
		__ticks = 1;
	else if (__tmp > 65535)
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	3f ef       	ldi	r19, 0xFF	; 255
     700:	4f e7       	ldi	r20, 0x7F	; 127
     702:	57 e4       	ldi	r21, 0x47	; 71
     704:	69 85       	ldd	r22, Y+9	; 0x09
     706:	7a 85       	ldd	r23, Y+10	; 0x0a
     708:	8b 85       	ldd	r24, Y+11	; 0x0b
     70a:	9c 85       	ldd	r25, Y+12	; 0x0c
     70c:	0e 94 8a 09 	call	0x1314	; 0x1314 <__gesf2>
     710:	18 16       	cp	r1, r24
     712:	b4 f4       	brge	.+44     	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	40 e2       	ldi	r20, 0x20	; 32
     71a:	51 e4       	ldi	r21, 0x41	; 65
     71c:	6f 89       	ldd	r22, Y+23	; 0x17
     71e:	78 8d       	ldd	r23, Y+24	; 0x18
     720:	89 8d       	ldd	r24, Y+25	; 0x19
     722:	9a 8d       	ldd	r25, Y+26	; 0x1a
     724:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     728:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
		while(__ticks)
     72c:	61 15       	cp	r22, r1
     72e:	71 05       	cpc	r23, r1
     730:	59 f0       	breq	.+22     	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
     732:	c8 01       	movw	r24, r16
     734:	01 97       	sbiw	r24, 0x01	; 1
     736:	f1 f7       	brne	.-4      	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     738:	61 50       	subi	r22, 0x01	; 1
     73a:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73c:	d1 f7       	brne	.-12     	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
     73e:	04 c0       	rjmp	.+8      	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
     740:	89 89       	ldd	r24, Y+17	; 0x11
     742:	9a 89       	ldd	r25, Y+18	; 0x12
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	f1 f7       	brne	.-4      	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
			BUZZER_PORT |= (1 << BUZZER_PIN);
     748:	2b 9a       	sbi	0x05, 3	; 5
			_delay_ms(22.2 * frequency / 10.6);
     74a:	2a e9       	ldi	r18, 0x9A	; 154
     74c:	39 e9       	ldi	r19, 0x99	; 153
     74e:	41 eb       	ldi	r20, 0xB1	; 177
     750:	51 e4       	ldi	r21, 0x41	; 65
     752:	69 81       	ldd	r22, Y+1	; 0x01
     754:	7a 81       	ldd	r23, Y+2	; 0x02
     756:	8b 81       	ldd	r24, Y+3	; 0x03
     758:	9c 81       	ldd	r25, Y+4	; 0x04
     75a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     75e:	2a e9       	ldi	r18, 0x9A	; 154
     760:	39 e9       	ldi	r19, 0x99	; 153
     762:	49 e2       	ldi	r20, 0x29	; 41
     764:	51 e4       	ldi	r21, 0x41	; 65
     766:	0e 94 30 08 	call	0x1060	; 0x1060 <__divsf3>
     76a:	6d 83       	std	Y+5, r22	; 0x05
     76c:	7e 83       	std	Y+6, r23	; 0x06
     76e:	8f 83       	std	Y+7, r24	; 0x07
     770:	98 87       	std	Y+8, r25	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	4a e7       	ldi	r20, 0x7A	; 122
     778:	55 e4       	ldi	r21, 0x45	; 69
     77a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     77e:	4b 01       	movw	r8, r22
     780:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	40 e8       	ldi	r20, 0x80	; 128
     788:	5f e3       	ldi	r21, 0x3F	; 63
     78a:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     78e:	88 23       	and	r24, r24
     790:	2c f1       	brlt	.+74     	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>
		__ticks = 1;
	else if (__tmp > 65535)
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	3f ef       	ldi	r19, 0xFF	; 255
     796:	4f e7       	ldi	r20, 0x7F	; 127
     798:	57 e4       	ldi	r21, 0x47	; 71
     79a:	c5 01       	movw	r24, r10
     79c:	b4 01       	movw	r22, r8
     79e:	0e 94 8a 09 	call	0x1314	; 0x1314 <__gesf2>
     7a2:	18 16       	cp	r1, r24
     7a4:	b4 f4       	brge	.+44     	; 0x7d2 <__LOCK_REGION_LENGTH__+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	40 e2       	ldi	r20, 0x20	; 32
     7ac:	51 e4       	ldi	r21, 0x41	; 65
     7ae:	6d 81       	ldd	r22, Y+5	; 0x05
     7b0:	7e 81       	ldd	r23, Y+6	; 0x06
     7b2:	8f 81       	ldd	r24, Y+7	; 0x07
     7b4:	98 85       	ldd	r25, Y+8	; 0x08
     7b6:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     7ba:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
		while(__ticks)
     7be:	61 15       	cp	r22, r1
     7c0:	71 05       	cpc	r23, r1
     7c2:	89 f0       	breq	.+34     	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     7c4:	c8 01       	movw	r24, r16
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ca:	61 50       	subi	r22, 0x01	; 1
     7cc:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ce:	d1 f7       	brne	.-12     	; 0x7c4 <__LOCK_REGION_LENGTH__+0x3c4>
     7d0:	0a c0       	rjmp	.+20     	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7d2:	c5 01       	movw	r24, r10
     7d4:	b4 01       	movw	r22, r8
     7d6:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <__LOCK_REGION_LENGTH__+0x3e0>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	cb 01       	movw	r24, r22
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <__LOCK_REGION_LENGTH__+0x3e2>
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     7e6:	2b 98       	cbi	0x05, 3	; 5
     7e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	9c 8f       	std	Y+28, r25	; 0x1c
     7f0:	8b 8f       	std	Y+27, r24	; 0x1b
			BUZZER_PORT |= (1 << BUZZER_PIN);
			_delay_ms(22.1 * frequency / 10.55);
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		
		for(int j=0;j<5;j++){
     7f2:	89 2b       	or	r24, r25
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <__LOCK_REGION_LENGTH__+0x3f8>
     7f6:	76 cf       	rjmp	.-276    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
     7f8:	0a e0       	ldi	r16, 0x0A	; 10
     7fa:	10 e0       	ldi	r17, 0x00	; 0
     7fc:	bb 24       	eor	r11, r11
     7fe:	b3 94       	inc	r11
     800:	a1 2c       	mov	r10, r1
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	40 e8       	ldi	r20, 0x80	; 128
     808:	5f e3       	ldi	r21, 0x3F	; 63
     80a:	c3 01       	movw	r24, r6
     80c:	b2 01       	movw	r22, r4
     80e:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     812:	88 23       	and	r24, r24
     814:	0c f1       	brlt	.+66     	; 0x858 <__LOCK_REGION_LENGTH__+0x458>
		__ticks = 1;
	else if (__tmp > 65535)
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	3f ef       	ldi	r19, 0xFF	; 255
     81a:	4f e7       	ldi	r20, 0x7F	; 127
     81c:	57 e4       	ldi	r21, 0x47	; 71
     81e:	c3 01       	movw	r24, r6
     820:	b2 01       	movw	r22, r4
     822:	0e 94 8a 09 	call	0x1314	; 0x1314 <__gesf2>
     826:	18 16       	cp	r1, r24
     828:	bc f4       	brge	.+46     	; 0x858 <__LOCK_REGION_LENGTH__+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	40 e2       	ldi	r20, 0x20	; 32
     830:	51 e4       	ldi	r21, 0x41	; 65
     832:	6d 85       	ldd	r22, Y+13	; 0x0d
     834:	7e 85       	ldd	r23, Y+14	; 0x0e
     836:	8f 85       	ldd	r24, Y+15	; 0x0f
     838:	98 89       	ldd	r25, Y+16	; 0x10
     83a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     83e:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
		while(__ticks)
     842:	61 15       	cp	r22, r1
     844:	71 05       	cpc	r23, r1
     846:	59 f0       	breq	.+22     	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
     848:	80 e9       	ldi	r24, 0x90	; 144
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	f1 f7       	brne	.-4      	; 0x84c <__LOCK_REGION_LENGTH__+0x44c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     850:	61 50       	subi	r22, 0x01	; 1
     852:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     854:	c9 f7       	brne	.-14     	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
     856:	03 c0       	rjmp	.+6      	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
     858:	c1 01       	movw	r24, r2
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
			_delay_ms(22.2 * frequency / 10.6);
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		for(int j=0;j<10;j++){
			_delay_ms(frequency / 10.55);
			BUZZER_PORT |= (1 << BUZZER_PIN);
     85e:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	40 e8       	ldi	r20, 0x80	; 128
     866:	5f e3       	ldi	r21, 0x3F	; 63
     868:	c7 01       	movw	r24, r14
     86a:	b6 01       	movw	r22, r12
     86c:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     870:	88 23       	and	r24, r24
     872:	34 f1       	brlt	.+76     	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
		__ticks = 1;
	else if (__tmp > 65535)
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f e7       	ldi	r20, 0x7F	; 127
     87a:	57 e4       	ldi	r21, 0x47	; 71
     87c:	c7 01       	movw	r24, r14
     87e:	b6 01       	movw	r22, r12
     880:	0e 94 8a 09 	call	0x1314	; 0x1314 <__gesf2>
     884:	18 16       	cp	r1, r24
     886:	bc f4       	brge	.+46     	; 0x8b6 <__LOCK_REGION_LENGTH__+0x4b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	6b 89       	ldd	r22, Y+19	; 0x13
     892:	7c 89       	ldd	r23, Y+20	; 0x14
     894:	8d 89       	ldd	r24, Y+21	; 0x15
     896:	9e 89       	ldd	r25, Y+22	; 0x16
     898:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     89c:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
		while(__ticks)
     8a0:	61 15       	cp	r22, r1
     8a2:	71 05       	cpc	r23, r1
     8a4:	91 f0       	breq	.+36     	; 0x8ca <__LOCK_REGION_LENGTH__+0x4ca>
     8a6:	80 e9       	ldi	r24, 0x90	; 144
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ae:	61 50       	subi	r22, 0x01	; 1
     8b0:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b2:	c9 f7       	brne	.-14     	; 0x8a6 <__LOCK_REGION_LENGTH__+0x4a6>
     8b4:	0a c0       	rjmp	.+20     	; 0x8ca <__LOCK_REGION_LENGTH__+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8b6:	c7 01       	movw	r24, r14
     8b8:	b6 01       	movw	r22, r12
     8ba:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <__LOCK_REGION_LENGTH__+0x4c4>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     8c0:	6b 2d       	mov	r22, r11
     8c2:	7a 2d       	mov	r23, r10
     8c4:	cb 01       	movw	r24, r22
     8c6:	01 97       	sbiw	r24, 0x01	; 1
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
			_delay_ms(22.1 * frequency / 10.55);
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
     8ca:	2b 98       	cbi	0x05, 3	; 5
     8cc:	01 50       	subi	r16, 0x01	; 1
     8ce:	11 09       	sbc	r17, r1
			_delay_ms(frequency / 10.6);
			BUZZER_PORT |= (1 << BUZZER_PIN);
			_delay_ms(22.2 * frequency / 10.6);
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}
		for(int j=0;j<10;j++){
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
     8d2:	97 cf       	rjmp	.-210    	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
			_delay_ms(22.1 * frequency / 10.55);
			BUZZER_PORT &= ~(1 << BUZZER_PIN);
		}

	
}
     8d4:	6c 96       	adiw	r28, 0x1c	; 28
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	0f 91       	pop	r16
     8e8:	ff 90       	pop	r15
     8ea:	ef 90       	pop	r14
     8ec:	df 90       	pop	r13
     8ee:	cf 90       	pop	r12
     8f0:	bf 90       	pop	r11
     8f2:	af 90       	pop	r10
     8f4:	9f 90       	pop	r9
     8f6:	8f 90       	pop	r8
     8f8:	7f 90       	pop	r7
     8fa:	6f 90       	pop	r6
     8fc:	5f 90       	pop	r5
     8fe:	4f 90       	pop	r4
     900:	3f 90       	pop	r3
     902:	2f 90       	pop	r2
     904:	08 95       	ret

00000906 <Play_Sound_piano>:

void Play_Sound_piano(float frequency)
{
     906:	2f 92       	push	r2
     908:	3f 92       	push	r3
     90a:	4f 92       	push	r4
     90c:	5f 92       	push	r5
     90e:	6f 92       	push	r6
     910:	7f 92       	push	r7
     912:	8f 92       	push	r8
     914:	9f 92       	push	r9
     916:	af 92       	push	r10
     918:	bf 92       	push	r11
     91a:	cf 92       	push	r12
     91c:	df 92       	push	r13
     91e:	ef 92       	push	r14
     920:	ff 92       	push	r15
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	1f 92       	push	r1
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	4b 01       	movw	r8, r22
     932:	5c 01       	movw	r10, r24
	long int i,cycles;
	float wavelength = 1.25;
	
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);
     934:	23 9a       	sbi	0x04, 3	; 4

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	4a e7       	ldi	r20, 0x7A	; 122
     93c:	55 e4       	ldi	r21, 0x45	; 69
     93e:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     942:	6b 01       	movw	r12, r22
     944:	7c 01       	movw	r14, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     946:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
     94a:	2b 01       	movw	r4, r22
     94c:	3c 01       	movw	r6, r24
     94e:	69 83       	std	Y+1, r22	; 0x01
     950:	35 2c       	mov	r3, r5
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	40 e8       	ldi	r20, 0x80	; 128
     958:	5f e3       	ldi	r21, 0x3F	; 63
     95a:	c7 01       	movw	r24, r14
     95c:	b6 01       	movw	r22, r12
     95e:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     962:	88 23       	and	r24, r24
     964:	1c f4       	brge	.+6      	; 0x96c <Play_Sound_piano+0x66>
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	02 c0       	rjmp	.+4      	; 0x970 <Play_Sound_piano+0x6a>
     96c:	94 2d       	mov	r25, r4
     96e:	85 2d       	mov	r24, r5
     970:	69 2e       	mov	r6, r25
     972:	78 2e       	mov	r7, r24
     974:	00 e0       	ldi	r16, 0x00	; 0
     976:	10 e0       	ldi	r17, 0x00	; 0

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     978:	55 24       	eor	r5, r5
     97a:	53 94       	inc	r5
     97c:	21 2c       	mov	r2, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     97e:	49 80       	ldd	r4, Y+1	; 0x01
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e8       	ldi	r20, 0x80	; 128
     986:	5f e3       	ldi	r21, 0x3F	; 63
     988:	c7 01       	movw	r24, r14
     98a:	b6 01       	movw	r22, r12
     98c:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     990:	88 23       	and	r24, r24
     992:	04 f1       	brlt	.+64     	; 0x9d4 <Play_Sound_piano+0xce>
		__ticks = 1;
	else if (__tmp > 65535)
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f e7       	ldi	r20, 0x7F	; 127
     99a:	57 e4       	ldi	r21, 0x47	; 71
     99c:	c7 01       	movw	r24, r14
     99e:	b6 01       	movw	r22, r12
     9a0:	0e 94 8a 09 	call	0x1314	; 0x1314 <__gesf2>
     9a4:	18 16       	cp	r1, r24
     9a6:	b4 f4       	brge	.+44     	; 0x9d4 <Play_Sound_piano+0xce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e2       	ldi	r20, 0x20	; 32
     9ae:	51 e4       	ldi	r21, 0x41	; 65
     9b0:	c5 01       	movw	r24, r10
     9b2:	b4 01       	movw	r22, r8
     9b4:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     9b8:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
		while(__ticks)
     9bc:	61 15       	cp	r22, r1
     9be:	71 05       	cpc	r23, r1
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <Play_Sound_piano+0xbe>
     9c2:	61 c0       	rjmp	.+194    	; 0xa86 <Play_Sound_piano+0x180>
     9c4:	80 e9       	ldi	r24, 0x90	; 144
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <Play_Sound_piano+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9cc:	61 50       	subi	r22, 0x01	; 1
     9ce:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9d0:	c9 f7       	brne	.-14     	; 0x9c4 <Play_Sound_piano+0xbe>
     9d2:	4d c0       	rjmp	.+154    	; 0xa6e <Play_Sound_piano+0x168>
     9d4:	c3 01       	movw	r24, r6
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	f1 f7       	brne	.-4      	; 0x9d6 <Play_Sound_piano+0xd0>

	for (i=0;i<cycles;i++)
	{
		_delay_ms(frequency);
		BUZZER_PORT |= (1 << BUZZER_PIN);
     9da:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	40 e8       	ldi	r20, 0x80	; 128
     9e2:	5f e3       	ldi	r21, 0x3F	; 63
     9e4:	c7 01       	movw	r24, r14
     9e6:	b6 01       	movw	r22, r12
     9e8:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     9ec:	88 23       	and	r24, r24
     9ee:	fc f0       	brlt	.+62     	; 0xa2e <Play_Sound_piano+0x128>
		__ticks = 1;
	else if (__tmp > 65535)
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f e7       	ldi	r20, 0x7F	; 127
     9f6:	57 e4       	ldi	r21, 0x47	; 71
     9f8:	c7 01       	movw	r24, r14
     9fa:	b6 01       	movw	r22, r12
     9fc:	0e 94 8a 09 	call	0x1314	; 0x1314 <__gesf2>
     a00:	18 16       	cp	r1, r24
     a02:	c4 f4       	brge	.+48     	; 0xa34 <Play_Sound_piano+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	40 e2       	ldi	r20, 0x20	; 32
     a0a:	51 e4       	ldi	r21, 0x41	; 65
     a0c:	c5 01       	movw	r24, r10
     a0e:	b4 01       	movw	r22, r8
     a10:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     a14:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
		while(__ticks)
     a18:	61 15       	cp	r22, r1
     a1a:	71 05       	cpc	r23, r1
     a1c:	a9 f0       	breq	.+42     	; 0xa48 <Play_Sound_piano+0x142>
     a1e:	80 e9       	ldi	r24, 0x90	; 144
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <Play_Sound_piano+0x11c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a26:	61 50       	subi	r22, 0x01	; 1
     a28:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a2a:	c9 f7       	brne	.-14     	; 0xa1e <Play_Sound_piano+0x118>
     a2c:	0d c0       	rjmp	.+26     	; 0xa48 <Play_Sound_piano+0x142>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     a2e:	85 2d       	mov	r24, r5
     a30:	92 2d       	mov	r25, r2
     a32:	08 c0       	rjmp	.+16     	; 0xa44 <Play_Sound_piano+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a34:	84 2d       	mov	r24, r4
     a36:	93 2d       	mov	r25, r3
     a38:	05 c0       	rjmp	.+10     	; 0xa44 <Play_Sound_piano+0x13e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     a3a:	85 2d       	mov	r24, r5
     a3c:	92 2d       	mov	r25, r2
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <Play_Sound_piano+0x13e>
     a40:	85 2d       	mov	r24, r5
     a42:	92 2d       	mov	r25, r2
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	f1 f7       	brne	.-4      	; 0xa44 <Play_Sound_piano+0x13e>
		_delay_ms(frequency);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
     a48:	2b 98       	cbi	0x05, 3	; 5
     a4a:	0f 5f       	subi	r16, 0xFF	; 255
     a4c:	1f 4f       	sbci	r17, 0xFF	; 255
	
	cycles=duration/wavelength;

	BUZZER_DDR |= (1 << BUZZER_PIN);

	for (i=0;i<cycles;i++)
     a4e:	04 30       	cpi	r16, 0x04	; 4
     a50:	11 05       	cpc	r17, r1
     a52:	09 f0       	breq	.+2      	; 0xa56 <Play_Sound_piano+0x150>
     a54:	95 cf       	rjmp	.-214    	; 0x980 <Play_Sound_piano+0x7a>
     a56:	23 c0       	rjmp	.+70     	; 0xa9e <Play_Sound_piano+0x198>
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	40 e2       	ldi	r20, 0x20	; 32
     a5e:	51 e4       	ldi	r21, 0x41	; 65
     a60:	c5 01       	movw	r24, r10
     a62:	b4 01       	movw	r22, r8
     a64:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
     a68:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
     a6c:	d8 cf       	rjmp	.-80     	; 0xa1e <Play_Sound_piano+0x118>
	{
		_delay_ms(frequency);
		BUZZER_PORT |= (1 << BUZZER_PIN);
     a6e:	2b 9a       	sbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	40 e8       	ldi	r20, 0x80	; 128
     a76:	5f e3       	ldi	r21, 0x3F	; 63
     a78:	c7 01       	movw	r24, r14
     a7a:	b6 01       	movw	r22, r12
     a7c:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     a80:	88 23       	and	r24, r24
     a82:	54 f7       	brge	.-44     	; 0xa58 <Play_Sound_piano+0x152>
     a84:	da cf       	rjmp	.-76     	; 0xa3a <Play_Sound_piano+0x134>
     a86:	2b 9a       	sbi	0x05, 3	; 5
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	40 e8       	ldi	r20, 0x80	; 128
     a8e:	5f e3       	ldi	r21, 0x3F	; 63
     a90:	c7 01       	movw	r24, r14
     a92:	b6 01       	movw	r22, r12
     a94:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     a98:	88 23       	and	r24, r24
     a9a:	b4 f6       	brge	.-84     	; 0xa48 <Play_Sound_piano+0x142>
     a9c:	d1 cf       	rjmp	.-94     	; 0xa40 <Play_Sound_piano+0x13a>
		_delay_ms(frequency);
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
	}
	
	
}
     a9e:	0f 90       	pop	r0
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	ff 90       	pop	r15
     aaa:	ef 90       	pop	r14
     aac:	df 90       	pop	r13
     aae:	cf 90       	pop	r12
     ab0:	bf 90       	pop	r11
     ab2:	af 90       	pop	r10
     ab4:	9f 90       	pop	r9
     ab6:	8f 90       	pop	r8
     ab8:	7f 90       	pop	r7
     aba:	6f 90       	pop	r6
     abc:	5f 90       	pop	r5
     abe:	4f 90       	pop	r4
     ac0:	3f 90       	pop	r3
     ac2:	2f 90       	pop	r2
     ac4:	08 95       	ret

00000ac6 <stop_sound>:


void stop_sound(void)
{
	// Stop sound
	BUZZER_PORT &= ~(1 << BUZZER_PIN);
     ac6:	2b 98       	cbi	0x05, 3	; 5
     ac8:	08 95       	ret

00000aca <readInput1>:
/*74HC165 read function*/
volatile uint8_t readInput1(void){
	uint8_t reader = 0;

	/* Set PINC2 (PC2) as input */
	DDRC &= ~(1 << PC2);
     aca:	3a 98       	cbi	0x07, 2	; 7

	/* Raise LD pin */
	PORTC |= (1 << PC1);
     acc:	41 9a       	sbi	0x08, 1	; 8
     ace:	28 e0       	ldi	r18, 0x08	; 8
     ad0:	30 e0       	ldi	r19, 0x00	; 0
}


/*74HC165 read function*/
volatile uint8_t readInput1(void){
	uint8_t reader = 0;
     ad2:	80 e0       	ldi	r24, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ad4:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PINC & (1 << PC2)) ? 1 : 0);
     ad6:	96 b1       	in	r25, 0x06	; 6
     ad8:	92 fb       	bst	r25, 2
     ada:	99 27       	eor	r25, r25
     adc:	90 f9       	bld	r25, 0
     ade:	88 0f       	add	r24, r24
     ae0:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
     ae2:	40 98       	cbi	0x08, 0	; 8
     ae4:	94 2f       	mov	r25, r20
     ae6:	9a 95       	dec	r25
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <readInput1+0x1c>
		_delay_us(1);
		PORTC |= (1 << PC0);
     aea:	40 9a       	sbi	0x08, 0	; 8
     aec:	21 50       	subi	r18, 0x01	; 1
     aee:	31 09       	sbc	r19, r1
	DDRC &= ~(1 << PC2);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
     af0:	91 f7       	brne	.-28     	; 0xad6 <readInput1+0xc>
		_delay_us(1);
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
     af2:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
     af4:	08 95       	ret

00000af6 <readInput2>:

volatile uint8_t readInput2(void){
	uint8_t reader = 0;

	/* Set PINB4 (PB4) as input */
	DDRB &= ~(1 << PB4);
     af6:	24 98       	cbi	0x04, 4	; 4

	/* Raise LD pin */
	PORTC |= (1 << PC1);
     af8:	41 9a       	sbi	0x08, 1	; 8
     afa:	28 e0       	ldi	r18, 0x08	; 8
     afc:	30 e0       	ldi	r19, 0x00	; 0

	return reader;
}

volatile uint8_t readInput2(void){
	uint8_t reader = 0;
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PINB & (1 << PB4)) ? 1 : 0);
     b02:	93 b1       	in	r25, 0x03	; 3
     b04:	92 95       	swap	r25
     b06:	91 70       	andi	r25, 0x01	; 1
     b08:	88 0f       	add	r24, r24
     b0a:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
     b0c:	40 98       	cbi	0x08, 0	; 8
     b0e:	94 2f       	mov	r25, r20
     b10:	9a 95       	dec	r25
     b12:	f1 f7       	brne	.-4      	; 0xb10 <readInput2+0x1a>
		_delay_us(1);
		PORTC |= (1 << PC0);
     b14:	40 9a       	sbi	0x08, 0	; 8
     b16:	21 50       	subi	r18, 0x01	; 1
     b18:	31 09       	sbc	r19, r1
	DDRB &= ~(1 << PB4);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
     b1a:	99 f7       	brne	.-26     	; 0xb02 <readInput2+0xc>
		_delay_us(1);
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
     b1c:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
     b1e:	08 95       	ret

00000b20 <readInput3>:

volatile uint8_t readInput3(void){
	uint8_t reader = 0;

	/* Set PINB5 (PB5) as input */
	DDRB &= ~(1 << PB5);
     b20:	25 98       	cbi	0x04, 5	; 4

	/* Raise LD pin */
	PORTC |= (1 << PC1);
     b22:	41 9a       	sbi	0x08, 1	; 8
     b24:	28 e0       	ldi	r18, 0x08	; 8
     b26:	30 e0       	ldi	r19, 0x00	; 0
	return reader;
}


volatile uint8_t readInput3(void){
	uint8_t reader = 0;
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	45 e0       	ldi	r20, 0x05	; 5
	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
		reader <<= 1;   /* Get a one-bit digital input */
		reader |= ((PINB & (1 << PB5 )) ? 1 : 0);
     b2c:	93 b1       	in	r25, 0x03	; 3
     b2e:	95 fb       	bst	r25, 5
     b30:	99 27       	eor	r25, r25
     b32:	90 f9       	bld	r25, 0
     b34:	88 0f       	add	r24, r24
     b36:	89 2b       	or	r24, r25
		
		/* Clock the register */
		PORTC &= ~(1 << PC0);
     b38:	40 98       	cbi	0x08, 0	; 8
     b3a:	94 2f       	mov	r25, r20
     b3c:	9a 95       	dec	r25
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <readInput3+0x1c>
		_delay_us(1); // You can use delay functions for a more accurate timing
		PORTC |= (1 << PC0);
     b40:	40 9a       	sbi	0x08, 0	; 8
     b42:	21 50       	subi	r18, 0x01	; 1
     b44:	31 09       	sbc	r19, r1
	DDRB &= ~(1 << PB5);

	/* Raise LD pin */
	PORTC |= (1 << PC1);

	for (int i = 0; i < 8; i++){
     b46:	91 f7       	brne	.-28     	; 0xb2c <readInput3+0xc>
		_delay_us(1); // You can use delay functions for a more accurate timing
		PORTC |= (1 << PC0);
	}

	/* Lower the LD pin */
	PORTC &= ~(1 << PC1);
     b48:	41 98       	cbi	0x08, 1	; 8

	return reader;
}
     b4a:	08 95       	ret

00000b4c <calculateFrequency>:


volatile float calculateFrequency(void){
     b4c:	cf 92       	push	r12
     b4e:	df 92       	push	r13
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
	float freq = 0;
/* Read the input value */
uint8_t switchNo = readInput1();
     b5a:	0e 94 65 05 	call	0xaca	; 0xaca <readInput1>
     b5e:	c8 2e       	mov	r12, r24
uint8_t switchNo2 = readInput2();
     b60:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <readInput2>
     b64:	08 2f       	mov	r16, r24
uint8_t switchNo3 = readInput3();
     b66:	0e 94 90 05 	call	0xb20	; 0xb20 <readInput3>
     b6a:	f8 2e       	mov	r15, r24
     b6c:	c1 e0       	ldi	r28, 0x01	; 1
     b6e:	d0 e0       	ldi	r29, 0x00	; 0
	return reader;
}


volatile float calculateFrequency(void){
	float freq = 0;
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	cb 01       	movw	r24, r22
uint8_t switchNo3 = readInput3();

	/* Iterate through each bit of switchNo */
	for (int i = 0; i < 8; i++) {
		/* Check if the i-th bit of switchNo is set */
		if (switchNo & (1 << i)) {
     b76:	d1 2c       	mov	r13, r1
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <calculateFrequency+0x30>
     b7a:	21 96       	adiw	r28, 0x01	; 1
     b7c:	fe 01       	movw	r30, r28
     b7e:	31 97       	sbiw	r30, 0x01	; 1
     b80:	96 01       	movw	r18, r12
     b82:	0e 2e       	mov	r0, r30
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <calculateFrequency+0x3e>
     b86:	35 95       	asr	r19
     b88:	27 95       	ror	r18
     b8a:	0a 94       	dec	r0
     b8c:	e2 f7       	brpl	.-8      	; 0xb86 <calculateFrequency+0x3a>
     b8e:	20 ff       	sbrs	r18, 0
     b90:	3f c0       	rjmp	.+126    	; 0xc10 <calculateFrequency+0xc4>
			/* Set frequency based on which button is pressed */
			switch (i) {
     b92:	e8 30       	cpi	r30, 0x08	; 8
     b94:	f1 05       	cpc	r31, r1
     b96:	e0 f5       	brcc	.+120    	; 0xc10 <calculateFrequency+0xc4>
     b98:	ec 5c       	subi	r30, 0xCC	; 204
     b9a:	ff 4f       	sbci	r31, 0xFF	; 255
     b9c:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__tablejump2__>
				case 0:freq += F3;break;
     ba0:	2a e6       	ldi	r18, 0x6A	; 106
     ba2:	3d e4       	ldi	r19, 0x4D	; 77
     ba4:	47 e3       	ldi	r20, 0x37	; 55
     ba6:	50 e4       	ldi	r21, 0x40	; 64
     ba8:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     bac:	e6 cf       	rjmp	.-52     	; 0xb7a <calculateFrequency+0x2e>
				case 1:freq += Gb3;break;
     bae:	29 e0       	ldi	r18, 0x09	; 9
     bb0:	39 ef       	ldi	r19, 0xF9	; 249
     bb2:	4c e2       	ldi	r20, 0x2C	; 44
     bb4:	50 e4       	ldi	r21, 0x40	; 64
     bb6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     bba:	df cf       	rjmp	.-66     	; 0xb7a <calculateFrequency+0x2e>
				case 2:freq += G3;break;
     bbc:	26 e9       	ldi	r18, 0x96	; 150
     bbe:	33 e4       	ldi	r19, 0x43	; 67
     bc0:	43 e2       	ldi	r20, 0x23	; 35
     bc2:	50 e4       	ldi	r21, 0x40	; 64
     bc4:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     bc8:	d8 cf       	rjmp	.-80     	; 0xb7a <calculateFrequency+0x2e>
				case 3:freq += Ab3;break;
     bca:	24 e2       	ldi	r18, 0x24	; 36
     bcc:	38 e2       	ldi	r19, 0x28	; 40
     bce:	4a e1       	ldi	r20, 0x1A	; 26
     bd0:	50 e4       	ldi	r21, 0x40	; 64
     bd2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     bd6:	d1 cf       	rjmp	.-94     	; 0xb7a <calculateFrequency+0x2e>
				case 4:freq += A3;break;
     bd8:	2b ee       	ldi	r18, 0xEB	; 235
     bda:	33 e7       	ldi	r19, 0x73	; 115
     bdc:	41 e1       	ldi	r20, 0x11	; 17
     bde:	50 e4       	ldi	r21, 0x40	; 64
     be0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     be4:	ca cf       	rjmp	.-108    	; 0xb7a <calculateFrequency+0x2e>
				case 5:freq += Bb3;break;
     be6:	2b e1       	ldi	r18, 0x1B	; 27
     be8:	3f e2       	ldi	r19, 0x2F	; 47
     bea:	49 e0       	ldi	r20, 0x09	; 9
     bec:	50 e4       	ldi	r21, 0x40	; 64
     bee:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     bf2:	c3 cf       	rjmp	.-122    	; 0xb7a <calculateFrequency+0x2e>
				case 6:freq += B3;break;
     bf4:	23 e5       	ldi	r18, 0x53	; 83
     bf6:	36 e9       	ldi	r19, 0x96	; 150
     bf8:	41 e0       	ldi	r20, 0x01	; 1
     bfa:	50 e4       	ldi	r21, 0x40	; 64
     bfc:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     c00:	bc cf       	rjmp	.-136    	; 0xb7a <calculateFrequency+0x2e>
				case 7:freq += C4;break;
     c02:	2d e0       	ldi	r18, 0x0D	; 13
     c04:	31 e7       	ldi	r19, 0x71	; 113
     c06:	44 ef       	ldi	r20, 0xF4	; 244
     c08:	5f e3       	ldi	r21, 0x3F	; 63
     c0a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     c0e:	04 c0       	rjmp	.+8      	; 0xc18 <calculateFrequency+0xcc>
uint8_t switchNo = readInput1();
uint8_t switchNo2 = readInput2();
uint8_t switchNo3 = readInput3();

	/* Iterate through each bit of switchNo */
	for (int i = 0; i < 8; i++) {
     c10:	c8 30       	cpi	r28, 0x08	; 8
     c12:	d1 05       	cpc	r29, r1
     c14:	0c f4       	brge	.+2      	; 0xc18 <calculateFrequency+0xcc>
     c16:	b1 cf       	rjmp	.-158    	; 0xb7a <calculateFrequency+0x2e>
	return reader;
}


volatile float calculateFrequency(void){
	float freq = 0;
     c18:	c1 e0       	ldi	r28, 0x01	; 1
     c1a:	d0 e0       	ldi	r29, 0x00	; 0
	
	
	
	for (int i = 0; i < 8; i++) {
		/* Check if the i-th bit of switchNo is set */
		if (switchNo2 & (1 << i)) {
     c1c:	10 e0       	ldi	r17, 0x00	; 0
     c1e:	01 c0       	rjmp	.+2      	; 0xc22 <calculateFrequency+0xd6>
     c20:	21 96       	adiw	r28, 0x01	; 1
     c22:	fe 01       	movw	r30, r28
     c24:	31 97       	sbiw	r30, 0x01	; 1
     c26:	98 01       	movw	r18, r16
     c28:	0e 2e       	mov	r0, r30
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <calculateFrequency+0xe4>
     c2c:	35 95       	asr	r19
     c2e:	27 95       	ror	r18
     c30:	0a 94       	dec	r0
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <calculateFrequency+0xe0>
     c34:	20 ff       	sbrs	r18, 0
     c36:	3f c0       	rjmp	.+126    	; 0xcb6 <calculateFrequency+0x16a>
			/* Set frequency based on which button is pressed */
			switch (i) {
     c38:	e8 30       	cpi	r30, 0x08	; 8
     c3a:	f1 05       	cpc	r31, r1
     c3c:	e0 f5       	brcc	.+120    	; 0xcb6 <calculateFrequency+0x16a>
     c3e:	e4 5c       	subi	r30, 0xC4	; 196
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__tablejump2__>
				case 0:freq += Db4;break;
     c46:	2b ec       	ldi	r18, 0xCB	; 203
     c48:	30 e1       	ldi	r19, 0x10	; 16
     c4a:	47 ee       	ldi	r20, 0xE7	; 231
     c4c:	5f e3       	ldi	r21, 0x3F	; 63
     c4e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     c52:	e6 cf       	rjmp	.-52     	; 0xc20 <calculateFrequency+0xd4>
				case 1:freq += D4;break;
     c54:	2e e3       	ldi	r18, 0x3E	; 62
     c56:	38 ee       	ldi	r19, 0xE8	; 232
     c58:	49 ed       	ldi	r20, 0xD9	; 217
     c5a:	5f e3       	ldi	r21, 0x3F	; 63
     c5c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     c60:	df cf       	rjmp	.-66     	; 0xc20 <calculateFrequency+0xd4>
				case 2:freq += Eb4;break;
     c62:	2b ea       	ldi	r18, 0xAB	; 171
     c64:	3f ec       	ldi	r19, 0xCF	; 207
     c66:	4d ec       	ldi	r20, 0xCD	; 205
     c68:	5f e3       	ldi	r21, 0x3F	; 63
     c6a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     c6e:	d8 cf       	rjmp	.-80     	; 0xc20 <calculateFrequency+0xd4>
				case 3:freq += E4;break;
     c70:	2a e1       	ldi	r18, 0x1A	; 26
     c72:	31 e5       	ldi	r19, 0x51	; 81
     c74:	42 ec       	ldi	r20, 0xC2	; 194
     c76:	5f e3       	ldi	r21, 0x3F	; 63
     c78:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     c7c:	d1 cf       	rjmp	.-94     	; 0xc20 <calculateFrequency+0xd4>
				case 4:freq += F4;break;
     c7e:	2b e9       	ldi	r18, 0x9B	; 155
     c80:	35 e5       	ldi	r19, 0x55	; 85
     c82:	47 eb       	ldi	r20, 0xB7	; 183
     c84:	5f e3       	ldi	r21, 0x3F	; 63
     c86:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     c8a:	ca cf       	rjmp	.-108    	; 0xc20 <calculateFrequency+0xd4>
				case 5:freq += Gb4;break;
     c8c:	2d ea       	ldi	r18, 0xAD	; 173
     c8e:	3a ef       	ldi	r19, 0xFA	; 250
     c90:	4c ea       	ldi	r20, 0xAC	; 172
     c92:	5f e3       	ldi	r21, 0x3F	; 63
     c94:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     c98:	c3 cf       	rjmp	.-122    	; 0xc20 <calculateFrequency+0xd4>
				case 6:freq += G4;break;
     c9a:	26 e9       	ldi	r18, 0x96	; 150
     c9c:	33 e4       	ldi	r19, 0x43	; 67
     c9e:	43 ea       	ldi	r20, 0xA3	; 163
     ca0:	5f e3       	ldi	r21, 0x3F	; 63
     ca2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     ca6:	bc cf       	rjmp	.-136    	; 0xc20 <calculateFrequency+0xd4>
				case 7:freq += Ab4;break;
     ca8:	21 e9       	ldi	r18, 0x91	; 145
     caa:	3f e0       	ldi	r19, 0x0F	; 15
     cac:	4a e9       	ldi	r20, 0x9A	; 154
     cae:	5f e3       	ldi	r21, 0x3F	; 63
     cb0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     cb4:	04 c0       	rjmp	.+8      	; 0xcbe <calculateFrequency+0x172>
		}
	}
	
	
	
	for (int i = 0; i < 8; i++) {
     cb6:	c8 30       	cpi	r28, 0x08	; 8
     cb8:	d1 05       	cpc	r29, r1
     cba:	0c f4       	brge	.+2      	; 0xcbe <calculateFrequency+0x172>
     cbc:	b1 cf       	rjmp	.-158    	; 0xc20 <calculateFrequency+0xd4>
	return reader;
}


volatile float calculateFrequency(void){
	float freq = 0;
     cbe:	c1 e0       	ldi	r28, 0x01	; 1
     cc0:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	
	for (int i = 0; i < 8; i++) {
		/* Check if the i-th bit of switchNo is set */
		if (switchNo3 & (1 << i)) {
     cc2:	0f 2d       	mov	r16, r15
     cc4:	10 e0       	ldi	r17, 0x00	; 0
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <calculateFrequency+0x17e>
     cc8:	21 96       	adiw	r28, 0x01	; 1
     cca:	fe 01       	movw	r30, r28
     ccc:	31 97       	sbiw	r30, 0x01	; 1
     cce:	98 01       	movw	r18, r16
     cd0:	0e 2e       	mov	r0, r30
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <calculateFrequency+0x18c>
     cd4:	35 95       	asr	r19
     cd6:	27 95       	ror	r18
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <calculateFrequency+0x188>
     cdc:	20 ff       	sbrs	r18, 0
     cde:	3f c0       	rjmp	.+126    	; 0xd5e <calculateFrequency+0x212>
			/* Set frequency based on which button is pressed */
			switch (i) {
     ce0:	e8 30       	cpi	r30, 0x08	; 8
     ce2:	f1 05       	cpc	r31, r1
     ce4:	e0 f5       	brcc	.+120    	; 0xd5e <calculateFrequency+0x212>
     ce6:	ec 5b       	subi	r30, 0xBC	; 188
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__tablejump2__>
				case 0:freq += A4;break;
     cee:	2e e8       	ldi	r18, 0x8E	; 142
     cf0:	35 e7       	ldi	r19, 0x75	; 117
     cf2:	41 e9       	ldi	r20, 0x91	; 145
     cf4:	5f e3       	ldi	r21, 0x3F	; 63
     cf6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     cfa:	e6 cf       	rjmp	.-52     	; 0xcc8 <calculateFrequency+0x17c>
				case 1:freq += Bb4;break;
     cfc:	27 e6       	ldi	r18, 0x67	; 103
     cfe:	34 e4       	ldi	r19, 0x44	; 68
     d00:	49 e8       	ldi	r20, 0x89	; 137
     d02:	5f e3       	ldi	r21, 0x3F	; 63
     d04:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     d08:	df cf       	rjmp	.-66     	; 0xcc8 <calculateFrequency+0x17c>
				case 2:freq += B4;break;
     d0a:	20 ee       	ldi	r18, 0xE0	; 224
     d0c:	3c e9       	ldi	r19, 0x9C	; 156
     d0e:	41 e8       	ldi	r20, 0x81	; 129
     d10:	5f e3       	ldi	r21, 0x3F	; 63
     d12:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     d16:	d8 cf       	rjmp	.-80     	; 0xcc8 <calculateFrequency+0x17c>
				case 3:freq += C5;break;
     d18:	27 ee       	ldi	r18, 0xE7	; 231
     d1a:	3d e1       	ldi	r19, 0x1D	; 29
     d1c:	47 e6       	ldi	r20, 0x67	; 103
     d1e:	5f e3       	ldi	r21, 0x3F	; 63
     d20:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     d24:	d1 cf       	rjmp	.-94     	; 0xcc8 <calculateFrequency+0x17c>
				case 4:freq += Db5;break;
     d26:	2a e5       	ldi	r18, 0x5A	; 90
     d28:	35 ef       	ldi	r19, 0xF5	; 245
     d2a:	49 e5       	ldi	r20, 0x59	; 89
     d2c:	5f e3       	ldi	r21, 0x3F	; 63
     d2e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     d32:	ca cf       	rjmp	.-108    	; 0xcc8 <calculateFrequency+0x17c>
				case 5:freq += D5;break;
     d34:	28 e4       	ldi	r18, 0x48	; 72
     d36:	3f eb       	ldi	r19, 0xBF	; 191
     d38:	4d e4       	ldi	r20, 0x4D	; 77
     d3a:	5f e3       	ldi	r21, 0x3F	; 63
     d3c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     d40:	c3 cf       	rjmp	.-122    	; 0xcc8 <calculateFrequency+0x17c>
				case 6:freq += Eb5;break;
     d42:	25 e4       	ldi	r18, 0x45	; 69
     d44:	37 e4       	ldi	r19, 0x47	; 71
     d46:	42 e4       	ldi	r20, 0x42	; 66
     d48:	5f e3       	ldi	r21, 0x3F	; 63
     d4a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     d4e:	bc cf       	rjmp	.-136    	; 0xcc8 <calculateFrequency+0x17c>
				case 7:freq += E5;break;
     d50:	20 e7       	ldi	r18, 0x70	; 112
     d52:	3f e5       	ldi	r19, 0x5F	; 95
     d54:	47 e3       	ldi	r20, 0x37	; 55
     d56:	5f e3       	ldi	r21, 0x3F	; 63
     d58:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     d5c:	04 c0       	rjmp	.+8      	; 0xd66 <calculateFrequency+0x21a>
			}
		}
	}
	
	
	for (int i = 0; i < 8; i++) {
     d5e:	c8 30       	cpi	r28, 0x08	; 8
     d60:	d1 05       	cpc	r29, r1
     d62:	0c f4       	brge	.+2      	; 0xd66 <calculateFrequency+0x21a>
     d64:	b1 cf       	rjmp	.-158    	; 0xcc8 <calculateFrequency+0x17c>
		}
	}


	return freq;
}
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	ff 90       	pop	r15
     d70:	df 90       	pop	r13
     d72:	cf 90       	pop	r12
     d74:	08 95       	ret

00000d76 <__vector_1>:

uint8_t instrument = -1;
uint8_t bluetooth = -1;

ISR( INT0_vect )
{
     d76:	1f 92       	push	r1
     d78:	0f 92       	push	r0
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	0f 92       	push	r0
     d7e:	11 24       	eor	r1, r1
     d80:	2f 93       	push	r18
     d82:	3f 93       	push	r19
     d84:	4f 93       	push	r20
     d86:	5f 93       	push	r21
     d88:	6f 93       	push	r22
     d8a:	7f 93       	push	r23
     d8c:	8f 93       	push	r24
     d8e:	9f 93       	push	r25
     d90:	af 93       	push	r26
     d92:	bf 93       	push	r27
     d94:	ef 93       	push	r30
     d96:	ff 93       	push	r31
	if (PIND & (1 << PD2)) {
     d98:	4a 9b       	sbis	0x09, 2	; 9
     d9a:	0b c0       	rjmp	.+22     	; 0xdb2 <__vector_1+0x3c>
		instrument=0;
     d9c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <instrument>
		lcd_goto_xy(1, 0);
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Play Piano......");
     da8:	8e e0       	ldi	r24, 0x0E	; 14
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
     db0:	0a c0       	rjmp	.+20     	; 0xdc6 <__vector_1+0x50>
	}else{
		instrument=1;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <instrument>
		lcd_goto_xy(1, 0);
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Play Violin.....");
     dbe:	8f e1       	ldi	r24, 0x1F	; 31
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		
	}
	
}
     dc6:	ff 91       	pop	r31
     dc8:	ef 91       	pop	r30
     dca:	bf 91       	pop	r27
     dcc:	af 91       	pop	r26
     dce:	9f 91       	pop	r25
     dd0:	8f 91       	pop	r24
     dd2:	7f 91       	pop	r23
     dd4:	6f 91       	pop	r22
     dd6:	5f 91       	pop	r21
     dd8:	4f 91       	pop	r20
     dda:	3f 91       	pop	r19
     ddc:	2f 91       	pop	r18
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <__vector_2>:

ISR( INT1_vect )
{
     de8:	1f 92       	push	r1
     dea:	0f 92       	push	r0
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	0f 92       	push	r0
     df0:	11 24       	eor	r1, r1
     df2:	2f 93       	push	r18
     df4:	3f 93       	push	r19
     df6:	4f 93       	push	r20
     df8:	5f 93       	push	r21
     dfa:	6f 93       	push	r22
     dfc:	7f 93       	push	r23
     dfe:	8f 93       	push	r24
     e00:	9f 93       	push	r25
     e02:	af 93       	push	r26
     e04:	bf 93       	push	r27
     e06:	ef 93       	push	r30
     e08:	ff 93       	push	r31
	if (PIND & (1 << PD3)) {
     e0a:	4b 9b       	sbis	0x09, 3	; 9
     e0c:	0e c0       	rjmp	.+28     	; 0xe2a <__vector_2+0x42>
		lcd_goto_xy(0, 0);
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Bluetooth.......");
     e16:	80 e3       	ldi	r24, 0x30	; 48
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		USART_Init();
     e1e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <USART_Init>
		bluetooth=1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     e28:	0a c0       	rjmp	.+20     	; 0xe3e <__vector_2+0x56>
	}else{
		lcd_goto_xy(0, 0);
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Toy Piano Music!");
     e32:	81 e4       	ldi	r24, 0x41	; 65
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		bluetooth=0;
     e3a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	}
}
     e3e:	ff 91       	pop	r31
     e40:	ef 91       	pop	r30
     e42:	bf 91       	pop	r27
     e44:	af 91       	pop	r26
     e46:	9f 91       	pop	r25
     e48:	8f 91       	pop	r24
     e4a:	7f 91       	pop	r23
     e4c:	6f 91       	pop	r22
     e4e:	5f 91       	pop	r21
     e50:	4f 91       	pop	r20
     e52:	3f 91       	pop	r19
     e54:	2f 91       	pop	r18
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	0f 90       	pop	r0
     e5c:	1f 90       	pop	r1
     e5e:	18 95       	reti

00000e60 <main>:

int main(void)
{

lcd_init();
     e60:	0e 94 89 00 	call	0x112	; 0x112 <lcd_init>
lcd_clear();
     e64:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_clear>
stop_sound();
     e68:	0e 94 63 05 	call	0xac6	; 0xac6 <stop_sound>
     e6c:	c4 e6       	ldi	r28, 0x64	; 100
     e6e:	d0 e0       	ldi	r29, 0x00	; 0
for(int i=0;i<100;i++){
Play_Sound_piano(2.8641);}
     e70:	6a e6       	ldi	r22, 0x6A	; 106
     e72:	7d e4       	ldi	r23, 0x4D	; 77
     e74:	87 e3       	ldi	r24, 0x37	; 55
     e76:	90 e4       	ldi	r25, 0x40	; 64
     e78:	0e 94 83 04 	call	0x906	; 0x906 <Play_Sound_piano>
     e7c:	21 97       	sbiw	r28, 0x01	; 1
{

lcd_init();
lcd_clear();
stop_sound();
for(int i=0;i<100;i++){
     e7e:	c1 f7       	brne	.-16     	; 0xe70 <main+0x10>
Play_Sound_piano(2.8641);}
stop_sound();
     e80:	0e 94 63 05 	call	0xac6	; 0xac6 <stop_sound>
	DDRC |= 0b11111111;
     e84:	87 b1       	in	r24, 0x07	; 7
     e86:	8f ef       	ldi	r24, 0xFF	; 255
     e88:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b11111111;
     e8a:	9a b1       	in	r25, 0x0a	; 10
     e8c:	8a b9       	out	0x0a, r24	; 10
	
	  EICRA |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
     e8e:	e9 e6       	ldi	r30, 0x69	; 105
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	81 60       	ori	r24, 0x01	; 1
     e96:	80 83       	st	Z, r24
	  EIMSK |= (1 << INT0);     // Turns on INT0
     e98:	e8 9a       	sbi	0x1d, 0	; 29
	
	EICRA |= (1 << ISC10);    // set INT1 to trigger on ANY logic change
     e9a:	80 81       	ld	r24, Z
     e9c:	84 60       	ori	r24, 0x04	; 4
     e9e:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);     // Turns on INT1
     ea0:	e9 9a       	sbi	0x1d, 1	; 29
	
	if (PIND & (1 << PD2)) {
     ea2:	4a 9b       	sbis	0x09, 2	; 9
     ea4:	0b c0       	rjmp	.+22     	; 0xebc <main+0x5c>
		instrument=0;
     ea6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <instrument>
		lcd_goto_xy(1, 0);
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Play Piano......");
     eb2:	8e e0       	ldi	r24, 0x0E	; 14
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
     eba:	0a c0       	rjmp	.+20     	; 0xed0 <main+0x70>
		}else{
		instrument=1;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <instrument>
		lcd_goto_xy(1, 0);
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Play Violin.....");
     ec8:	8f e1       	ldi	r24, 0x1F	; 31
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		
	}
	if (PIND & (1 << PD3)) {
     ed0:	4b 9b       	sbis	0x09, 3	; 9
     ed2:	0e c0       	rjmp	.+28     	; 0xef0 <main+0x90>
		lcd_goto_xy(0, 0);
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Bluetooth.......");
     edc:	80 e3       	ldi	r24, 0x30	; 48
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		USART_Init();
     ee4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <USART_Init>
		bluetooth=1;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     eee:	0a c0       	rjmp	.+20     	; 0xf04 <main+0xa4>
	}else{
		lcd_goto_xy(0, 0);
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_goto_xy>
		lcd_write_word("Toy Piano Music!");
     ef8:	81 e4       	ldi	r24, 0x41	; 65
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_word>
		bluetooth=0;
     f00:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	}
	sei();			/* Enable Global Interrupt */
     f04:	78 94       	sei
	float frequecy=0;
	
	
	while (1){
		float frequecy = calculateFrequency();
     f06:	0e 94 a6 05 	call	0xb4c	; 0xb4c <calculateFrequency>
     f0a:	6b 01       	movw	r12, r22
     f0c:	7c 01       	movw	r14, r24
		
			if (frequecy > 0) {
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	a9 01       	movw	r20, r18
     f14:	0e 94 8a 09 	call	0x1314	; 0x1314 <__gesf2>
     f18:	18 16       	cp	r1, r24
     f1a:	6c f5       	brge	.+90     	; 0xf76 <main+0x116>
				
				if(instrument==0 && bluetooth==0){
     f1c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <instrument>
     f20:	81 11       	cpse	r24, r1
     f22:	09 c0       	rjmp	.+18     	; 0xf36 <main+0xd6>
     f24:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     f28:	91 11       	cpse	r25, r1
     f2a:	10 c0       	rjmp	.+32     	; 0xf4c <main+0xec>
					Play_Sound_piano(frequecy);
     f2c:	c7 01       	movw	r24, r14
     f2e:	b6 01       	movw	r22, r12
     f30:	0e 94 83 04 	call	0x906	; 0x906 <Play_Sound_piano>
     f34:	e8 cf       	rjmp	.-48     	; 0xf06 <main+0xa6>
				}
				else if(instrument==1 && bluetooth==0){
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	49 f4       	brne	.+18     	; 0xf4c <main+0xec>
     f3a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     f3e:	91 11       	cpse	r25, r1
     f40:	05 c0       	rjmp	.+10     	; 0xf4c <main+0xec>
					Play_Sound_violin(frequecy);
     f42:	c7 01       	movw	r24, r14
     f44:	b6 01       	movw	r22, r12
     f46:	0e 94 b1 01 	call	0x362	; 0x362 <Play_Sound_violin>
     f4a:	dd cf       	rjmp	.-70     	; 0xf06 <main+0xa6>
				}
				else if(bluetooth==1){
     f4c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     f50:	91 30       	cpi	r25, 0x01	; 1
     f52:	c9 f6       	brne	.-78     	; 0xf06 <main+0xa6>
				USART_TransmitInteger(instrument); 
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 1f 01 	call	0x23e	; 0x23e <USART_TransmitInteger>
				USART_TransmitChar(' ');
     f5a:	80 e2       	ldi	r24, 0x20	; 32
     f5c:	0e 94 08 01 	call	0x210	; 0x210 <USART_TransmitChar>
				USART_TransmitFixedPoint(frequecy); 
     f60:	c7 01       	movw	r24, r14
     f62:	b6 01       	movw	r22, r12
     f64:	0e 94 4c 01 	call	0x298	; 0x298 <USART_TransmitFixedPoint>
				USART_TransmitChar('\r'); // Carriage return
     f68:	8d e0       	ldi	r24, 0x0D	; 13
     f6a:	0e 94 08 01 	call	0x210	; 0x210 <USART_TransmitChar>
				USART_TransmitChar('\n'); 
     f6e:	8a e0       	ldi	r24, 0x0A	; 10
     f70:	0e 94 08 01 	call	0x210	; 0x210 <USART_TransmitChar>
     f74:	c8 cf       	rjmp	.-112    	; 0xf06 <main+0xa6>
			}
			}else{
			stop_sound();
     f76:	0e 94 63 05 	call	0xac6	; 0xac6 <stop_sound>
     f7a:	c5 cf       	rjmp	.-118    	; 0xf06 <main+0xa6>

00000f7c <__subsf3>:
     f7c:	50 58       	subi	r21, 0x80	; 128

00000f7e <__addsf3>:
     f7e:	bb 27       	eor	r27, r27
     f80:	aa 27       	eor	r26, r26
     f82:	0e 94 d6 07 	call	0xfac	; 0xfac <__addsf3x>
     f86:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__fp_round>
     f8a:	0e 94 42 09 	call	0x1284	; 0x1284 <__fp_pscA>
     f8e:	38 f0       	brcs	.+14     	; 0xf9e <__addsf3+0x20>
     f90:	0e 94 49 09 	call	0x1292	; 0x1292 <__fp_pscB>
     f94:	20 f0       	brcs	.+8      	; 0xf9e <__addsf3+0x20>
     f96:	39 f4       	brne	.+14     	; 0xfa6 <__addsf3+0x28>
     f98:	9f 3f       	cpi	r25, 0xFF	; 255
     f9a:	19 f4       	brne	.+6      	; 0xfa2 <__addsf3+0x24>
     f9c:	26 f4       	brtc	.+8      	; 0xfa6 <__addsf3+0x28>
     f9e:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__fp_nan>
     fa2:	0e f4       	brtc	.+2      	; 0xfa6 <__addsf3+0x28>
     fa4:	e0 95       	com	r30
     fa6:	e7 fb       	bst	r30, 7
     fa8:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__fp_inf>

00000fac <__addsf3x>:
     fac:	e9 2f       	mov	r30, r25
     fae:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__fp_split3>
     fb2:	58 f3       	brcs	.-42     	; 0xf8a <__addsf3+0xc>
     fb4:	ba 17       	cp	r27, r26
     fb6:	62 07       	cpc	r22, r18
     fb8:	73 07       	cpc	r23, r19
     fba:	84 07       	cpc	r24, r20
     fbc:	95 07       	cpc	r25, r21
     fbe:	20 f0       	brcs	.+8      	; 0xfc8 <__addsf3x+0x1c>
     fc0:	79 f4       	brne	.+30     	; 0xfe0 <__addsf3x+0x34>
     fc2:	a6 f5       	brtc	.+104    	; 0x102c <__addsf3x+0x80>
     fc4:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__fp_zero>
     fc8:	0e f4       	brtc	.+2      	; 0xfcc <__addsf3x+0x20>
     fca:	e0 95       	com	r30
     fcc:	0b 2e       	mov	r0, r27
     fce:	ba 2f       	mov	r27, r26
     fd0:	a0 2d       	mov	r26, r0
     fd2:	0b 01       	movw	r0, r22
     fd4:	b9 01       	movw	r22, r18
     fd6:	90 01       	movw	r18, r0
     fd8:	0c 01       	movw	r0, r24
     fda:	ca 01       	movw	r24, r20
     fdc:	a0 01       	movw	r20, r0
     fde:	11 24       	eor	r1, r1
     fe0:	ff 27       	eor	r31, r31
     fe2:	59 1b       	sub	r21, r25
     fe4:	99 f0       	breq	.+38     	; 0x100c <__addsf3x+0x60>
     fe6:	59 3f       	cpi	r21, 0xF9	; 249
     fe8:	50 f4       	brcc	.+20     	; 0xffe <__addsf3x+0x52>
     fea:	50 3e       	cpi	r21, 0xE0	; 224
     fec:	68 f1       	brcs	.+90     	; 0x1048 <__addsf3x+0x9c>
     fee:	1a 16       	cp	r1, r26
     ff0:	f0 40       	sbci	r31, 0x00	; 0
     ff2:	a2 2f       	mov	r26, r18
     ff4:	23 2f       	mov	r18, r19
     ff6:	34 2f       	mov	r19, r20
     ff8:	44 27       	eor	r20, r20
     ffa:	58 5f       	subi	r21, 0xF8	; 248
     ffc:	f3 cf       	rjmp	.-26     	; 0xfe4 <__addsf3x+0x38>
     ffe:	46 95       	lsr	r20
    1000:	37 95       	ror	r19
    1002:	27 95       	ror	r18
    1004:	a7 95       	ror	r26
    1006:	f0 40       	sbci	r31, 0x00	; 0
    1008:	53 95       	inc	r21
    100a:	c9 f7       	brne	.-14     	; 0xffe <__addsf3x+0x52>
    100c:	7e f4       	brtc	.+30     	; 0x102c <__addsf3x+0x80>
    100e:	1f 16       	cp	r1, r31
    1010:	ba 0b       	sbc	r27, r26
    1012:	62 0b       	sbc	r22, r18
    1014:	73 0b       	sbc	r23, r19
    1016:	84 0b       	sbc	r24, r20
    1018:	ba f0       	brmi	.+46     	; 0x1048 <__addsf3x+0x9c>
    101a:	91 50       	subi	r25, 0x01	; 1
    101c:	a1 f0       	breq	.+40     	; 0x1046 <__addsf3x+0x9a>
    101e:	ff 0f       	add	r31, r31
    1020:	bb 1f       	adc	r27, r27
    1022:	66 1f       	adc	r22, r22
    1024:	77 1f       	adc	r23, r23
    1026:	88 1f       	adc	r24, r24
    1028:	c2 f7       	brpl	.-16     	; 0x101a <__addsf3x+0x6e>
    102a:	0e c0       	rjmp	.+28     	; 0x1048 <__addsf3x+0x9c>
    102c:	ba 0f       	add	r27, r26
    102e:	62 1f       	adc	r22, r18
    1030:	73 1f       	adc	r23, r19
    1032:	84 1f       	adc	r24, r20
    1034:	48 f4       	brcc	.+18     	; 0x1048 <__addsf3x+0x9c>
    1036:	87 95       	ror	r24
    1038:	77 95       	ror	r23
    103a:	67 95       	ror	r22
    103c:	b7 95       	ror	r27
    103e:	f7 95       	ror	r31
    1040:	9e 3f       	cpi	r25, 0xFE	; 254
    1042:	08 f0       	brcs	.+2      	; 0x1046 <__addsf3x+0x9a>
    1044:	b0 cf       	rjmp	.-160    	; 0xfa6 <__addsf3+0x28>
    1046:	93 95       	inc	r25
    1048:	88 0f       	add	r24, r24
    104a:	08 f0       	brcs	.+2      	; 0x104e <__addsf3x+0xa2>
    104c:	99 27       	eor	r25, r25
    104e:	ee 0f       	add	r30, r30
    1050:	97 95       	ror	r25
    1052:	87 95       	ror	r24
    1054:	08 95       	ret

00001056 <__cmpsf2>:
    1056:	0e 94 15 09 	call	0x122a	; 0x122a <__fp_cmp>
    105a:	08 f4       	brcc	.+2      	; 0x105e <__cmpsf2+0x8>
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	08 95       	ret

00001060 <__divsf3>:
    1060:	0e 94 44 08 	call	0x1088	; 0x1088 <__divsf3x>
    1064:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__fp_round>
    1068:	0e 94 49 09 	call	0x1292	; 0x1292 <__fp_pscB>
    106c:	58 f0       	brcs	.+22     	; 0x1084 <__divsf3+0x24>
    106e:	0e 94 42 09 	call	0x1284	; 0x1284 <__fp_pscA>
    1072:	40 f0       	brcs	.+16     	; 0x1084 <__divsf3+0x24>
    1074:	29 f4       	brne	.+10     	; 0x1080 <__divsf3+0x20>
    1076:	5f 3f       	cpi	r21, 0xFF	; 255
    1078:	29 f0       	breq	.+10     	; 0x1084 <__divsf3+0x24>
    107a:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__fp_inf>
    107e:	51 11       	cpse	r21, r1
    1080:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__fp_szero>
    1084:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__fp_nan>

00001088 <__divsf3x>:
    1088:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__fp_split3>
    108c:	68 f3       	brcs	.-38     	; 0x1068 <__divsf3+0x8>

0000108e <__divsf3_pse>:
    108e:	99 23       	and	r25, r25
    1090:	b1 f3       	breq	.-20     	; 0x107e <__divsf3+0x1e>
    1092:	55 23       	and	r21, r21
    1094:	91 f3       	breq	.-28     	; 0x107a <__divsf3+0x1a>
    1096:	95 1b       	sub	r25, r21
    1098:	55 0b       	sbc	r21, r21
    109a:	bb 27       	eor	r27, r27
    109c:	aa 27       	eor	r26, r26
    109e:	62 17       	cp	r22, r18
    10a0:	73 07       	cpc	r23, r19
    10a2:	84 07       	cpc	r24, r20
    10a4:	38 f0       	brcs	.+14     	; 0x10b4 <__divsf3_pse+0x26>
    10a6:	9f 5f       	subi	r25, 0xFF	; 255
    10a8:	5f 4f       	sbci	r21, 0xFF	; 255
    10aa:	22 0f       	add	r18, r18
    10ac:	33 1f       	adc	r19, r19
    10ae:	44 1f       	adc	r20, r20
    10b0:	aa 1f       	adc	r26, r26
    10b2:	a9 f3       	breq	.-22     	; 0x109e <__divsf3_pse+0x10>
    10b4:	35 d0       	rcall	.+106    	; 0x1120 <__divsf3_pse+0x92>
    10b6:	0e 2e       	mov	r0, r30
    10b8:	3a f0       	brmi	.+14     	; 0x10c8 <__divsf3_pse+0x3a>
    10ba:	e0 e8       	ldi	r30, 0x80	; 128
    10bc:	32 d0       	rcall	.+100    	; 0x1122 <__divsf3_pse+0x94>
    10be:	91 50       	subi	r25, 0x01	; 1
    10c0:	50 40       	sbci	r21, 0x00	; 0
    10c2:	e6 95       	lsr	r30
    10c4:	00 1c       	adc	r0, r0
    10c6:	ca f7       	brpl	.-14     	; 0x10ba <__divsf3_pse+0x2c>
    10c8:	2b d0       	rcall	.+86     	; 0x1120 <__divsf3_pse+0x92>
    10ca:	fe 2f       	mov	r31, r30
    10cc:	29 d0       	rcall	.+82     	; 0x1120 <__divsf3_pse+0x92>
    10ce:	66 0f       	add	r22, r22
    10d0:	77 1f       	adc	r23, r23
    10d2:	88 1f       	adc	r24, r24
    10d4:	bb 1f       	adc	r27, r27
    10d6:	26 17       	cp	r18, r22
    10d8:	37 07       	cpc	r19, r23
    10da:	48 07       	cpc	r20, r24
    10dc:	ab 07       	cpc	r26, r27
    10de:	b0 e8       	ldi	r27, 0x80	; 128
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <__divsf3_pse+0x56>
    10e2:	bb 0b       	sbc	r27, r27
    10e4:	80 2d       	mov	r24, r0
    10e6:	bf 01       	movw	r22, r30
    10e8:	ff 27       	eor	r31, r31
    10ea:	93 58       	subi	r25, 0x83	; 131
    10ec:	5f 4f       	sbci	r21, 0xFF	; 255
    10ee:	3a f0       	brmi	.+14     	; 0x10fe <__divsf3_pse+0x70>
    10f0:	9e 3f       	cpi	r25, 0xFE	; 254
    10f2:	51 05       	cpc	r21, r1
    10f4:	78 f0       	brcs	.+30     	; 0x1114 <__divsf3_pse+0x86>
    10f6:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__fp_inf>
    10fa:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__fp_szero>
    10fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1100:	e4 f3       	brlt	.-8      	; 0x10fa <__divsf3_pse+0x6c>
    1102:	98 3e       	cpi	r25, 0xE8	; 232
    1104:	d4 f3       	brlt	.-12     	; 0x10fa <__divsf3_pse+0x6c>
    1106:	86 95       	lsr	r24
    1108:	77 95       	ror	r23
    110a:	67 95       	ror	r22
    110c:	b7 95       	ror	r27
    110e:	f7 95       	ror	r31
    1110:	9f 5f       	subi	r25, 0xFF	; 255
    1112:	c9 f7       	brne	.-14     	; 0x1106 <__divsf3_pse+0x78>
    1114:	88 0f       	add	r24, r24
    1116:	91 1d       	adc	r25, r1
    1118:	96 95       	lsr	r25
    111a:	87 95       	ror	r24
    111c:	97 f9       	bld	r25, 7
    111e:	08 95       	ret
    1120:	e1 e0       	ldi	r30, 0x01	; 1
    1122:	66 0f       	add	r22, r22
    1124:	77 1f       	adc	r23, r23
    1126:	88 1f       	adc	r24, r24
    1128:	bb 1f       	adc	r27, r27
    112a:	62 17       	cp	r22, r18
    112c:	73 07       	cpc	r23, r19
    112e:	84 07       	cpc	r24, r20
    1130:	ba 07       	cpc	r27, r26
    1132:	20 f0       	brcs	.+8      	; 0x113c <__divsf3_pse+0xae>
    1134:	62 1b       	sub	r22, r18
    1136:	73 0b       	sbc	r23, r19
    1138:	84 0b       	sbc	r24, r20
    113a:	ba 0b       	sbc	r27, r26
    113c:	ee 1f       	adc	r30, r30
    113e:	88 f7       	brcc	.-30     	; 0x1122 <__divsf3_pse+0x94>
    1140:	e0 95       	com	r30
    1142:	08 95       	ret

00001144 <__fixsfsi>:
    1144:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixunssfsi>
    1148:	68 94       	set
    114a:	b1 11       	cpse	r27, r1
    114c:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__fp_szero>
    1150:	08 95       	ret

00001152 <__fixunssfsi>:
    1152:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fp_splitA>
    1156:	88 f0       	brcs	.+34     	; 0x117a <__fixunssfsi+0x28>
    1158:	9f 57       	subi	r25, 0x7F	; 127
    115a:	98 f0       	brcs	.+38     	; 0x1182 <__fixunssfsi+0x30>
    115c:	b9 2f       	mov	r27, r25
    115e:	99 27       	eor	r25, r25
    1160:	b7 51       	subi	r27, 0x17	; 23
    1162:	b0 f0       	brcs	.+44     	; 0x1190 <__fixunssfsi+0x3e>
    1164:	e1 f0       	breq	.+56     	; 0x119e <__fixunssfsi+0x4c>
    1166:	66 0f       	add	r22, r22
    1168:	77 1f       	adc	r23, r23
    116a:	88 1f       	adc	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	1a f0       	brmi	.+6      	; 0x1176 <__fixunssfsi+0x24>
    1170:	ba 95       	dec	r27
    1172:	c9 f7       	brne	.-14     	; 0x1166 <__fixunssfsi+0x14>
    1174:	14 c0       	rjmp	.+40     	; 0x119e <__fixunssfsi+0x4c>
    1176:	b1 30       	cpi	r27, 0x01	; 1
    1178:	91 f0       	breq	.+36     	; 0x119e <__fixunssfsi+0x4c>
    117a:	0e 94 83 09 	call	0x1306	; 0x1306 <__fp_zero>
    117e:	b1 e0       	ldi	r27, 0x01	; 1
    1180:	08 95       	ret
    1182:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__fp_zero>
    1186:	67 2f       	mov	r22, r23
    1188:	78 2f       	mov	r23, r24
    118a:	88 27       	eor	r24, r24
    118c:	b8 5f       	subi	r27, 0xF8	; 248
    118e:	39 f0       	breq	.+14     	; 0x119e <__fixunssfsi+0x4c>
    1190:	b9 3f       	cpi	r27, 0xF9	; 249
    1192:	cc f3       	brlt	.-14     	; 0x1186 <__fixunssfsi+0x34>
    1194:	86 95       	lsr	r24
    1196:	77 95       	ror	r23
    1198:	67 95       	ror	r22
    119a:	b3 95       	inc	r27
    119c:	d9 f7       	brne	.-10     	; 0x1194 <__fixunssfsi+0x42>
    119e:	3e f4       	brtc	.+14     	; 0x11ae <__fixunssfsi+0x5c>
    11a0:	90 95       	com	r25
    11a2:	80 95       	com	r24
    11a4:	70 95       	com	r23
    11a6:	61 95       	neg	r22
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	8f 4f       	sbci	r24, 0xFF	; 255
    11ac:	9f 4f       	sbci	r25, 0xFF	; 255
    11ae:	08 95       	ret

000011b0 <__floatunsisf>:
    11b0:	e8 94       	clt
    11b2:	09 c0       	rjmp	.+18     	; 0x11c6 <__floatsisf+0x12>

000011b4 <__floatsisf>:
    11b4:	97 fb       	bst	r25, 7
    11b6:	3e f4       	brtc	.+14     	; 0x11c6 <__floatsisf+0x12>
    11b8:	90 95       	com	r25
    11ba:	80 95       	com	r24
    11bc:	70 95       	com	r23
    11be:	61 95       	neg	r22
    11c0:	7f 4f       	sbci	r23, 0xFF	; 255
    11c2:	8f 4f       	sbci	r24, 0xFF	; 255
    11c4:	9f 4f       	sbci	r25, 0xFF	; 255
    11c6:	99 23       	and	r25, r25
    11c8:	a9 f0       	breq	.+42     	; 0x11f4 <__floatsisf+0x40>
    11ca:	f9 2f       	mov	r31, r25
    11cc:	96 e9       	ldi	r25, 0x96	; 150
    11ce:	bb 27       	eor	r27, r27
    11d0:	93 95       	inc	r25
    11d2:	f6 95       	lsr	r31
    11d4:	87 95       	ror	r24
    11d6:	77 95       	ror	r23
    11d8:	67 95       	ror	r22
    11da:	b7 95       	ror	r27
    11dc:	f1 11       	cpse	r31, r1
    11de:	f8 cf       	rjmp	.-16     	; 0x11d0 <__floatsisf+0x1c>
    11e0:	fa f4       	brpl	.+62     	; 0x1220 <__floatsisf+0x6c>
    11e2:	bb 0f       	add	r27, r27
    11e4:	11 f4       	brne	.+4      	; 0x11ea <__floatsisf+0x36>
    11e6:	60 ff       	sbrs	r22, 0
    11e8:	1b c0       	rjmp	.+54     	; 0x1220 <__floatsisf+0x6c>
    11ea:	6f 5f       	subi	r22, 0xFF	; 255
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
    11ee:	8f 4f       	sbci	r24, 0xFF	; 255
    11f0:	9f 4f       	sbci	r25, 0xFF	; 255
    11f2:	16 c0       	rjmp	.+44     	; 0x1220 <__floatsisf+0x6c>
    11f4:	88 23       	and	r24, r24
    11f6:	11 f0       	breq	.+4      	; 0x11fc <__floatsisf+0x48>
    11f8:	96 e9       	ldi	r25, 0x96	; 150
    11fa:	11 c0       	rjmp	.+34     	; 0x121e <__floatsisf+0x6a>
    11fc:	77 23       	and	r23, r23
    11fe:	21 f0       	breq	.+8      	; 0x1208 <__floatsisf+0x54>
    1200:	9e e8       	ldi	r25, 0x8E	; 142
    1202:	87 2f       	mov	r24, r23
    1204:	76 2f       	mov	r23, r22
    1206:	05 c0       	rjmp	.+10     	; 0x1212 <__floatsisf+0x5e>
    1208:	66 23       	and	r22, r22
    120a:	71 f0       	breq	.+28     	; 0x1228 <__floatsisf+0x74>
    120c:	96 e8       	ldi	r25, 0x86	; 134
    120e:	86 2f       	mov	r24, r22
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	2a f0       	brmi	.+10     	; 0x1220 <__floatsisf+0x6c>
    1216:	9a 95       	dec	r25
    1218:	66 0f       	add	r22, r22
    121a:	77 1f       	adc	r23, r23
    121c:	88 1f       	adc	r24, r24
    121e:	da f7       	brpl	.-10     	; 0x1216 <__floatsisf+0x62>
    1220:	88 0f       	add	r24, r24
    1222:	96 95       	lsr	r25
    1224:	87 95       	ror	r24
    1226:	97 f9       	bld	r25, 7
    1228:	08 95       	ret

0000122a <__fp_cmp>:
    122a:	99 0f       	add	r25, r25
    122c:	00 08       	sbc	r0, r0
    122e:	55 0f       	add	r21, r21
    1230:	aa 0b       	sbc	r26, r26
    1232:	e0 e8       	ldi	r30, 0x80	; 128
    1234:	fe ef       	ldi	r31, 0xFE	; 254
    1236:	16 16       	cp	r1, r22
    1238:	17 06       	cpc	r1, r23
    123a:	e8 07       	cpc	r30, r24
    123c:	f9 07       	cpc	r31, r25
    123e:	c0 f0       	brcs	.+48     	; 0x1270 <__fp_cmp+0x46>
    1240:	12 16       	cp	r1, r18
    1242:	13 06       	cpc	r1, r19
    1244:	e4 07       	cpc	r30, r20
    1246:	f5 07       	cpc	r31, r21
    1248:	98 f0       	brcs	.+38     	; 0x1270 <__fp_cmp+0x46>
    124a:	62 1b       	sub	r22, r18
    124c:	73 0b       	sbc	r23, r19
    124e:	84 0b       	sbc	r24, r20
    1250:	95 0b       	sbc	r25, r21
    1252:	39 f4       	brne	.+14     	; 0x1262 <__fp_cmp+0x38>
    1254:	0a 26       	eor	r0, r26
    1256:	61 f0       	breq	.+24     	; 0x1270 <__fp_cmp+0x46>
    1258:	23 2b       	or	r18, r19
    125a:	24 2b       	or	r18, r20
    125c:	25 2b       	or	r18, r21
    125e:	21 f4       	brne	.+8      	; 0x1268 <__fp_cmp+0x3e>
    1260:	08 95       	ret
    1262:	0a 26       	eor	r0, r26
    1264:	09 f4       	brne	.+2      	; 0x1268 <__fp_cmp+0x3e>
    1266:	a1 40       	sbci	r26, 0x01	; 1
    1268:	a6 95       	lsr	r26
    126a:	8f ef       	ldi	r24, 0xFF	; 255
    126c:	81 1d       	adc	r24, r1
    126e:	81 1d       	adc	r24, r1
    1270:	08 95       	ret

00001272 <__fp_inf>:
    1272:	97 f9       	bld	r25, 7
    1274:	9f 67       	ori	r25, 0x7F	; 127
    1276:	80 e8       	ldi	r24, 0x80	; 128
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	08 95       	ret

0000127e <__fp_nan>:
    127e:	9f ef       	ldi	r25, 0xFF	; 255
    1280:	80 ec       	ldi	r24, 0xC0	; 192
    1282:	08 95       	ret

00001284 <__fp_pscA>:
    1284:	00 24       	eor	r0, r0
    1286:	0a 94       	dec	r0
    1288:	16 16       	cp	r1, r22
    128a:	17 06       	cpc	r1, r23
    128c:	18 06       	cpc	r1, r24
    128e:	09 06       	cpc	r0, r25
    1290:	08 95       	ret

00001292 <__fp_pscB>:
    1292:	00 24       	eor	r0, r0
    1294:	0a 94       	dec	r0
    1296:	12 16       	cp	r1, r18
    1298:	13 06       	cpc	r1, r19
    129a:	14 06       	cpc	r1, r20
    129c:	05 06       	cpc	r0, r21
    129e:	08 95       	ret

000012a0 <__fp_round>:
    12a0:	09 2e       	mov	r0, r25
    12a2:	03 94       	inc	r0
    12a4:	00 0c       	add	r0, r0
    12a6:	11 f4       	brne	.+4      	; 0x12ac <__fp_round+0xc>
    12a8:	88 23       	and	r24, r24
    12aa:	52 f0       	brmi	.+20     	; 0x12c0 <__fp_round+0x20>
    12ac:	bb 0f       	add	r27, r27
    12ae:	40 f4       	brcc	.+16     	; 0x12c0 <__fp_round+0x20>
    12b0:	bf 2b       	or	r27, r31
    12b2:	11 f4       	brne	.+4      	; 0x12b8 <__fp_round+0x18>
    12b4:	60 ff       	sbrs	r22, 0
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <__fp_round+0x20>
    12b8:	6f 5f       	subi	r22, 0xFF	; 255
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	8f 4f       	sbci	r24, 0xFF	; 255
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	08 95       	ret

000012c2 <__fp_split3>:
    12c2:	57 fd       	sbrc	r21, 7
    12c4:	90 58       	subi	r25, 0x80	; 128
    12c6:	44 0f       	add	r20, r20
    12c8:	55 1f       	adc	r21, r21
    12ca:	59 f0       	breq	.+22     	; 0x12e2 <__fp_splitA+0x10>
    12cc:	5f 3f       	cpi	r21, 0xFF	; 255
    12ce:	71 f0       	breq	.+28     	; 0x12ec <__fp_splitA+0x1a>
    12d0:	47 95       	ror	r20

000012d2 <__fp_splitA>:
    12d2:	88 0f       	add	r24, r24
    12d4:	97 fb       	bst	r25, 7
    12d6:	99 1f       	adc	r25, r25
    12d8:	61 f0       	breq	.+24     	; 0x12f2 <__fp_splitA+0x20>
    12da:	9f 3f       	cpi	r25, 0xFF	; 255
    12dc:	79 f0       	breq	.+30     	; 0x12fc <__fp_splitA+0x2a>
    12de:	87 95       	ror	r24
    12e0:	08 95       	ret
    12e2:	12 16       	cp	r1, r18
    12e4:	13 06       	cpc	r1, r19
    12e6:	14 06       	cpc	r1, r20
    12e8:	55 1f       	adc	r21, r21
    12ea:	f2 cf       	rjmp	.-28     	; 0x12d0 <__fp_split3+0xe>
    12ec:	46 95       	lsr	r20
    12ee:	f1 df       	rcall	.-30     	; 0x12d2 <__fp_splitA>
    12f0:	08 c0       	rjmp	.+16     	; 0x1302 <__fp_splitA+0x30>
    12f2:	16 16       	cp	r1, r22
    12f4:	17 06       	cpc	r1, r23
    12f6:	18 06       	cpc	r1, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	f1 cf       	rjmp	.-30     	; 0x12de <__fp_splitA+0xc>
    12fc:	86 95       	lsr	r24
    12fe:	71 05       	cpc	r23, r1
    1300:	61 05       	cpc	r22, r1
    1302:	08 94       	sec
    1304:	08 95       	ret

00001306 <__fp_zero>:
    1306:	e8 94       	clt

00001308 <__fp_szero>:
    1308:	bb 27       	eor	r27, r27
    130a:	66 27       	eor	r22, r22
    130c:	77 27       	eor	r23, r23
    130e:	cb 01       	movw	r24, r22
    1310:	97 f9       	bld	r25, 7
    1312:	08 95       	ret

00001314 <__gesf2>:
    1314:	0e 94 15 09 	call	0x122a	; 0x122a <__fp_cmp>
    1318:	08 f4       	brcc	.+2      	; 0x131c <__gesf2+0x8>
    131a:	8f ef       	ldi	r24, 0xFF	; 255
    131c:	08 95       	ret

0000131e <__mulsf3>:
    131e:	0e 94 a2 09 	call	0x1344	; 0x1344 <__mulsf3x>
    1322:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__fp_round>
    1326:	0e 94 42 09 	call	0x1284	; 0x1284 <__fp_pscA>
    132a:	38 f0       	brcs	.+14     	; 0x133a <__mulsf3+0x1c>
    132c:	0e 94 49 09 	call	0x1292	; 0x1292 <__fp_pscB>
    1330:	20 f0       	brcs	.+8      	; 0x133a <__mulsf3+0x1c>
    1332:	95 23       	and	r25, r21
    1334:	11 f0       	breq	.+4      	; 0x133a <__mulsf3+0x1c>
    1336:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__fp_inf>
    133a:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__fp_nan>
    133e:	11 24       	eor	r1, r1
    1340:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__fp_szero>

00001344 <__mulsf3x>:
    1344:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__fp_split3>
    1348:	70 f3       	brcs	.-36     	; 0x1326 <__mulsf3+0x8>

0000134a <__mulsf3_pse>:
    134a:	95 9f       	mul	r25, r21
    134c:	c1 f3       	breq	.-16     	; 0x133e <__mulsf3+0x20>
    134e:	95 0f       	add	r25, r21
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	55 1f       	adc	r21, r21
    1354:	62 9f       	mul	r22, r18
    1356:	f0 01       	movw	r30, r0
    1358:	72 9f       	mul	r23, r18
    135a:	bb 27       	eor	r27, r27
    135c:	f0 0d       	add	r31, r0
    135e:	b1 1d       	adc	r27, r1
    1360:	63 9f       	mul	r22, r19
    1362:	aa 27       	eor	r26, r26
    1364:	f0 0d       	add	r31, r0
    1366:	b1 1d       	adc	r27, r1
    1368:	aa 1f       	adc	r26, r26
    136a:	64 9f       	mul	r22, r20
    136c:	66 27       	eor	r22, r22
    136e:	b0 0d       	add	r27, r0
    1370:	a1 1d       	adc	r26, r1
    1372:	66 1f       	adc	r22, r22
    1374:	82 9f       	mul	r24, r18
    1376:	22 27       	eor	r18, r18
    1378:	b0 0d       	add	r27, r0
    137a:	a1 1d       	adc	r26, r1
    137c:	62 1f       	adc	r22, r18
    137e:	73 9f       	mul	r23, r19
    1380:	b0 0d       	add	r27, r0
    1382:	a1 1d       	adc	r26, r1
    1384:	62 1f       	adc	r22, r18
    1386:	83 9f       	mul	r24, r19
    1388:	a0 0d       	add	r26, r0
    138a:	61 1d       	adc	r22, r1
    138c:	22 1f       	adc	r18, r18
    138e:	74 9f       	mul	r23, r20
    1390:	33 27       	eor	r19, r19
    1392:	a0 0d       	add	r26, r0
    1394:	61 1d       	adc	r22, r1
    1396:	23 1f       	adc	r18, r19
    1398:	84 9f       	mul	r24, r20
    139a:	60 0d       	add	r22, r0
    139c:	21 1d       	adc	r18, r1
    139e:	82 2f       	mov	r24, r18
    13a0:	76 2f       	mov	r23, r22
    13a2:	6a 2f       	mov	r22, r26
    13a4:	11 24       	eor	r1, r1
    13a6:	9f 57       	subi	r25, 0x7F	; 127
    13a8:	50 40       	sbci	r21, 0x00	; 0
    13aa:	9a f0       	brmi	.+38     	; 0x13d2 <__mulsf3_pse+0x88>
    13ac:	f1 f0       	breq	.+60     	; 0x13ea <__mulsf3_pse+0xa0>
    13ae:	88 23       	and	r24, r24
    13b0:	4a f0       	brmi	.+18     	; 0x13c4 <__mulsf3_pse+0x7a>
    13b2:	ee 0f       	add	r30, r30
    13b4:	ff 1f       	adc	r31, r31
    13b6:	bb 1f       	adc	r27, r27
    13b8:	66 1f       	adc	r22, r22
    13ba:	77 1f       	adc	r23, r23
    13bc:	88 1f       	adc	r24, r24
    13be:	91 50       	subi	r25, 0x01	; 1
    13c0:	50 40       	sbci	r21, 0x00	; 0
    13c2:	a9 f7       	brne	.-22     	; 0x13ae <__mulsf3_pse+0x64>
    13c4:	9e 3f       	cpi	r25, 0xFE	; 254
    13c6:	51 05       	cpc	r21, r1
    13c8:	80 f0       	brcs	.+32     	; 0x13ea <__mulsf3_pse+0xa0>
    13ca:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__fp_inf>
    13ce:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__fp_szero>
    13d2:	5f 3f       	cpi	r21, 0xFF	; 255
    13d4:	e4 f3       	brlt	.-8      	; 0x13ce <__mulsf3_pse+0x84>
    13d6:	98 3e       	cpi	r25, 0xE8	; 232
    13d8:	d4 f3       	brlt	.-12     	; 0x13ce <__mulsf3_pse+0x84>
    13da:	86 95       	lsr	r24
    13dc:	77 95       	ror	r23
    13de:	67 95       	ror	r22
    13e0:	b7 95       	ror	r27
    13e2:	f7 95       	ror	r31
    13e4:	e7 95       	ror	r30
    13e6:	9f 5f       	subi	r25, 0xFF	; 255
    13e8:	c1 f7       	brne	.-16     	; 0x13da <__mulsf3_pse+0x90>
    13ea:	fe 2b       	or	r31, r30
    13ec:	88 0f       	add	r24, r24
    13ee:	91 1d       	adc	r25, r1
    13f0:	96 95       	lsr	r25
    13f2:	87 95       	ror	r24
    13f4:	97 f9       	bld	r25, 7
    13f6:	08 95       	ret

000013f8 <__tablejump2__>:
    13f8:	ee 0f       	add	r30, r30
    13fa:	ff 1f       	adc	r31, r31
    13fc:	05 90       	lpm	r0, Z+
    13fe:	f4 91       	lpm	r31, Z
    1400:	e0 2d       	mov	r30, r0
    1402:	09 94       	ijmp

00001404 <sprintf>:
    1404:	ae e0       	ldi	r26, 0x0E	; 14
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e8 e0       	ldi	r30, 0x08	; 8
    140a:	fa e0       	ldi	r31, 0x0A	; 10
    140c:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__prologue_saves__+0x1c>
    1410:	0d 89       	ldd	r16, Y+21	; 0x15
    1412:	1e 89       	ldd	r17, Y+22	; 0x16
    1414:	86 e0       	ldi	r24, 0x06	; 6
    1416:	8c 83       	std	Y+4, r24	; 0x04
    1418:	1a 83       	std	Y+2, r17	; 0x02
    141a:	09 83       	std	Y+1, r16	; 0x01
    141c:	8f ef       	ldi	r24, 0xFF	; 255
    141e:	9f e7       	ldi	r25, 0x7F	; 127
    1420:	9e 83       	std	Y+6, r25	; 0x06
    1422:	8d 83       	std	Y+5, r24	; 0x05
    1424:	ae 01       	movw	r20, r28
    1426:	47 5e       	subi	r20, 0xE7	; 231
    1428:	5f 4f       	sbci	r21, 0xFF	; 255
    142a:	6f 89       	ldd	r22, Y+23	; 0x17
    142c:	78 8d       	ldd	r23, Y+24	; 0x18
    142e:	ce 01       	movw	r24, r28
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	0e 94 24 0a 	call	0x1448	; 0x1448 <vfprintf>
    1436:	ef 81       	ldd	r30, Y+7	; 0x07
    1438:	f8 85       	ldd	r31, Y+8	; 0x08
    143a:	e0 0f       	add	r30, r16
    143c:	f1 1f       	adc	r31, r17
    143e:	10 82       	st	Z, r1
    1440:	2e 96       	adiw	r28, 0x0e	; 14
    1442:	e4 e0       	ldi	r30, 0x04	; 4
    1444:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__epilogue_restores__+0x1c>

00001448 <vfprintf>:
    1448:	ab e0       	ldi	r26, 0x0B	; 11
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	ea e2       	ldi	r30, 0x2A	; 42
    144e:	fa e0       	ldi	r31, 0x0A	; 10
    1450:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__prologue_saves__>
    1454:	6c 01       	movw	r12, r24
    1456:	7b 01       	movw	r14, r22
    1458:	8a 01       	movw	r16, r20
    145a:	fc 01       	movw	r30, r24
    145c:	17 82       	std	Z+7, r1	; 0x07
    145e:	16 82       	std	Z+6, r1	; 0x06
    1460:	83 81       	ldd	r24, Z+3	; 0x03
    1462:	81 ff       	sbrs	r24, 1
    1464:	cc c1       	rjmp	.+920    	; 0x17fe <vfprintf+0x3b6>
    1466:	ce 01       	movw	r24, r28
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	3c 01       	movw	r6, r24
    146c:	f6 01       	movw	r30, r12
    146e:	93 81       	ldd	r25, Z+3	; 0x03
    1470:	f7 01       	movw	r30, r14
    1472:	93 fd       	sbrc	r25, 3
    1474:	85 91       	lpm	r24, Z+
    1476:	93 ff       	sbrs	r25, 3
    1478:	81 91       	ld	r24, Z+
    147a:	7f 01       	movw	r14, r30
    147c:	88 23       	and	r24, r24
    147e:	09 f4       	brne	.+2      	; 0x1482 <vfprintf+0x3a>
    1480:	ba c1       	rjmp	.+884    	; 0x17f6 <vfprintf+0x3ae>
    1482:	85 32       	cpi	r24, 0x25	; 37
    1484:	39 f4       	brne	.+14     	; 0x1494 <vfprintf+0x4c>
    1486:	93 fd       	sbrc	r25, 3
    1488:	85 91       	lpm	r24, Z+
    148a:	93 ff       	sbrs	r25, 3
    148c:	81 91       	ld	r24, Z+
    148e:	7f 01       	movw	r14, r30
    1490:	85 32       	cpi	r24, 0x25	; 37
    1492:	29 f4       	brne	.+10     	; 0x149e <vfprintf+0x56>
    1494:	b6 01       	movw	r22, r12
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    149c:	e7 cf       	rjmp	.-50     	; 0x146c <vfprintf+0x24>
    149e:	91 2c       	mov	r9, r1
    14a0:	21 2c       	mov	r2, r1
    14a2:	31 2c       	mov	r3, r1
    14a4:	ff e1       	ldi	r31, 0x1F	; 31
    14a6:	f3 15       	cp	r31, r3
    14a8:	d8 f0       	brcs	.+54     	; 0x14e0 <vfprintf+0x98>
    14aa:	8b 32       	cpi	r24, 0x2B	; 43
    14ac:	79 f0       	breq	.+30     	; 0x14cc <vfprintf+0x84>
    14ae:	38 f4       	brcc	.+14     	; 0x14be <vfprintf+0x76>
    14b0:	80 32       	cpi	r24, 0x20	; 32
    14b2:	79 f0       	breq	.+30     	; 0x14d2 <vfprintf+0x8a>
    14b4:	83 32       	cpi	r24, 0x23	; 35
    14b6:	a1 f4       	brne	.+40     	; 0x14e0 <vfprintf+0x98>
    14b8:	23 2d       	mov	r18, r3
    14ba:	20 61       	ori	r18, 0x10	; 16
    14bc:	1d c0       	rjmp	.+58     	; 0x14f8 <vfprintf+0xb0>
    14be:	8d 32       	cpi	r24, 0x2D	; 45
    14c0:	61 f0       	breq	.+24     	; 0x14da <vfprintf+0x92>
    14c2:	80 33       	cpi	r24, 0x30	; 48
    14c4:	69 f4       	brne	.+26     	; 0x14e0 <vfprintf+0x98>
    14c6:	23 2d       	mov	r18, r3
    14c8:	21 60       	ori	r18, 0x01	; 1
    14ca:	16 c0       	rjmp	.+44     	; 0x14f8 <vfprintf+0xb0>
    14cc:	83 2d       	mov	r24, r3
    14ce:	82 60       	ori	r24, 0x02	; 2
    14d0:	38 2e       	mov	r3, r24
    14d2:	e3 2d       	mov	r30, r3
    14d4:	e4 60       	ori	r30, 0x04	; 4
    14d6:	3e 2e       	mov	r3, r30
    14d8:	2a c0       	rjmp	.+84     	; 0x152e <vfprintf+0xe6>
    14da:	f3 2d       	mov	r31, r3
    14dc:	f8 60       	ori	r31, 0x08	; 8
    14de:	1d c0       	rjmp	.+58     	; 0x151a <vfprintf+0xd2>
    14e0:	37 fc       	sbrc	r3, 7
    14e2:	2d c0       	rjmp	.+90     	; 0x153e <vfprintf+0xf6>
    14e4:	20 ed       	ldi	r18, 0xD0	; 208
    14e6:	28 0f       	add	r18, r24
    14e8:	2a 30       	cpi	r18, 0x0A	; 10
    14ea:	40 f0       	brcs	.+16     	; 0x14fc <vfprintf+0xb4>
    14ec:	8e 32       	cpi	r24, 0x2E	; 46
    14ee:	b9 f4       	brne	.+46     	; 0x151e <vfprintf+0xd6>
    14f0:	36 fc       	sbrc	r3, 6
    14f2:	81 c1       	rjmp	.+770    	; 0x17f6 <vfprintf+0x3ae>
    14f4:	23 2d       	mov	r18, r3
    14f6:	20 64       	ori	r18, 0x40	; 64
    14f8:	32 2e       	mov	r3, r18
    14fa:	19 c0       	rjmp	.+50     	; 0x152e <vfprintf+0xe6>
    14fc:	36 fe       	sbrs	r3, 6
    14fe:	06 c0       	rjmp	.+12     	; 0x150c <vfprintf+0xc4>
    1500:	8a e0       	ldi	r24, 0x0A	; 10
    1502:	98 9e       	mul	r9, r24
    1504:	20 0d       	add	r18, r0
    1506:	11 24       	eor	r1, r1
    1508:	92 2e       	mov	r9, r18
    150a:	11 c0       	rjmp	.+34     	; 0x152e <vfprintf+0xe6>
    150c:	ea e0       	ldi	r30, 0x0A	; 10
    150e:	2e 9e       	mul	r2, r30
    1510:	20 0d       	add	r18, r0
    1512:	11 24       	eor	r1, r1
    1514:	22 2e       	mov	r2, r18
    1516:	f3 2d       	mov	r31, r3
    1518:	f0 62       	ori	r31, 0x20	; 32
    151a:	3f 2e       	mov	r3, r31
    151c:	08 c0       	rjmp	.+16     	; 0x152e <vfprintf+0xe6>
    151e:	8c 36       	cpi	r24, 0x6C	; 108
    1520:	21 f4       	brne	.+8      	; 0x152a <vfprintf+0xe2>
    1522:	83 2d       	mov	r24, r3
    1524:	80 68       	ori	r24, 0x80	; 128
    1526:	38 2e       	mov	r3, r24
    1528:	02 c0       	rjmp	.+4      	; 0x152e <vfprintf+0xe6>
    152a:	88 36       	cpi	r24, 0x68	; 104
    152c:	41 f4       	brne	.+16     	; 0x153e <vfprintf+0xf6>
    152e:	f7 01       	movw	r30, r14
    1530:	93 fd       	sbrc	r25, 3
    1532:	85 91       	lpm	r24, Z+
    1534:	93 ff       	sbrs	r25, 3
    1536:	81 91       	ld	r24, Z+
    1538:	7f 01       	movw	r14, r30
    153a:	81 11       	cpse	r24, r1
    153c:	b3 cf       	rjmp	.-154    	; 0x14a4 <vfprintf+0x5c>
    153e:	98 2f       	mov	r25, r24
    1540:	9f 7d       	andi	r25, 0xDF	; 223
    1542:	95 54       	subi	r25, 0x45	; 69
    1544:	93 30       	cpi	r25, 0x03	; 3
    1546:	28 f4       	brcc	.+10     	; 0x1552 <vfprintf+0x10a>
    1548:	0c 5f       	subi	r16, 0xFC	; 252
    154a:	1f 4f       	sbci	r17, 0xFF	; 255
    154c:	9f e3       	ldi	r25, 0x3F	; 63
    154e:	99 83       	std	Y+1, r25	; 0x01
    1550:	0d c0       	rjmp	.+26     	; 0x156c <vfprintf+0x124>
    1552:	83 36       	cpi	r24, 0x63	; 99
    1554:	31 f0       	breq	.+12     	; 0x1562 <vfprintf+0x11a>
    1556:	83 37       	cpi	r24, 0x73	; 115
    1558:	71 f0       	breq	.+28     	; 0x1576 <vfprintf+0x12e>
    155a:	83 35       	cpi	r24, 0x53	; 83
    155c:	09 f0       	breq	.+2      	; 0x1560 <vfprintf+0x118>
    155e:	59 c0       	rjmp	.+178    	; 0x1612 <vfprintf+0x1ca>
    1560:	21 c0       	rjmp	.+66     	; 0x15a4 <vfprintf+0x15c>
    1562:	f8 01       	movw	r30, r16
    1564:	80 81       	ld	r24, Z
    1566:	89 83       	std	Y+1, r24	; 0x01
    1568:	0e 5f       	subi	r16, 0xFE	; 254
    156a:	1f 4f       	sbci	r17, 0xFF	; 255
    156c:	88 24       	eor	r8, r8
    156e:	83 94       	inc	r8
    1570:	91 2c       	mov	r9, r1
    1572:	53 01       	movw	r10, r6
    1574:	13 c0       	rjmp	.+38     	; 0x159c <vfprintf+0x154>
    1576:	28 01       	movw	r4, r16
    1578:	f2 e0       	ldi	r31, 0x02	; 2
    157a:	4f 0e       	add	r4, r31
    157c:	51 1c       	adc	r5, r1
    157e:	f8 01       	movw	r30, r16
    1580:	a0 80       	ld	r10, Z
    1582:	b1 80       	ldd	r11, Z+1	; 0x01
    1584:	36 fe       	sbrs	r3, 6
    1586:	03 c0       	rjmp	.+6      	; 0x158e <vfprintf+0x146>
    1588:	69 2d       	mov	r22, r9
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <vfprintf+0x14a>
    158e:	6f ef       	ldi	r22, 0xFF	; 255
    1590:	7f ef       	ldi	r23, 0xFF	; 255
    1592:	c5 01       	movw	r24, r10
    1594:	0e 94 10 0c 	call	0x1820	; 0x1820 <strnlen>
    1598:	4c 01       	movw	r8, r24
    159a:	82 01       	movw	r16, r4
    159c:	f3 2d       	mov	r31, r3
    159e:	ff 77       	andi	r31, 0x7F	; 127
    15a0:	3f 2e       	mov	r3, r31
    15a2:	16 c0       	rjmp	.+44     	; 0x15d0 <vfprintf+0x188>
    15a4:	28 01       	movw	r4, r16
    15a6:	22 e0       	ldi	r18, 0x02	; 2
    15a8:	42 0e       	add	r4, r18
    15aa:	51 1c       	adc	r5, r1
    15ac:	f8 01       	movw	r30, r16
    15ae:	a0 80       	ld	r10, Z
    15b0:	b1 80       	ldd	r11, Z+1	; 0x01
    15b2:	36 fe       	sbrs	r3, 6
    15b4:	03 c0       	rjmp	.+6      	; 0x15bc <vfprintf+0x174>
    15b6:	69 2d       	mov	r22, r9
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <vfprintf+0x178>
    15bc:	6f ef       	ldi	r22, 0xFF	; 255
    15be:	7f ef       	ldi	r23, 0xFF	; 255
    15c0:	c5 01       	movw	r24, r10
    15c2:	0e 94 05 0c 	call	0x180a	; 0x180a <strnlen_P>
    15c6:	4c 01       	movw	r8, r24
    15c8:	f3 2d       	mov	r31, r3
    15ca:	f0 68       	ori	r31, 0x80	; 128
    15cc:	3f 2e       	mov	r3, r31
    15ce:	82 01       	movw	r16, r4
    15d0:	33 fc       	sbrc	r3, 3
    15d2:	1b c0       	rjmp	.+54     	; 0x160a <vfprintf+0x1c2>
    15d4:	82 2d       	mov	r24, r2
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	88 16       	cp	r8, r24
    15da:	99 06       	cpc	r9, r25
    15dc:	b0 f4       	brcc	.+44     	; 0x160a <vfprintf+0x1c2>
    15de:	b6 01       	movw	r22, r12
    15e0:	80 e2       	ldi	r24, 0x20	; 32
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    15e8:	2a 94       	dec	r2
    15ea:	f4 cf       	rjmp	.-24     	; 0x15d4 <vfprintf+0x18c>
    15ec:	f5 01       	movw	r30, r10
    15ee:	37 fc       	sbrc	r3, 7
    15f0:	85 91       	lpm	r24, Z+
    15f2:	37 fe       	sbrs	r3, 7
    15f4:	81 91       	ld	r24, Z+
    15f6:	5f 01       	movw	r10, r30
    15f8:	b6 01       	movw	r22, r12
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    1600:	21 10       	cpse	r2, r1
    1602:	2a 94       	dec	r2
    1604:	21 e0       	ldi	r18, 0x01	; 1
    1606:	82 1a       	sub	r8, r18
    1608:	91 08       	sbc	r9, r1
    160a:	81 14       	cp	r8, r1
    160c:	91 04       	cpc	r9, r1
    160e:	71 f7       	brne	.-36     	; 0x15ec <vfprintf+0x1a4>
    1610:	e8 c0       	rjmp	.+464    	; 0x17e2 <vfprintf+0x39a>
    1612:	84 36       	cpi	r24, 0x64	; 100
    1614:	11 f0       	breq	.+4      	; 0x161a <vfprintf+0x1d2>
    1616:	89 36       	cpi	r24, 0x69	; 105
    1618:	41 f5       	brne	.+80     	; 0x166a <vfprintf+0x222>
    161a:	f8 01       	movw	r30, r16
    161c:	37 fe       	sbrs	r3, 7
    161e:	07 c0       	rjmp	.+14     	; 0x162e <vfprintf+0x1e6>
    1620:	60 81       	ld	r22, Z
    1622:	71 81       	ldd	r23, Z+1	; 0x01
    1624:	82 81       	ldd	r24, Z+2	; 0x02
    1626:	93 81       	ldd	r25, Z+3	; 0x03
    1628:	0c 5f       	subi	r16, 0xFC	; 252
    162a:	1f 4f       	sbci	r17, 0xFF	; 255
    162c:	08 c0       	rjmp	.+16     	; 0x163e <vfprintf+0x1f6>
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	07 2e       	mov	r0, r23
    1634:	00 0c       	add	r0, r0
    1636:	88 0b       	sbc	r24, r24
    1638:	99 0b       	sbc	r25, r25
    163a:	0e 5f       	subi	r16, 0xFE	; 254
    163c:	1f 4f       	sbci	r17, 0xFF	; 255
    163e:	f3 2d       	mov	r31, r3
    1640:	ff 76       	andi	r31, 0x6F	; 111
    1642:	3f 2e       	mov	r3, r31
    1644:	97 ff       	sbrs	r25, 7
    1646:	09 c0       	rjmp	.+18     	; 0x165a <vfprintf+0x212>
    1648:	90 95       	com	r25
    164a:	80 95       	com	r24
    164c:	70 95       	com	r23
    164e:	61 95       	neg	r22
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	8f 4f       	sbci	r24, 0xFF	; 255
    1654:	9f 4f       	sbci	r25, 0xFF	; 255
    1656:	f0 68       	ori	r31, 0x80	; 128
    1658:	3f 2e       	mov	r3, r31
    165a:	2a e0       	ldi	r18, 0x0A	; 10
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	a3 01       	movw	r20, r6
    1660:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__ultoa_invert>
    1664:	88 2e       	mov	r8, r24
    1666:	86 18       	sub	r8, r6
    1668:	45 c0       	rjmp	.+138    	; 0x16f4 <vfprintf+0x2ac>
    166a:	85 37       	cpi	r24, 0x75	; 117
    166c:	31 f4       	brne	.+12     	; 0x167a <vfprintf+0x232>
    166e:	23 2d       	mov	r18, r3
    1670:	2f 7e       	andi	r18, 0xEF	; 239
    1672:	b2 2e       	mov	r11, r18
    1674:	2a e0       	ldi	r18, 0x0A	; 10
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	25 c0       	rjmp	.+74     	; 0x16c4 <vfprintf+0x27c>
    167a:	93 2d       	mov	r25, r3
    167c:	99 7f       	andi	r25, 0xF9	; 249
    167e:	b9 2e       	mov	r11, r25
    1680:	8f 36       	cpi	r24, 0x6F	; 111
    1682:	c1 f0       	breq	.+48     	; 0x16b4 <vfprintf+0x26c>
    1684:	18 f4       	brcc	.+6      	; 0x168c <vfprintf+0x244>
    1686:	88 35       	cpi	r24, 0x58	; 88
    1688:	79 f0       	breq	.+30     	; 0x16a8 <vfprintf+0x260>
    168a:	b5 c0       	rjmp	.+362    	; 0x17f6 <vfprintf+0x3ae>
    168c:	80 37       	cpi	r24, 0x70	; 112
    168e:	19 f0       	breq	.+6      	; 0x1696 <vfprintf+0x24e>
    1690:	88 37       	cpi	r24, 0x78	; 120
    1692:	21 f0       	breq	.+8      	; 0x169c <vfprintf+0x254>
    1694:	b0 c0       	rjmp	.+352    	; 0x17f6 <vfprintf+0x3ae>
    1696:	e9 2f       	mov	r30, r25
    1698:	e0 61       	ori	r30, 0x10	; 16
    169a:	be 2e       	mov	r11, r30
    169c:	b4 fe       	sbrs	r11, 4
    169e:	0d c0       	rjmp	.+26     	; 0x16ba <vfprintf+0x272>
    16a0:	fb 2d       	mov	r31, r11
    16a2:	f4 60       	ori	r31, 0x04	; 4
    16a4:	bf 2e       	mov	r11, r31
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <vfprintf+0x272>
    16a8:	34 fe       	sbrs	r3, 4
    16aa:	0a c0       	rjmp	.+20     	; 0x16c0 <vfprintf+0x278>
    16ac:	29 2f       	mov	r18, r25
    16ae:	26 60       	ori	r18, 0x06	; 6
    16b0:	b2 2e       	mov	r11, r18
    16b2:	06 c0       	rjmp	.+12     	; 0x16c0 <vfprintf+0x278>
    16b4:	28 e0       	ldi	r18, 0x08	; 8
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <vfprintf+0x27c>
    16ba:	20 e1       	ldi	r18, 0x10	; 16
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <vfprintf+0x27c>
    16c0:	20 e1       	ldi	r18, 0x10	; 16
    16c2:	32 e0       	ldi	r19, 0x02	; 2
    16c4:	f8 01       	movw	r30, r16
    16c6:	b7 fe       	sbrs	r11, 7
    16c8:	07 c0       	rjmp	.+14     	; 0x16d8 <vfprintf+0x290>
    16ca:	60 81       	ld	r22, Z
    16cc:	71 81       	ldd	r23, Z+1	; 0x01
    16ce:	82 81       	ldd	r24, Z+2	; 0x02
    16d0:	93 81       	ldd	r25, Z+3	; 0x03
    16d2:	0c 5f       	subi	r16, 0xFC	; 252
    16d4:	1f 4f       	sbci	r17, 0xFF	; 255
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <vfprintf+0x29c>
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	0e 5f       	subi	r16, 0xFE	; 254
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	a3 01       	movw	r20, r6
    16e6:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__ultoa_invert>
    16ea:	88 2e       	mov	r8, r24
    16ec:	86 18       	sub	r8, r6
    16ee:	fb 2d       	mov	r31, r11
    16f0:	ff 77       	andi	r31, 0x7F	; 127
    16f2:	3f 2e       	mov	r3, r31
    16f4:	36 fe       	sbrs	r3, 6
    16f6:	0d c0       	rjmp	.+26     	; 0x1712 <vfprintf+0x2ca>
    16f8:	23 2d       	mov	r18, r3
    16fa:	2e 7f       	andi	r18, 0xFE	; 254
    16fc:	a2 2e       	mov	r10, r18
    16fe:	89 14       	cp	r8, r9
    1700:	58 f4       	brcc	.+22     	; 0x1718 <vfprintf+0x2d0>
    1702:	34 fe       	sbrs	r3, 4
    1704:	0b c0       	rjmp	.+22     	; 0x171c <vfprintf+0x2d4>
    1706:	32 fc       	sbrc	r3, 2
    1708:	09 c0       	rjmp	.+18     	; 0x171c <vfprintf+0x2d4>
    170a:	83 2d       	mov	r24, r3
    170c:	8e 7e       	andi	r24, 0xEE	; 238
    170e:	a8 2e       	mov	r10, r24
    1710:	05 c0       	rjmp	.+10     	; 0x171c <vfprintf+0x2d4>
    1712:	b8 2c       	mov	r11, r8
    1714:	a3 2c       	mov	r10, r3
    1716:	03 c0       	rjmp	.+6      	; 0x171e <vfprintf+0x2d6>
    1718:	b8 2c       	mov	r11, r8
    171a:	01 c0       	rjmp	.+2      	; 0x171e <vfprintf+0x2d6>
    171c:	b9 2c       	mov	r11, r9
    171e:	a4 fe       	sbrs	r10, 4
    1720:	0f c0       	rjmp	.+30     	; 0x1740 <vfprintf+0x2f8>
    1722:	fe 01       	movw	r30, r28
    1724:	e8 0d       	add	r30, r8
    1726:	f1 1d       	adc	r31, r1
    1728:	80 81       	ld	r24, Z
    172a:	80 33       	cpi	r24, 0x30	; 48
    172c:	21 f4       	brne	.+8      	; 0x1736 <vfprintf+0x2ee>
    172e:	9a 2d       	mov	r25, r10
    1730:	99 7e       	andi	r25, 0xE9	; 233
    1732:	a9 2e       	mov	r10, r25
    1734:	09 c0       	rjmp	.+18     	; 0x1748 <vfprintf+0x300>
    1736:	a2 fe       	sbrs	r10, 2
    1738:	06 c0       	rjmp	.+12     	; 0x1746 <vfprintf+0x2fe>
    173a:	b3 94       	inc	r11
    173c:	b3 94       	inc	r11
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <vfprintf+0x300>
    1740:	8a 2d       	mov	r24, r10
    1742:	86 78       	andi	r24, 0x86	; 134
    1744:	09 f0       	breq	.+2      	; 0x1748 <vfprintf+0x300>
    1746:	b3 94       	inc	r11
    1748:	a3 fc       	sbrc	r10, 3
    174a:	11 c0       	rjmp	.+34     	; 0x176e <vfprintf+0x326>
    174c:	a0 fe       	sbrs	r10, 0
    174e:	06 c0       	rjmp	.+12     	; 0x175c <vfprintf+0x314>
    1750:	b2 14       	cp	r11, r2
    1752:	88 f4       	brcc	.+34     	; 0x1776 <vfprintf+0x32e>
    1754:	28 0c       	add	r2, r8
    1756:	92 2c       	mov	r9, r2
    1758:	9b 18       	sub	r9, r11
    175a:	0e c0       	rjmp	.+28     	; 0x1778 <vfprintf+0x330>
    175c:	b2 14       	cp	r11, r2
    175e:	60 f4       	brcc	.+24     	; 0x1778 <vfprintf+0x330>
    1760:	b6 01       	movw	r22, r12
    1762:	80 e2       	ldi	r24, 0x20	; 32
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    176a:	b3 94       	inc	r11
    176c:	f7 cf       	rjmp	.-18     	; 0x175c <vfprintf+0x314>
    176e:	b2 14       	cp	r11, r2
    1770:	18 f4       	brcc	.+6      	; 0x1778 <vfprintf+0x330>
    1772:	2b 18       	sub	r2, r11
    1774:	02 c0       	rjmp	.+4      	; 0x177a <vfprintf+0x332>
    1776:	98 2c       	mov	r9, r8
    1778:	21 2c       	mov	r2, r1
    177a:	a4 fe       	sbrs	r10, 4
    177c:	10 c0       	rjmp	.+32     	; 0x179e <vfprintf+0x356>
    177e:	b6 01       	movw	r22, r12
    1780:	80 e3       	ldi	r24, 0x30	; 48
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    1788:	a2 fe       	sbrs	r10, 2
    178a:	17 c0       	rjmp	.+46     	; 0x17ba <vfprintf+0x372>
    178c:	a1 fc       	sbrc	r10, 1
    178e:	03 c0       	rjmp	.+6      	; 0x1796 <vfprintf+0x34e>
    1790:	88 e7       	ldi	r24, 0x78	; 120
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 c0       	rjmp	.+4      	; 0x179a <vfprintf+0x352>
    1796:	88 e5       	ldi	r24, 0x58	; 88
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	b6 01       	movw	r22, r12
    179c:	0c c0       	rjmp	.+24     	; 0x17b6 <vfprintf+0x36e>
    179e:	8a 2d       	mov	r24, r10
    17a0:	86 78       	andi	r24, 0x86	; 134
    17a2:	59 f0       	breq	.+22     	; 0x17ba <vfprintf+0x372>
    17a4:	a1 fe       	sbrs	r10, 1
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <vfprintf+0x364>
    17a8:	8b e2       	ldi	r24, 0x2B	; 43
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <vfprintf+0x366>
    17ac:	80 e2       	ldi	r24, 0x20	; 32
    17ae:	a7 fc       	sbrc	r10, 7
    17b0:	8d e2       	ldi	r24, 0x2D	; 45
    17b2:	b6 01       	movw	r22, r12
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    17ba:	89 14       	cp	r8, r9
    17bc:	38 f4       	brcc	.+14     	; 0x17cc <vfprintf+0x384>
    17be:	b6 01       	movw	r22, r12
    17c0:	80 e3       	ldi	r24, 0x30	; 48
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    17c8:	9a 94       	dec	r9
    17ca:	f7 cf       	rjmp	.-18     	; 0x17ba <vfprintf+0x372>
    17cc:	8a 94       	dec	r8
    17ce:	f3 01       	movw	r30, r6
    17d0:	e8 0d       	add	r30, r8
    17d2:	f1 1d       	adc	r31, r1
    17d4:	80 81       	ld	r24, Z
    17d6:	b6 01       	movw	r22, r12
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    17de:	81 10       	cpse	r8, r1
    17e0:	f5 cf       	rjmp	.-22     	; 0x17cc <vfprintf+0x384>
    17e2:	22 20       	and	r2, r2
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <vfprintf+0x3a0>
    17e6:	42 ce       	rjmp	.-892    	; 0x146c <vfprintf+0x24>
    17e8:	b6 01       	movw	r22, r12
    17ea:	80 e2       	ldi	r24, 0x20	; 32
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    17f2:	2a 94       	dec	r2
    17f4:	f6 cf       	rjmp	.-20     	; 0x17e2 <vfprintf+0x39a>
    17f6:	f6 01       	movw	r30, r12
    17f8:	86 81       	ldd	r24, Z+6	; 0x06
    17fa:	97 81       	ldd	r25, Z+7	; 0x07
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <vfprintf+0x3ba>
    17fe:	8f ef       	ldi	r24, 0xFF	; 255
    1800:	9f ef       	ldi	r25, 0xFF	; 255
    1802:	2b 96       	adiw	r28, 0x0b	; 11
    1804:	e2 e1       	ldi	r30, 0x12	; 18
    1806:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <__epilogue_restores__>

0000180a <strnlen_P>:
    180a:	fc 01       	movw	r30, r24
    180c:	05 90       	lpm	r0, Z+
    180e:	61 50       	subi	r22, 0x01	; 1
    1810:	70 40       	sbci	r23, 0x00	; 0
    1812:	01 10       	cpse	r0, r1
    1814:	d8 f7       	brcc	.-10     	; 0x180c <strnlen_P+0x2>
    1816:	80 95       	com	r24
    1818:	90 95       	com	r25
    181a:	8e 0f       	add	r24, r30
    181c:	9f 1f       	adc	r25, r31
    181e:	08 95       	ret

00001820 <strnlen>:
    1820:	fc 01       	movw	r30, r24
    1822:	61 50       	subi	r22, 0x01	; 1
    1824:	70 40       	sbci	r23, 0x00	; 0
    1826:	01 90       	ld	r0, Z+
    1828:	01 10       	cpse	r0, r1
    182a:	d8 f7       	brcc	.-10     	; 0x1822 <strnlen+0x2>
    182c:	80 95       	com	r24
    182e:	90 95       	com	r25
    1830:	8e 0f       	add	r24, r30
    1832:	9f 1f       	adc	r25, r31
    1834:	08 95       	ret

00001836 <fputc>:
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	fb 01       	movw	r30, r22
    1840:	23 81       	ldd	r18, Z+3	; 0x03
    1842:	21 fd       	sbrc	r18, 1
    1844:	03 c0       	rjmp	.+6      	; 0x184c <fputc+0x16>
    1846:	8f ef       	ldi	r24, 0xFF	; 255
    1848:	9f ef       	ldi	r25, 0xFF	; 255
    184a:	2c c0       	rjmp	.+88     	; 0x18a4 <fputc+0x6e>
    184c:	22 ff       	sbrs	r18, 2
    184e:	16 c0       	rjmp	.+44     	; 0x187c <fputc+0x46>
    1850:	46 81       	ldd	r20, Z+6	; 0x06
    1852:	57 81       	ldd	r21, Z+7	; 0x07
    1854:	24 81       	ldd	r18, Z+4	; 0x04
    1856:	35 81       	ldd	r19, Z+5	; 0x05
    1858:	42 17       	cp	r20, r18
    185a:	53 07       	cpc	r21, r19
    185c:	44 f4       	brge	.+16     	; 0x186e <fputc+0x38>
    185e:	a0 81       	ld	r26, Z
    1860:	b1 81       	ldd	r27, Z+1	; 0x01
    1862:	9d 01       	movw	r18, r26
    1864:	2f 5f       	subi	r18, 0xFF	; 255
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	31 83       	std	Z+1, r19	; 0x01
    186a:	20 83       	st	Z, r18
    186c:	8c 93       	st	X, r24
    186e:	26 81       	ldd	r18, Z+6	; 0x06
    1870:	37 81       	ldd	r19, Z+7	; 0x07
    1872:	2f 5f       	subi	r18, 0xFF	; 255
    1874:	3f 4f       	sbci	r19, 0xFF	; 255
    1876:	37 83       	std	Z+7, r19	; 0x07
    1878:	26 83       	std	Z+6, r18	; 0x06
    187a:	14 c0       	rjmp	.+40     	; 0x18a4 <fputc+0x6e>
    187c:	8b 01       	movw	r16, r22
    187e:	ec 01       	movw	r28, r24
    1880:	fb 01       	movw	r30, r22
    1882:	00 84       	ldd	r0, Z+8	; 0x08
    1884:	f1 85       	ldd	r31, Z+9	; 0x09
    1886:	e0 2d       	mov	r30, r0
    1888:	09 95       	icall
    188a:	89 2b       	or	r24, r25
    188c:	e1 f6       	brne	.-72     	; 0x1846 <fputc+0x10>
    188e:	d8 01       	movw	r26, r16
    1890:	16 96       	adiw	r26, 0x06	; 6
    1892:	8d 91       	ld	r24, X+
    1894:	9c 91       	ld	r25, X
    1896:	17 97       	sbiw	r26, 0x07	; 7
    1898:	01 96       	adiw	r24, 0x01	; 1
    189a:	17 96       	adiw	r26, 0x07	; 7
    189c:	9c 93       	st	X, r25
    189e:	8e 93       	st	-X, r24
    18a0:	16 97       	sbiw	r26, 0x06	; 6
    18a2:	ce 01       	movw	r24, r28
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	1f 91       	pop	r17
    18aa:	0f 91       	pop	r16
    18ac:	08 95       	ret

000018ae <__ultoa_invert>:
    18ae:	fa 01       	movw	r30, r20
    18b0:	aa 27       	eor	r26, r26
    18b2:	28 30       	cpi	r18, 0x08	; 8
    18b4:	51 f1       	breq	.+84     	; 0x190a <__ultoa_invert+0x5c>
    18b6:	20 31       	cpi	r18, 0x10	; 16
    18b8:	81 f1       	breq	.+96     	; 0x191a <__ultoa_invert+0x6c>
    18ba:	e8 94       	clt
    18bc:	6f 93       	push	r22
    18be:	6e 7f       	andi	r22, 0xFE	; 254
    18c0:	6e 5f       	subi	r22, 0xFE	; 254
    18c2:	7f 4f       	sbci	r23, 0xFF	; 255
    18c4:	8f 4f       	sbci	r24, 0xFF	; 255
    18c6:	9f 4f       	sbci	r25, 0xFF	; 255
    18c8:	af 4f       	sbci	r26, 0xFF	; 255
    18ca:	b1 e0       	ldi	r27, 0x01	; 1
    18cc:	3e d0       	rcall	.+124    	; 0x194a <__ultoa_invert+0x9c>
    18ce:	b4 e0       	ldi	r27, 0x04	; 4
    18d0:	3c d0       	rcall	.+120    	; 0x194a <__ultoa_invert+0x9c>
    18d2:	67 0f       	add	r22, r23
    18d4:	78 1f       	adc	r23, r24
    18d6:	89 1f       	adc	r24, r25
    18d8:	9a 1f       	adc	r25, r26
    18da:	a1 1d       	adc	r26, r1
    18dc:	68 0f       	add	r22, r24
    18de:	79 1f       	adc	r23, r25
    18e0:	8a 1f       	adc	r24, r26
    18e2:	91 1d       	adc	r25, r1
    18e4:	a1 1d       	adc	r26, r1
    18e6:	6a 0f       	add	r22, r26
    18e8:	71 1d       	adc	r23, r1
    18ea:	81 1d       	adc	r24, r1
    18ec:	91 1d       	adc	r25, r1
    18ee:	a1 1d       	adc	r26, r1
    18f0:	20 d0       	rcall	.+64     	; 0x1932 <__ultoa_invert+0x84>
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <__ultoa_invert+0x48>
    18f4:	68 94       	set
    18f6:	3f 91       	pop	r19
    18f8:	2a e0       	ldi	r18, 0x0A	; 10
    18fa:	26 9f       	mul	r18, r22
    18fc:	11 24       	eor	r1, r1
    18fe:	30 19       	sub	r19, r0
    1900:	30 5d       	subi	r19, 0xD0	; 208
    1902:	31 93       	st	Z+, r19
    1904:	de f6       	brtc	.-74     	; 0x18bc <__ultoa_invert+0xe>
    1906:	cf 01       	movw	r24, r30
    1908:	08 95       	ret
    190a:	46 2f       	mov	r20, r22
    190c:	47 70       	andi	r20, 0x07	; 7
    190e:	40 5d       	subi	r20, 0xD0	; 208
    1910:	41 93       	st	Z+, r20
    1912:	b3 e0       	ldi	r27, 0x03	; 3
    1914:	0f d0       	rcall	.+30     	; 0x1934 <__ultoa_invert+0x86>
    1916:	c9 f7       	brne	.-14     	; 0x190a <__ultoa_invert+0x5c>
    1918:	f6 cf       	rjmp	.-20     	; 0x1906 <__ultoa_invert+0x58>
    191a:	46 2f       	mov	r20, r22
    191c:	4f 70       	andi	r20, 0x0F	; 15
    191e:	40 5d       	subi	r20, 0xD0	; 208
    1920:	4a 33       	cpi	r20, 0x3A	; 58
    1922:	18 f0       	brcs	.+6      	; 0x192a <__ultoa_invert+0x7c>
    1924:	49 5d       	subi	r20, 0xD9	; 217
    1926:	31 fd       	sbrc	r19, 1
    1928:	40 52       	subi	r20, 0x20	; 32
    192a:	41 93       	st	Z+, r20
    192c:	02 d0       	rcall	.+4      	; 0x1932 <__ultoa_invert+0x84>
    192e:	a9 f7       	brne	.-22     	; 0x191a <__ultoa_invert+0x6c>
    1930:	ea cf       	rjmp	.-44     	; 0x1906 <__ultoa_invert+0x58>
    1932:	b4 e0       	ldi	r27, 0x04	; 4
    1934:	a6 95       	lsr	r26
    1936:	97 95       	ror	r25
    1938:	87 95       	ror	r24
    193a:	77 95       	ror	r23
    193c:	67 95       	ror	r22
    193e:	ba 95       	dec	r27
    1940:	c9 f7       	brne	.-14     	; 0x1934 <__ultoa_invert+0x86>
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	61 05       	cpc	r22, r1
    1946:	71 05       	cpc	r23, r1
    1948:	08 95       	ret
    194a:	9b 01       	movw	r18, r22
    194c:	ac 01       	movw	r20, r24
    194e:	0a 2e       	mov	r0, r26
    1950:	06 94       	lsr	r0
    1952:	57 95       	ror	r21
    1954:	47 95       	ror	r20
    1956:	37 95       	ror	r19
    1958:	27 95       	ror	r18
    195a:	ba 95       	dec	r27
    195c:	c9 f7       	brne	.-14     	; 0x1950 <__ultoa_invert+0xa2>
    195e:	62 0f       	add	r22, r18
    1960:	73 1f       	adc	r23, r19
    1962:	84 1f       	adc	r24, r20
    1964:	95 1f       	adc	r25, r21
    1966:	a0 1d       	adc	r26, r0
    1968:	08 95       	ret

0000196a <__prologue_saves__>:
    196a:	2f 92       	push	r2
    196c:	3f 92       	push	r3
    196e:	4f 92       	push	r4
    1970:	5f 92       	push	r5
    1972:	6f 92       	push	r6
    1974:	7f 92       	push	r7
    1976:	8f 92       	push	r8
    1978:	9f 92       	push	r9
    197a:	af 92       	push	r10
    197c:	bf 92       	push	r11
    197e:	cf 92       	push	r12
    1980:	df 92       	push	r13
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	ca 1b       	sub	r28, r26
    1994:	db 0b       	sbc	r29, r27
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	09 94       	ijmp

000019a2 <__epilogue_restores__>:
    19a2:	2a 88       	ldd	r2, Y+18	; 0x12
    19a4:	39 88       	ldd	r3, Y+17	; 0x11
    19a6:	48 88       	ldd	r4, Y+16	; 0x10
    19a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    19aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    19ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    19ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    19b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    19b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    19b4:	b9 84       	ldd	r11, Y+9	; 0x09
    19b6:	c8 84       	ldd	r12, Y+8	; 0x08
    19b8:	df 80       	ldd	r13, Y+7	; 0x07
    19ba:	ee 80       	ldd	r14, Y+6	; 0x06
    19bc:	fd 80       	ldd	r15, Y+5	; 0x05
    19be:	0c 81       	ldd	r16, Y+4	; 0x04
    19c0:	1b 81       	ldd	r17, Y+3	; 0x03
    19c2:	aa 81       	ldd	r26, Y+2	; 0x02
    19c4:	b9 81       	ldd	r27, Y+1	; 0x01
    19c6:	ce 0f       	add	r28, r30
    19c8:	d1 1d       	adc	r29, r1
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	ed 01       	movw	r28, r26
    19d6:	08 95       	ret

000019d8 <_exit>:
    19d8:	f8 94       	cli

000019da <__stop_program>:
    19da:	ff cf       	rjmp	.-2      	; 0x19da <__stop_program>
